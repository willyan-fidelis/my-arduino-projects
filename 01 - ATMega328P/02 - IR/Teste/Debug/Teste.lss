
Teste.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000218  00800100  000013fa  0000148e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000013fa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000256  00800318  00800318  000016a6  2**0
                  ALLOC
  3 .stab         00002fa0  00000000  00000000  000016a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f25  00000000  00000000  00004648  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000790  00000000  00000000  00005570  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000c51  00000000  00000000  00005d00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000081d4  00000000  00000000  00006951  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000199d  00000000  00000000  0000eb25  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003f3d  00000000  00000000  000104c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000dd4  00000000  00000000  00014400  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001d39  00000000  00000000  000151d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00004ca5  00000000  00000000  00016f0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000640  00000000  00000000  0001bbb2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__ctors_end>
       4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
       8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
       c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      10:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      14:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      18:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      1c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      20:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      24:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      28:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      2c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      30:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      34:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      38:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      3c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      40:	0c 94 36 04 	jmp	0x86c	; 0x86c <__vector_16>
      44:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      48:	0c 94 03 06 	jmp	0xc06	; 0xc06 <__vector_18>
      4c:	0c 94 51 06 	jmp	0xca2	; 0xca2 <__vector_19>
      50:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      54:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      58:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      5c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      60:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      64:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>

00000068 <port_to_mode_PGM>:
      68:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000072 <port_to_output_PGM>:
      72:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000007c <port_to_input_PGM>:
      7c:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000086 <digital_pin_to_port_PGM>:
      86:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      96:	03 03 03 03                                         ....

0000009a <digital_pin_to_bit_mask_PGM>:
      9a:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      aa:	04 08 10 20                                         ... 

000000ae <digital_pin_to_timer_PGM>:
      ae:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
      be:	00 00 00 00                                         ....

000000c2 <__ctors_start>:
      c2:	2f 04       	cpc	r2, r15
      c4:	bd 07       	cpc	r27, r29

000000c6 <__ctors_end>:
      c6:	11 24       	eor	r1, r1
      c8:	1f be       	out	0x3f, r1	; 63
      ca:	cf ef       	ldi	r28, 0xFF	; 255
      cc:	d8 e0       	ldi	r29, 0x08	; 8
      ce:	de bf       	out	0x3e, r29	; 62
      d0:	cd bf       	out	0x3d, r28	; 61

000000d2 <__do_copy_data>:
      d2:	13 e0       	ldi	r17, 0x03	; 3
      d4:	a0 e0       	ldi	r26, 0x00	; 0
      d6:	b1 e0       	ldi	r27, 0x01	; 1
      d8:	ea ef       	ldi	r30, 0xFA	; 250
      da:	f3 e1       	ldi	r31, 0x13	; 19
      dc:	02 c0       	rjmp	.+4      	; 0xe2 <__do_copy_data+0x10>
      de:	05 90       	lpm	r0, Z+
      e0:	0d 92       	st	X+, r0
      e2:	a8 31       	cpi	r26, 0x18	; 24
      e4:	b1 07       	cpc	r27, r17
      e6:	d9 f7       	brne	.-10     	; 0xde <__do_copy_data+0xc>

000000e8 <__do_clear_bss>:
      e8:	15 e0       	ldi	r17, 0x05	; 5
      ea:	a8 e1       	ldi	r26, 0x18	; 24
      ec:	b3 e0       	ldi	r27, 0x03	; 3
      ee:	01 c0       	rjmp	.+2      	; 0xf2 <.do_clear_bss_start>

000000f0 <.do_clear_bss_loop>:
      f0:	1d 92       	st	X+, r1

000000f2 <.do_clear_bss_start>:
      f2:	ae 36       	cpi	r26, 0x6E	; 110
      f4:	b1 07       	cpc	r27, r17
      f6:	e1 f7       	brne	.-8      	; 0xf0 <.do_clear_bss_loop>

000000f8 <__do_global_ctors>:
      f8:	10 e0       	ldi	r17, 0x00	; 0
      fa:	c6 ec       	ldi	r28, 0xC6	; 198
      fc:	d0 e0       	ldi	r29, 0x00	; 0
      fe:	04 c0       	rjmp	.+8      	; 0x108 <__do_global_ctors+0x10>
     100:	22 97       	sbiw	r28, 0x02	; 2
     102:	fe 01       	movw	r30, r28
     104:	0e 94 f7 09 	call	0x13ee	; 0x13ee <__tablejump__>
     108:	c2 3c       	cpi	r28, 0xC2	; 194
     10a:	d1 07       	cpc	r29, r17
     10c:	c9 f7       	brne	.-14     	; 0x100 <__do_global_ctors+0x8>
     10e:	0e 94 13 08 	call	0x1026	; 0x1026 <main>
     112:	0c 94 fb 09 	jmp	0x13f6	; 0x13f6 <_exit>

00000116 <__bad_interrupt>:
     116:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011a <_Z10whileInputbiiRjib>:
     11a:	6f 92       	push	r6
     11c:	7f 92       	push	r7
     11e:	8f 92       	push	r8
     120:	9f 92       	push	r9
     122:	af 92       	push	r10
     124:	bf 92       	push	r11
     126:	cf 92       	push	r12
     128:	df 92       	push	r13
     12a:	ef 92       	push	r14
     12c:	ff 92       	push	r15
     12e:	0f 93       	push	r16
     130:	1f 93       	push	r17
     132:	cf 93       	push	r28
     134:	df 93       	push	r29
     136:	0f 92       	push	r0
     138:	cd b7       	in	r28, 0x3d	; 61
     13a:	de b7       	in	r29, 0x3e	; 62
     13c:	f8 2e       	mov	r15, r24
     13e:	4a 01       	movw	r8, r20
     140:	69 01       	movw	r12, r18
     142:	f9 01       	movw	r30, r18
     144:	11 82       	std	Z+1, r1	; 0x01
     146:	10 82       	st	Z, r1
     148:	81 e0       	ldi	r24, 0x01	; 1
     14a:	a8 2e       	mov	r10, r24
     14c:	b1 2c       	mov	r11, r1
     14e:	06 2e       	mov	r0, r22
     150:	02 c0       	rjmp	.+4      	; 0x156 <_Z10whileInputbiiRjib+0x3c>
     152:	aa 0c       	add	r10, r10
     154:	bb 1c       	adc	r11, r11
     156:	0a 94       	dec	r0
     158:	e2 f7       	brpl	.-8      	; 0x152 <_Z10whileInputbiiRjib+0x38>
     15a:	16 c0       	rjmp	.+44     	; 0x188 <_Z10whileInputbiiRjib+0x6e>
     15c:	f6 01       	movw	r30, r12
     15e:	80 81       	ld	r24, Z
     160:	91 81       	ldd	r25, Z+1	; 0x01
     162:	88 15       	cp	r24, r8
     164:	99 05       	cpc	r25, r9
     166:	20 f0       	brcs	.+8      	; 0x170 <_Z10whileInputbiiRjib+0x56>
     168:	11 82       	std	Z+1, r1	; 0x01
     16a:	10 82       	st	Z, r1
     16c:	80 e0       	ldi	r24, 0x00	; 0
     16e:	21 c0       	rjmp	.+66     	; 0x1b2 <_Z10whileInputbiiRjib+0x98>
     170:	c8 01       	movw	r24, r16
     172:	69 83       	std	Y+1, r22	; 0x01
     174:	0e 94 d7 04 	call	0x9ae	; 0x9ae <delayMicroseconds>
     178:	f6 01       	movw	r30, r12
     17a:	80 81       	ld	r24, Z
     17c:	91 81       	ldd	r25, Z+1	; 0x01
     17e:	80 0f       	add	r24, r16
     180:	91 1f       	adc	r25, r17
     182:	91 83       	std	Z+1, r25	; 0x01
     184:	80 83       	st	Z, r24
     186:	69 81       	ldd	r22, Y+1	; 0x01
     188:	89 b1       	in	r24, 0x09	; 9
     18a:	90 e0       	ldi	r25, 0x00	; 0
     18c:	ff 20       	and	r15, r15
     18e:	29 f0       	breq	.+10     	; 0x19a <_Z10whileInputbiiRjib+0x80>
     190:	8a 21       	and	r24, r10
     192:	9b 21       	and	r25, r11
     194:	00 97       	sbiw	r24, 0x00	; 0
     196:	49 f4       	brne	.+18     	; 0x1aa <_Z10whileInputbiiRjib+0x90>
     198:	0b c0       	rjmp	.+22     	; 0x1b0 <_Z10whileInputbiiRjib+0x96>
     19a:	06 2e       	mov	r0, r22
     19c:	02 c0       	rjmp	.+4      	; 0x1a2 <_Z10whileInputbiiRjib+0x88>
     19e:	95 95       	asr	r25
     1a0:	87 95       	ror	r24
     1a2:	0a 94       	dec	r0
     1a4:	e2 f7       	brpl	.-8      	; 0x19e <_Z10whileInputbiiRjib+0x84>
     1a6:	80 fd       	sbrc	r24, 0
     1a8:	03 c0       	rjmp	.+6      	; 0x1b0 <_Z10whileInputbiiRjib+0x96>
     1aa:	ee 20       	and	r14, r14
     1ac:	69 f3       	breq	.-38     	; 0x188 <_Z10whileInputbiiRjib+0x6e>
     1ae:	d6 cf       	rjmp	.-84     	; 0x15c <_Z10whileInputbiiRjib+0x42>
     1b0:	81 e0       	ldi	r24, 0x01	; 1
     1b2:	0f 90       	pop	r0
     1b4:	df 91       	pop	r29
     1b6:	cf 91       	pop	r28
     1b8:	1f 91       	pop	r17
     1ba:	0f 91       	pop	r16
     1bc:	ff 90       	pop	r15
     1be:	ef 90       	pop	r14
     1c0:	df 90       	pop	r13
     1c2:	cf 90       	pop	r12
     1c4:	bf 90       	pop	r11
     1c6:	af 90       	pop	r10
     1c8:	9f 90       	pop	r9
     1ca:	8f 90       	pop	r8
     1cc:	7f 90       	pop	r7
     1ce:	6f 90       	pop	r6
     1d0:	08 95       	ret

000001d2 <_Z10whileInputbimRmib>:
     1d2:	3f 92       	push	r3
     1d4:	4f 92       	push	r4
     1d6:	5f 92       	push	r5
     1d8:	6f 92       	push	r6
     1da:	7f 92       	push	r7
     1dc:	8f 92       	push	r8
     1de:	9f 92       	push	r9
     1e0:	af 92       	push	r10
     1e2:	bf 92       	push	r11
     1e4:	cf 92       	push	r12
     1e6:	df 92       	push	r13
     1e8:	ef 92       	push	r14
     1ea:	ff 92       	push	r15
     1ec:	0f 93       	push	r16
     1ee:	1f 93       	push	r17
     1f0:	cf 93       	push	r28
     1f2:	df 93       	push	r29
     1f4:	38 2e       	mov	r3, r24
     1f6:	d6 2e       	mov	r13, r22
     1f8:	ca 01       	movw	r24, r20
     1fa:	b9 01       	movw	r22, r18
     1fc:	e8 01       	movw	r28, r16
     1fe:	18 82       	st	Y, r1
     200:	19 82       	std	Y+1, r1	; 0x01
     202:	1a 82       	std	Y+2, r1	; 0x02
     204:	1b 82       	std	Y+3, r1	; 0x03
     206:	01 e0       	ldi	r16, 0x01	; 1
     208:	10 e0       	ldi	r17, 0x00	; 0
     20a:	0d 2c       	mov	r0, r13
     20c:	02 c0       	rjmp	.+4      	; 0x212 <_Z10whileInputbimRmib+0x40>
     20e:	00 0f       	add	r16, r16
     210:	11 1f       	adc	r17, r17
     212:	0a 94       	dec	r0
     214:	e2 f7       	brpl	.-8      	; 0x20e <_Z10whileInputbimRmib+0x3c>
     216:	28 ee       	ldi	r18, 0xE8	; 232
     218:	33 e0       	ldi	r19, 0x03	; 3
     21a:	40 e0       	ldi	r20, 0x00	; 0
     21c:	50 e0       	ldi	r21, 0x00	; 0
     21e:	0e 94 8d 09 	call	0x131a	; 0x131a <__mulsi3>
     222:	4b 01       	movw	r8, r22
     224:	5c 01       	movw	r10, r24
     226:	27 01       	movw	r4, r14
     228:	66 24       	eor	r6, r6
     22a:	57 fc       	sbrc	r5, 7
     22c:	60 94       	com	r6
     22e:	76 2c       	mov	r7, r6
     230:	1e c0       	rjmp	.+60     	; 0x26e <_Z10whileInputbimRmib+0x9c>
     232:	88 81       	ld	r24, Y
     234:	99 81       	ldd	r25, Y+1	; 0x01
     236:	aa 81       	ldd	r26, Y+2	; 0x02
     238:	bb 81       	ldd	r27, Y+3	; 0x03
     23a:	88 15       	cp	r24, r8
     23c:	99 05       	cpc	r25, r9
     23e:	aa 05       	cpc	r26, r10
     240:	bb 05       	cpc	r27, r11
     242:	30 f0       	brcs	.+12     	; 0x250 <_Z10whileInputbimRmib+0x7e>
     244:	18 82       	st	Y, r1
     246:	19 82       	std	Y+1, r1	; 0x01
     248:	1a 82       	std	Y+2, r1	; 0x02
     24a:	1b 82       	std	Y+3, r1	; 0x03
     24c:	80 e0       	ldi	r24, 0x00	; 0
     24e:	24 c0       	rjmp	.+72     	; 0x298 <_Z10whileInputbimRmib+0xc6>
     250:	c7 01       	movw	r24, r14
     252:	0e 94 d7 04 	call	0x9ae	; 0x9ae <delayMicroseconds>
     256:	88 81       	ld	r24, Y
     258:	99 81       	ldd	r25, Y+1	; 0x01
     25a:	aa 81       	ldd	r26, Y+2	; 0x02
     25c:	bb 81       	ldd	r27, Y+3	; 0x03
     25e:	84 0d       	add	r24, r4
     260:	95 1d       	adc	r25, r5
     262:	a6 1d       	adc	r26, r6
     264:	b7 1d       	adc	r27, r7
     266:	88 83       	st	Y, r24
     268:	99 83       	std	Y+1, r25	; 0x01
     26a:	aa 83       	std	Y+2, r26	; 0x02
     26c:	bb 83       	std	Y+3, r27	; 0x03
     26e:	89 b1       	in	r24, 0x09	; 9
     270:	90 e0       	ldi	r25, 0x00	; 0
     272:	33 20       	and	r3, r3
     274:	29 f0       	breq	.+10     	; 0x280 <_Z10whileInputbimRmib+0xae>
     276:	80 23       	and	r24, r16
     278:	91 23       	and	r25, r17
     27a:	00 97       	sbiw	r24, 0x00	; 0
     27c:	49 f4       	brne	.+18     	; 0x290 <_Z10whileInputbimRmib+0xbe>
     27e:	0b c0       	rjmp	.+22     	; 0x296 <_Z10whileInputbimRmib+0xc4>
     280:	0d 2c       	mov	r0, r13
     282:	02 c0       	rjmp	.+4      	; 0x288 <_Z10whileInputbimRmib+0xb6>
     284:	95 95       	asr	r25
     286:	87 95       	ror	r24
     288:	0a 94       	dec	r0
     28a:	e2 f7       	brpl	.-8      	; 0x284 <_Z10whileInputbimRmib+0xb2>
     28c:	80 fd       	sbrc	r24, 0
     28e:	03 c0       	rjmp	.+6      	; 0x296 <_Z10whileInputbimRmib+0xc4>
     290:	cc 20       	and	r12, r12
     292:	69 f3       	breq	.-38     	; 0x26e <_Z10whileInputbimRmib+0x9c>
     294:	ce cf       	rjmp	.-100    	; 0x232 <_Z10whileInputbimRmib+0x60>
     296:	81 e0       	ldi	r24, 0x01	; 1
     298:	df 91       	pop	r29
     29a:	cf 91       	pop	r28
     29c:	1f 91       	pop	r17
     29e:	0f 91       	pop	r16
     2a0:	ff 90       	pop	r15
     2a2:	ef 90       	pop	r14
     2a4:	df 90       	pop	r13
     2a6:	cf 90       	pop	r12
     2a8:	bf 90       	pop	r11
     2aa:	af 90       	pop	r10
     2ac:	9f 90       	pop	r9
     2ae:	8f 90       	pop	r8
     2b0:	7f 90       	pop	r7
     2b2:	6f 90       	pop	r6
     2b4:	5f 90       	pop	r5
     2b6:	4f 90       	pop	r4
     2b8:	3f 90       	pop	r3
     2ba:	08 95       	ret

000002bc <_ZN2IRC1Ei>:
     2bc:	0f 93       	push	r16
     2be:	1f 93       	push	r17
     2c0:	cf 93       	push	r28
     2c2:	df 93       	push	r29
     2c4:	ec 01       	movw	r28, r24
     2c6:	8b 01       	movw	r16, r22
     2c8:	8c e4       	ldi	r24, 0x4C	; 76
     2ca:	95 e0       	ldi	r25, 0x05	; 5
     2cc:	40 e8       	ldi	r20, 0x80	; 128
     2ce:	55 e2       	ldi	r21, 0x25	; 37
     2d0:	60 e0       	ldi	r22, 0x00	; 0
     2d2:	70 e0       	ldi	r23, 0x00	; 0
     2d4:	0e 94 8c 06 	call	0xd18	; 0xd18 <_ZN14HardwareSerial5beginEm>
     2d8:	1a 83       	std	Y+2, r17	; 0x02
     2da:	09 83       	std	Y+1, r16	; 0x01
     2dc:	cb 56       	subi	r28, 0x6B	; 107
     2de:	de 4f       	sbci	r29, 0xFE	; 254
     2e0:	81 e0       	ldi	r24, 0x01	; 1
     2e2:	88 83       	st	Y, r24
     2e4:	df 91       	pop	r29
     2e6:	cf 91       	pop	r28
     2e8:	1f 91       	pop	r17
     2ea:	0f 91       	pop	r16
     2ec:	08 95       	ret

000002ee <_ZN2IR7pulseIRElii>:
     2ee:	7f 92       	push	r7
     2f0:	8f 92       	push	r8
     2f2:	9f 92       	push	r9
     2f4:	af 92       	push	r10
     2f6:	bf 92       	push	r11
     2f8:	cf 92       	push	r12
     2fa:	df 92       	push	r13
     2fc:	ef 92       	push	r14
     2fe:	ff 92       	push	r15
     300:	0f 93       	push	r16
     302:	1f 93       	push	r17
     304:	cf 93       	push	r28
     306:	df 93       	push	r29
     308:	4a 01       	movw	r8, r20
     30a:	5b 01       	movw	r10, r22
     30c:	72 2e       	mov	r7, r18
     30e:	b8 01       	movw	r22, r16
     310:	88 ee       	ldi	r24, 0xE8	; 232
     312:	93 e0       	ldi	r25, 0x03	; 3
     314:	0e 94 ac 09 	call	0x1358	; 0x1358 <__divmodhi4>
     318:	cb 01       	movw	r24, r22
     31a:	06 97       	sbiw	r24, 0x06	; 6
     31c:	62 e0       	ldi	r22, 0x02	; 2
     31e:	70 e0       	ldi	r23, 0x00	; 0
     320:	0e 94 ac 09 	call	0x1358	; 0x1358 <__divmodhi4>
     324:	eb 01       	movw	r28, r22
     326:	cb 01       	movw	r24, r22
     328:	03 96       	adiw	r24, 0x03	; 3
     32a:	88 0f       	add	r24, r24
     32c:	99 1f       	adc	r25, r25
     32e:	6c 01       	movw	r12, r24
     330:	ee 24       	eor	r14, r14
     332:	d7 fc       	sbrc	r13, 7
     334:	e0 94       	com	r14
     336:	fe 2c       	mov	r15, r14
     338:	f0 94       	com	r15
     33a:	e0 94       	com	r14
     33c:	d0 94       	com	r13
     33e:	c0 94       	com	r12
     340:	c1 1c       	adc	r12, r1
     342:	d1 1c       	adc	r13, r1
     344:	e1 1c       	adc	r14, r1
     346:	f1 1c       	adc	r15, r1
     348:	12 c0       	rjmp	.+36     	; 0x36e <_ZN2IR7pulseIRElii+0x80>
     34a:	87 2d       	mov	r24, r7
     34c:	61 e0       	ldi	r22, 0x01	; 1
     34e:	0e 94 5b 05 	call	0xab6	; 0xab6 <digitalWrite>
     352:	ce 01       	movw	r24, r28
     354:	0e 94 d7 04 	call	0x9ae	; 0x9ae <delayMicroseconds>
     358:	87 2d       	mov	r24, r7
     35a:	60 e0       	ldi	r22, 0x00	; 0
     35c:	0e 94 5b 05 	call	0xab6	; 0xab6 <digitalWrite>
     360:	ce 01       	movw	r24, r28
     362:	0e 94 d7 04 	call	0x9ae	; 0x9ae <delayMicroseconds>
     366:	8c 0c       	add	r8, r12
     368:	9d 1c       	adc	r9, r13
     36a:	ae 1c       	adc	r10, r14
     36c:	bf 1c       	adc	r11, r15
     36e:	18 14       	cp	r1, r8
     370:	19 04       	cpc	r1, r9
     372:	1a 04       	cpc	r1, r10
     374:	1b 04       	cpc	r1, r11
     376:	4c f3       	brlt	.-46     	; 0x34a <_ZN2IR7pulseIRElii+0x5c>
     378:	df 91       	pop	r29
     37a:	cf 91       	pop	r28
     37c:	1f 91       	pop	r17
     37e:	0f 91       	pop	r16
     380:	ff 90       	pop	r15
     382:	ef 90       	pop	r14
     384:	df 90       	pop	r13
     386:	cf 90       	pop	r12
     388:	bf 90       	pop	r11
     38a:	af 90       	pop	r10
     38c:	9f 90       	pop	r9
     38e:	8f 90       	pop	r8
     390:	7f 90       	pop	r7
     392:	08 95       	ret

00000394 <_ZN2IR4playEi>:
     394:	af 92       	push	r10
     396:	bf 92       	push	r11
     398:	cf 92       	push	r12
     39a:	df 92       	push	r13
     39c:	ef 92       	push	r14
     39e:	ff 92       	push	r15
     3a0:	0f 93       	push	r16
     3a2:	1f 93       	push	r17
     3a4:	cf 93       	push	r28
     3a6:	df 93       	push	r29
     3a8:	ec 01       	movw	r28, r24
     3aa:	5b 01       	movw	r10, r22
     3ac:	88 81       	ld	r24, Y
     3ae:	88 23       	and	r24, r24
     3b0:	29 f1       	breq	.+74     	; 0x3fc <_ZN2IR4playEi+0x68>
     3b2:	7e 01       	movw	r14, r28
     3b4:	cc 24       	eor	r12, r12
     3b6:	dd 24       	eor	r13, r13
     3b8:	13 c0       	rjmp	.+38     	; 0x3e0 <_ZN2IR4playEi+0x4c>
     3ba:	f7 01       	movw	r30, r14
     3bc:	41 81       	ldd	r20, Z+1	; 0x01
     3be:	52 81       	ldd	r21, Z+2	; 0x02
     3c0:	60 e0       	ldi	r22, 0x00	; 0
     3c2:	70 e0       	ldi	r23, 0x00	; 0
     3c4:	09 81       	ldd	r16, Y+1	; 0x01
     3c6:	1a 81       	ldd	r17, Y+2	; 0x02
     3c8:	ce 01       	movw	r24, r28
     3ca:	95 01       	movw	r18, r10
     3cc:	0e 94 77 01 	call	0x2ee	; 0x2ee <_ZN2IR7pulseIRElii>
     3d0:	f7 01       	movw	r30, r14
     3d2:	83 81       	ldd	r24, Z+3	; 0x03
     3d4:	94 81       	ldd	r25, Z+4	; 0x04
     3d6:	0e 94 d7 04 	call	0x9ae	; 0x9ae <delayMicroseconds>
     3da:	08 94       	sec
     3dc:	c1 1c       	adc	r12, r1
     3de:	d1 1c       	adc	r13, r1
     3e0:	84 e0       	ldi	r24, 0x04	; 4
     3e2:	90 e0       	ldi	r25, 0x00	; 0
     3e4:	e8 0e       	add	r14, r24
     3e6:	f9 1e       	adc	r15, r25
     3e8:	8b 81       	ldd	r24, Y+3	; 0x03
     3ea:	9c 81       	ldd	r25, Y+4	; 0x04
     3ec:	c8 16       	cp	r12, r24
     3ee:	d9 06       	cpc	r13, r25
     3f0:	24 f3       	brlt	.-56     	; 0x3ba <_ZN2IR4playEi+0x26>
     3f2:	8c e4       	ldi	r24, 0x4C	; 76
     3f4:	95 e0       	ldi	r25, 0x05	; 5
     3f6:	6d e2       	ldi	r22, 0x2D	; 45
     3f8:	71 e0       	ldi	r23, 0x01	; 1
     3fa:	04 c0       	rjmp	.+8      	; 0x404 <_ZN2IR4playEi+0x70>
     3fc:	8c e4       	ldi	r24, 0x4C	; 76
     3fe:	95 e0       	ldi	r25, 0x05	; 5
     400:	67 e4       	ldi	r22, 0x47	; 71
     402:	71 e0       	ldi	r23, 0x01	; 1
     404:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <_ZN5Print7printlnEPKc>
     408:	df 91       	pop	r29
     40a:	cf 91       	pop	r28
     40c:	1f 91       	pop	r17
     40e:	0f 91       	pop	r16
     410:	ff 90       	pop	r15
     412:	ef 90       	pop	r14
     414:	df 90       	pop	r13
     416:	cf 90       	pop	r12
     418:	bf 90       	pop	r11
     41a:	af 90       	pop	r10
     41c:	08 95       	ret

0000041e <_ZN2IR11printIRCodeEv>:
     41e:	ef 92       	push	r14
     420:	ff 92       	push	r15
     422:	0f 93       	push	r16
     424:	1f 93       	push	r17
     426:	cf 93       	push	r28
     428:	df 93       	push	r29
     42a:	ec 01       	movw	r28, r24
     42c:	8c e4       	ldi	r24, 0x4C	; 76
     42e:	95 e0       	ldi	r25, 0x05	; 5
     430:	67 e5       	ldi	r22, 0x57	; 87
     432:	71 e0       	ldi	r23, 0x01	; 1
     434:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <_ZN5Print7printlnEPKc>
     438:	8c e4       	ldi	r24, 0x4C	; 76
     43a:	95 e0       	ldi	r25, 0x05	; 5
     43c:	64 e8       	ldi	r22, 0x84	; 132
     43e:	71 e0       	ldi	r23, 0x01	; 1
     440:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <_ZN5Print7printlnEPKc>
     444:	8c e4       	ldi	r24, 0x4C	; 76
     446:	95 e0       	ldi	r25, 0x05	; 5
     448:	69 e9       	ldi	r22, 0x99	; 153
     44a:	71 e0       	ldi	r23, 0x01	; 1
     44c:	0e 94 77 09 	call	0x12ee	; 0x12ee <_ZN5Print5printEPKc>
     450:	69 81       	ldd	r22, Y+1	; 0x01
     452:	7a 81       	ldd	r23, Y+2	; 0x02
     454:	8c e4       	ldi	r24, 0x4C	; 76
     456:	95 e0       	ldi	r25, 0x05	; 5
     458:	4a e0       	ldi	r20, 0x0A	; 10
     45a:	50 e0       	ldi	r21, 0x00	; 0
     45c:	0e 94 58 09 	call	0x12b0	; 0x12b0 <_ZN5Print7printlnEii>
     460:	8c e4       	ldi	r24, 0x4C	; 76
     462:	95 e0       	ldi	r25, 0x05	; 5
     464:	6e e9       	ldi	r22, 0x9E	; 158
     466:	71 e0       	ldi	r23, 0x01	; 1
     468:	0e 94 77 09 	call	0x12ee	; 0x12ee <_ZN5Print5printEPKc>
     46c:	69 81       	ldd	r22, Y+1	; 0x01
     46e:	7a 81       	ldd	r23, Y+2	; 0x02
     470:	8c e4       	ldi	r24, 0x4C	; 76
     472:	95 e0       	ldi	r25, 0x05	; 5
     474:	4a e0       	ldi	r20, 0x0A	; 10
     476:	50 e0       	ldi	r21, 0x00	; 0
     478:	0e 94 58 09 	call	0x12b0	; 0x12b0 <_ZN5Print7printlnEii>
     47c:	8c e4       	ldi	r24, 0x4C	; 76
     47e:	95 e0       	ldi	r25, 0x05	; 5
     480:	64 ea       	ldi	r22, 0xA4	; 164
     482:	71 e0       	ldi	r23, 0x01	; 1
     484:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <_ZN5Print7printlnEPKc>
     488:	88 81       	ld	r24, Y
     48a:	88 23       	and	r24, r24
     48c:	09 f4       	brne	.+2      	; 0x490 <_ZN2IR11printIRCodeEv+0x72>
     48e:	4e c0       	rjmp	.+156    	; 0x52c <_ZN2IR11printIRCodeEv+0x10e>
     490:	8c e4       	ldi	r24, 0x4C	; 76
     492:	95 e0       	ldi	r25, 0x05	; 5
     494:	67 eb       	ldi	r22, 0xB7	; 183
     496:	71 e0       	ldi	r23, 0x01	; 1
     498:	0e 94 77 09 	call	0x12ee	; 0x12ee <_ZN5Print5printEPKc>
     49c:	6b 81       	ldd	r22, Y+3	; 0x03
     49e:	7c 81       	ldd	r23, Y+4	; 0x04
     4a0:	8c e4       	ldi	r24, 0x4C	; 76
     4a2:	95 e0       	ldi	r25, 0x05	; 5
     4a4:	4a e0       	ldi	r20, 0x0A	; 10
     4a6:	50 e0       	ldi	r21, 0x00	; 0
     4a8:	0e 94 58 09 	call	0x12b0	; 0x12b0 <_ZN5Print7printlnEii>
     4ac:	8e 01       	movw	r16, r28
     4ae:	ee 24       	eor	r14, r14
     4b0:	ff 24       	eor	r15, r15
     4b2:	34 c0       	rjmp	.+104    	; 0x51c <_ZN2IR11printIRCodeEv+0xfe>
     4b4:	8c e4       	ldi	r24, 0x4C	; 76
     4b6:	95 e0       	ldi	r25, 0x05	; 5
     4b8:	68 ec       	ldi	r22, 0xC8	; 200
     4ba:	71 e0       	ldi	r23, 0x01	; 1
     4bc:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <_ZN5Print7printlnEPKc>
     4c0:	8c e4       	ldi	r24, 0x4C	; 76
     4c2:	95 e0       	ldi	r25, 0x05	; 5
     4c4:	6b ed       	ldi	r22, 0xDB	; 219
     4c6:	71 e0       	ldi	r23, 0x01	; 1
     4c8:	0e 94 77 09 	call	0x12ee	; 0x12ee <_ZN5Print5printEPKc>
     4cc:	8c e4       	ldi	r24, 0x4C	; 76
     4ce:	95 e0       	ldi	r25, 0x05	; 5
     4d0:	b7 01       	movw	r22, r14
     4d2:	4a e0       	ldi	r20, 0x0A	; 10
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	0e 94 58 09 	call	0x12b0	; 0x12b0 <_ZN5Print7printlnEii>
     4da:	8c e4       	ldi	r24, 0x4C	; 76
     4dc:	95 e0       	ldi	r25, 0x05	; 5
     4de:	64 ee       	ldi	r22, 0xE4	; 228
     4e0:	71 e0       	ldi	r23, 0x01	; 1
     4e2:	0e 94 77 09 	call	0x12ee	; 0x12ee <_ZN5Print5printEPKc>
     4e6:	f8 01       	movw	r30, r16
     4e8:	61 81       	ldd	r22, Z+1	; 0x01
     4ea:	72 81       	ldd	r23, Z+2	; 0x02
     4ec:	8c e4       	ldi	r24, 0x4C	; 76
     4ee:	95 e0       	ldi	r25, 0x05	; 5
     4f0:	4a e0       	ldi	r20, 0x0A	; 10
     4f2:	50 e0       	ldi	r21, 0x00	; 0
     4f4:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <_ZN5Print7printlnEji>
     4f8:	8c e4       	ldi	r24, 0x4C	; 76
     4fa:	95 e0       	ldi	r25, 0x05	; 5
     4fc:	60 ef       	ldi	r22, 0xF0	; 240
     4fe:	71 e0       	ldi	r23, 0x01	; 1
     500:	0e 94 77 09 	call	0x12ee	; 0x12ee <_ZN5Print5printEPKc>
     504:	f8 01       	movw	r30, r16
     506:	63 81       	ldd	r22, Z+3	; 0x03
     508:	74 81       	ldd	r23, Z+4	; 0x04
     50a:	8c e4       	ldi	r24, 0x4C	; 76
     50c:	95 e0       	ldi	r25, 0x05	; 5
     50e:	4a e0       	ldi	r20, 0x0A	; 10
     510:	50 e0       	ldi	r21, 0x00	; 0
     512:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <_ZN5Print7printlnEji>
     516:	08 94       	sec
     518:	e1 1c       	adc	r14, r1
     51a:	f1 1c       	adc	r15, r1
     51c:	0c 5f       	subi	r16, 0xFC	; 252
     51e:	1f 4f       	sbci	r17, 0xFF	; 255
     520:	8b 81       	ldd	r24, Y+3	; 0x03
     522:	9c 81       	ldd	r25, Y+4	; 0x04
     524:	e8 16       	cp	r14, r24
     526:	f9 06       	cpc	r15, r25
     528:	2c f2       	brlt	.-118    	; 0x4b4 <_ZN2IR11printIRCodeEv+0x96>
     52a:	06 c0       	rjmp	.+12     	; 0x538 <_ZN2IR11printIRCodeEv+0x11a>
     52c:	8c e4       	ldi	r24, 0x4C	; 76
     52e:	95 e0       	ldi	r25, 0x05	; 5
     530:	6d ef       	ldi	r22, 0xFD	; 253
     532:	71 e0       	ldi	r23, 0x01	; 1
     534:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <_ZN5Print7printlnEPKc>
     538:	8c e4       	ldi	r24, 0x4C	; 76
     53a:	95 e0       	ldi	r25, 0x05	; 5
     53c:	67 e5       	ldi	r22, 0x57	; 87
     53e:	71 e0       	ldi	r23, 0x01	; 1
     540:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <_ZN5Print7printlnEPKc>
     544:	64 ef       	ldi	r22, 0xF4	; 244
     546:	71 e0       	ldi	r23, 0x01	; 1
     548:	80 e0       	ldi	r24, 0x00	; 0
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	0e 94 7e 04 	call	0x8fc	; 0x8fc <delay>
     550:	df 91       	pop	r29
     552:	cf 91       	pop	r28
     554:	1f 91       	pop	r17
     556:	0f 91       	pop	r16
     558:	ff 90       	pop	r15
     55a:	ef 90       	pop	r14
     55c:	08 95       	ret

0000055e <_ZN2IR7captureEib>:
     55e:	4f 92       	push	r4
     560:	5f 92       	push	r5
     562:	6f 92       	push	r6
     564:	7f 92       	push	r7
     566:	8f 92       	push	r8
     568:	9f 92       	push	r9
     56a:	af 92       	push	r10
     56c:	bf 92       	push	r11
     56e:	cf 92       	push	r12
     570:	df 92       	push	r13
     572:	ef 92       	push	r14
     574:	ff 92       	push	r15
     576:	0f 93       	push	r16
     578:	1f 93       	push	r17
     57a:	cf 93       	push	r28
     57c:	df 93       	push	r29
     57e:	00 d0       	rcall	.+0      	; 0x580 <_ZN2IR7captureEib+0x22>
     580:	00 d0       	rcall	.+0      	; 0x582 <_ZN2IR7captureEib+0x24>
     582:	cd b7       	in	r28, 0x3d	; 61
     584:	de b7       	in	r29, 0x3e	; 62
     586:	5c 01       	movw	r10, r24
     588:	2b 01       	movw	r4, r22
     58a:	fc 01       	movw	r30, r24
     58c:	eb 56       	subi	r30, 0x6B	; 107
     58e:	fe 4f       	sbci	r31, 0xFE	; 254
     590:	70 80       	ld	r7, Z
     592:	66 24       	eor	r6, r6
     594:	63 94       	inc	r6
     596:	67 24       	eor	r6, r7
     598:	fc 01       	movw	r30, r24
     59a:	10 82       	st	Z, r1
     59c:	14 82       	std	Z+4, r1	; 0x04
     59e:	13 82       	std	Z+3, r1	; 0x03
     5a0:	87 2d       	mov	r24, r7
     5a2:	44 23       	and	r20, r20
     5a4:	a9 f0       	breq	.+42     	; 0x5d0 <_ZN2IR7captureEib+0x72>
     5a6:	28 e8       	ldi	r18, 0x88	; 136
     5a8:	33 e1       	ldi	r19, 0x13	; 19
     5aa:	40 e0       	ldi	r20, 0x00	; 0
     5ac:	50 e0       	ldi	r21, 0x00	; 0
     5ae:	8e 01       	movw	r16, r28
     5b0:	0f 5f       	subi	r16, 0xFF	; 255
     5b2:	1f 4f       	sbci	r17, 0xFF	; 255
     5b4:	fe e1       	ldi	r31, 0x1E	; 30
     5b6:	ef 2e       	mov	r14, r31
     5b8:	f1 2c       	mov	r15, r1
     5ba:	cc 24       	eor	r12, r12
     5bc:	c3 94       	inc	r12
     5be:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <_Z10whileInputbimRmib>
     5c2:	88 23       	and	r24, r24
     5c4:	91 f4       	brne	.+36     	; 0x5ea <_ZN2IR7captureEib+0x8c>
     5c6:	8c e4       	ldi	r24, 0x4C	; 76
     5c8:	95 e0       	ldi	r25, 0x05	; 5
     5ca:	65 e2       	ldi	r22, 0x25	; 37
     5cc:	72 e0       	ldi	r23, 0x02	; 2
     5ce:	18 c0       	rjmp	.+48     	; 0x600 <_ZN2IR7captureEib+0xa2>
     5d0:	28 e8       	ldi	r18, 0x88	; 136
     5d2:	33 e1       	ldi	r19, 0x13	; 19
     5d4:	40 e0       	ldi	r20, 0x00	; 0
     5d6:	50 e0       	ldi	r21, 0x00	; 0
     5d8:	8e 01       	movw	r16, r28
     5da:	0f 5f       	subi	r16, 0xFF	; 255
     5dc:	1f 4f       	sbci	r17, 0xFF	; 255
     5de:	ee e1       	ldi	r30, 0x1E	; 30
     5e0:	ee 2e       	mov	r14, r30
     5e2:	f1 2c       	mov	r15, r1
     5e4:	cc 24       	eor	r12, r12
     5e6:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <_Z10whileInputbimRmib>
     5ea:	88 24       	eor	r8, r8
     5ec:	99 24       	eor	r9, r9
     5ee:	0c c0       	rjmp	.+24     	; 0x608 <_ZN2IR7captureEib+0xaa>
     5f0:	f5 01       	movw	r30, r10
     5f2:	10 82       	st	Z, r1
     5f4:	14 82       	std	Z+4, r1	; 0x04
     5f6:	13 82       	std	Z+3, r1	; 0x03
     5f8:	8c e4       	ldi	r24, 0x4C	; 76
     5fa:	95 e0       	ldi	r25, 0x05	; 5
     5fc:	6a e3       	ldi	r22, 0x3A	; 58
     5fe:	72 e0       	ldi	r23, 0x02	; 2
     600:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <_ZN5Print7printlnEPKc>
     604:	80 e0       	ldi	r24, 0x00	; 0
     606:	35 c0       	rjmp	.+106    	; 0x672 <_ZN2IR7captureEib+0x114>
     608:	64 01       	movw	r12, r8
     60a:	cc 0c       	add	r12, r12
     60c:	dd 1c       	adc	r13, r13
     60e:	cc 0c       	add	r12, r12
     610:	dd 1c       	adc	r13, r13
     612:	96 01       	movw	r18, r12
     614:	2b 5f       	subi	r18, 0xFB	; 251
     616:	3f 4f       	sbci	r19, 0xFF	; 255
     618:	2a 0d       	add	r18, r10
     61a:	3b 1d       	adc	r19, r11
     61c:	86 2d       	mov	r24, r6
     61e:	b2 01       	movw	r22, r4
     620:	48 ee       	ldi	r20, 0xE8	; 232
     622:	5d ef       	ldi	r21, 0xFD	; 253
     624:	0e e1       	ldi	r16, 0x1E	; 30
     626:	10 e0       	ldi	r17, 0x00	; 0
     628:	ee 24       	eor	r14, r14
     62a:	e3 94       	inc	r14
     62c:	0e 94 8d 00 	call	0x11a	; 0x11a <_Z10whileInputbiiRjib>
     630:	88 23       	and	r24, r24
     632:	a1 f0       	breq	.+40     	; 0x65c <_ZN2IR7captureEib+0xfe>
     634:	96 01       	movw	r18, r12
     636:	29 5f       	subi	r18, 0xF9	; 249
     638:	3f 4f       	sbci	r19, 0xFF	; 255
     63a:	2a 0d       	add	r18, r10
     63c:	3b 1d       	adc	r19, r11
     63e:	87 2d       	mov	r24, r7
     640:	b2 01       	movw	r22, r4
     642:	48 ee       	ldi	r20, 0xE8	; 232
     644:	5d ef       	ldi	r21, 0xFD	; 253
     646:	0e e1       	ldi	r16, 0x1E	; 30
     648:	10 e0       	ldi	r17, 0x00	; 0
     64a:	ee 24       	eor	r14, r14
     64c:	e3 94       	inc	r14
     64e:	0e 94 8d 00 	call	0x11a	; 0x11a <_Z10whileInputbiiRjib>
     652:	08 94       	sec
     654:	81 1c       	adc	r8, r1
     656:	91 1c       	adc	r9, r1
     658:	88 23       	and	r24, r24
     65a:	31 f4       	brne	.+12     	; 0x668 <_ZN2IR7captureEib+0x10a>
     65c:	81 e0       	ldi	r24, 0x01	; 1
     65e:	f5 01       	movw	r30, r10
     660:	80 83       	st	Z, r24
     662:	94 82       	std	Z+4, r9	; 0x04
     664:	83 82       	std	Z+3, r8	; 0x03
     666:	05 c0       	rjmp	.+10     	; 0x672 <_ZN2IR7captureEib+0x114>
     668:	f4 e6       	ldi	r31, 0x64	; 100
     66a:	8f 16       	cp	r8, r31
     66c:	91 04       	cpc	r9, r1
     66e:	61 f6       	brne	.-104    	; 0x608 <_ZN2IR7captureEib+0xaa>
     670:	bf cf       	rjmp	.-130    	; 0x5f0 <_ZN2IR7captureEib+0x92>
     672:	0f 90       	pop	r0
     674:	0f 90       	pop	r0
     676:	0f 90       	pop	r0
     678:	0f 90       	pop	r0
     67a:	df 91       	pop	r29
     67c:	cf 91       	pop	r28
     67e:	1f 91       	pop	r17
     680:	0f 91       	pop	r16
     682:	ff 90       	pop	r15
     684:	ef 90       	pop	r14
     686:	df 90       	pop	r13
     688:	cf 90       	pop	r12
     68a:	bf 90       	pop	r11
     68c:	af 90       	pop	r10
     68e:	9f 90       	pop	r9
     690:	8f 90       	pop	r8
     692:	7f 90       	pop	r7
     694:	6f 90       	pop	r6
     696:	5f 90       	pop	r5
     698:	4f 90       	pop	r4
     69a:	08 95       	ret

0000069c <_ZN2IR5teachEi>:
     69c:	0f 93       	push	r16
     69e:	1f 93       	push	r17
     6a0:	cf 93       	push	r28
     6a2:	df 93       	push	r29
     6a4:	ec 01       	movw	r28, r24
     6a6:	8b 01       	movw	r16, r22
     6a8:	8c e4       	ldi	r24, 0x4C	; 76
     6aa:	95 e0       	ldi	r25, 0x05	; 5
     6ac:	6a e8       	ldi	r22, 0x8A	; 138
     6ae:	72 e0       	ldi	r23, 0x02	; 2
     6b0:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <_ZN5Print7printlnEPKc>
     6b4:	ce 01       	movw	r24, r28
     6b6:	b8 01       	movw	r22, r16
     6b8:	41 e0       	ldi	r20, 0x01	; 1
     6ba:	0e 94 af 02 	call	0x55e	; 0x55e <_ZN2IR7captureEib>
     6be:	88 23       	and	r24, r24
     6c0:	29 f0       	breq	.+10     	; 0x6cc <_ZN2IR5teachEi+0x30>
     6c2:	8c e4       	ldi	r24, 0x4C	; 76
     6c4:	95 e0       	ldi	r25, 0x05	; 5
     6c6:	66 eb       	ldi	r22, 0xB6	; 182
     6c8:	72 e0       	ldi	r23, 0x02	; 2
     6ca:	04 c0       	rjmp	.+8      	; 0x6d4 <_ZN2IR5teachEi+0x38>
     6cc:	8c e4       	ldi	r24, 0x4C	; 76
     6ce:	95 e0       	ldi	r25, 0x05	; 5
     6d0:	6c ec       	ldi	r22, 0xCC	; 204
     6d2:	72 e0       	ldi	r23, 0x02	; 2
     6d4:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <_ZN5Print7printlnEPKc>
     6d8:	df 91       	pop	r29
     6da:	cf 91       	pop	r28
     6dc:	1f 91       	pop	r17
     6de:	0f 91       	pop	r16
     6e0:	08 95       	ret

000006e2 <setup>:
     6e2:	8c e4       	ldi	r24, 0x4C	; 76
     6e4:	95 e0       	ldi	r25, 0x05	; 5
     6e6:	40 e8       	ldi	r20, 0x80	; 128
     6e8:	55 e2       	ldi	r21, 0x25	; 37
     6ea:	60 e0       	ldi	r22, 0x00	; 0
     6ec:	70 e0       	ldi	r23, 0x00	; 0
     6ee:	0e 94 8c 06 	call	0xd18	; 0xd18 <_ZN14HardwareSerial5beginEm>
     6f2:	80 91 f7 02 	lds	r24, 0x02F7
     6f6:	60 e0       	ldi	r22, 0x00	; 0
     6f8:	0e 94 1c 05 	call	0xa38	; 0xa38 <pinMode>
     6fc:	80 91 f5 02 	lds	r24, 0x02F5
     700:	60 e0       	ldi	r22, 0x00	; 0
     702:	0e 94 1c 05 	call	0xa38	; 0xa38 <pinMode>
     706:	80 91 f3 02 	lds	r24, 0x02F3
     70a:	60 e0       	ldi	r22, 0x00	; 0
     70c:	0e 94 1c 05 	call	0xa38	; 0xa38 <pinMode>
     710:	80 91 e9 02 	lds	r24, 0x02E9
     714:	60 e0       	ldi	r22, 0x00	; 0
     716:	0e 94 1c 05 	call	0xa38	; 0xa38 <pinMode>
     71a:	80 91 f1 02 	lds	r24, 0x02F1
     71e:	61 e0       	ldi	r22, 0x01	; 1
     720:	0e 94 1c 05 	call	0xa38	; 0xa38 <pinMode>
     724:	80 91 ef 02 	lds	r24, 0x02EF
     728:	61 e0       	ldi	r22, 0x01	; 1
     72a:	0e 94 1c 05 	call	0xa38	; 0xa38 <pinMode>
     72e:	80 91 ed 02 	lds	r24, 0x02ED
     732:	61 e0       	ldi	r22, 0x01	; 1
     734:	0e 94 1c 05 	call	0xa38	; 0xa38 <pinMode>
     738:	80 91 eb 02 	lds	r24, 0x02EB
     73c:	61 e0       	ldi	r22, 0x01	; 1
     73e:	0e 94 1c 05 	call	0xa38	; 0xa38 <pinMode>
     742:	80 91 e7 02 	lds	r24, 0x02E7
     746:	61 e0       	ldi	r22, 0x01	; 1
     748:	0e 94 1c 05 	call	0xa38	; 0xa38 <pinMode>
     74c:	08 95       	ret

0000074e <loop>:
     74e:	80 91 f7 02 	lds	r24, 0x02F7
     752:	0e 94 af 05 	call	0xb5e	; 0xb5e <digitalRead>
     756:	80 93 ba 04 	sts	0x04BA, r24
     75a:	80 91 f5 02 	lds	r24, 0x02F5
     75e:	0e 94 af 05 	call	0xb5e	; 0xb5e <digitalRead>
     762:	80 93 b9 04 	sts	0x04B9, r24
     766:	80 91 f3 02 	lds	r24, 0x02F3
     76a:	0e 94 af 05 	call	0xb5e	; 0xb5e <digitalRead>
     76e:	80 93 b8 04 	sts	0x04B8, r24
     772:	80 91 e9 02 	lds	r24, 0x02E9
     776:	0e 94 af 05 	call	0xb5e	; 0xb5e <digitalRead>
     77a:	80 93 b3 04 	sts	0x04B3, r24
     77e:	21 e0       	ldi	r18, 0x01	; 1
     780:	30 e0       	ldi	r19, 0x00	; 0
     782:	80 91 b1 04 	lds	r24, 0x04B1
     786:	88 23       	and	r24, r24
     788:	11 f0       	breq	.+4      	; 0x78e <loop+0x40>
     78a:	20 e0       	ldi	r18, 0x00	; 0
     78c:	30 e0       	ldi	r19, 0x00	; 0
     78e:	80 91 ba 04 	lds	r24, 0x04BA
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 23       	and	r24, r18
     796:	93 23       	and	r25, r19
     798:	00 97       	sbiw	r24, 0x00	; 0
     79a:	51 f0       	breq	.+20     	; 0x7b0 <loop+0x62>
     79c:	10 92 ad 04 	sts	0x04AD, r1
     7a0:	60 91 e9 02 	lds	r22, 0x02E9
     7a4:	70 91 ea 02 	lds	r23, 0x02EA
     7a8:	88 e1       	ldi	r24, 0x18	; 24
     7aa:	93 e0       	ldi	r25, 0x03	; 3
     7ac:	0e 94 4e 03 	call	0x69c	; 0x69c <_ZN2IR5teachEi>
     7b0:	80 91 ba 04 	lds	r24, 0x04BA
     7b4:	80 93 b1 04 	sts	0x04B1, r24
     7b8:	21 e0       	ldi	r18, 0x01	; 1
     7ba:	30 e0       	ldi	r19, 0x00	; 0
     7bc:	80 91 b0 04 	lds	r24, 0x04B0
     7c0:	88 23       	and	r24, r24
     7c2:	11 f0       	breq	.+4      	; 0x7c8 <loop+0x7a>
     7c4:	20 e0       	ldi	r18, 0x00	; 0
     7c6:	30 e0       	ldi	r19, 0x00	; 0
     7c8:	80 91 b9 04 	lds	r24, 0x04B9
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	82 23       	and	r24, r18
     7d0:	93 23       	and	r25, r19
     7d2:	00 97       	sbiw	r24, 0x00	; 0
     7d4:	41 f0       	breq	.+16     	; 0x7e6 <loop+0x98>
     7d6:	60 91 e7 02 	lds	r22, 0x02E7
     7da:	70 91 e8 02 	lds	r23, 0x02E8
     7de:	88 e1       	ldi	r24, 0x18	; 24
     7e0:	93 e0       	ldi	r25, 0x03	; 3
     7e2:	0e 94 ca 01 	call	0x394	; 0x394 <_ZN2IR4playEi>
     7e6:	80 91 b9 04 	lds	r24, 0x04B9
     7ea:	80 93 b0 04 	sts	0x04B0, r24
     7ee:	21 e0       	ldi	r18, 0x01	; 1
     7f0:	30 e0       	ldi	r19, 0x00	; 0
     7f2:	80 91 af 04 	lds	r24, 0x04AF
     7f6:	88 23       	and	r24, r24
     7f8:	11 f0       	breq	.+4      	; 0x7fe <loop+0xb0>
     7fa:	20 e0       	ldi	r18, 0x00	; 0
     7fc:	30 e0       	ldi	r19, 0x00	; 0
     7fe:	80 91 b8 04 	lds	r24, 0x04B8
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	82 23       	and	r24, r18
     806:	93 23       	and	r25, r19
     808:	00 97       	sbiw	r24, 0x00	; 0
     80a:	21 f0       	breq	.+8      	; 0x814 <loop+0xc6>
     80c:	88 e1       	ldi	r24, 0x18	; 24
     80e:	93 e0       	ldi	r25, 0x03	; 3
     810:	0e 94 0f 02 	call	0x41e	; 0x41e <_ZN2IR11printIRCodeEv>
     814:	90 91 b8 04 	lds	r25, 0x04B8
     818:	90 93 af 04 	sts	0x04AF, r25
     81c:	80 91 b9 04 	lds	r24, 0x04B9
     820:	89 23       	and	r24, r25
     822:	21 f0       	breq	.+8      	; 0x82c <loop+0xde>
     824:	88 e1       	ldi	r24, 0x18	; 24
     826:	93 e0       	ldi	r25, 0x03	; 3
     828:	0e 94 0f 02 	call	0x41e	; 0x41e <_ZN2IR11printIRCodeEv>
     82c:	80 91 f1 02 	lds	r24, 0x02F1
     830:	60 91 b7 04 	lds	r22, 0x04B7
     834:	0e 94 5b 05 	call	0xab6	; 0xab6 <digitalWrite>
     838:	80 91 ef 02 	lds	r24, 0x02EF
     83c:	60 91 b6 04 	lds	r22, 0x04B6
     840:	0e 94 5b 05 	call	0xab6	; 0xab6 <digitalWrite>
     844:	80 91 ed 02 	lds	r24, 0x02ED
     848:	60 91 b5 04 	lds	r22, 0x04B5
     84c:	0e 94 5b 05 	call	0xab6	; 0xab6 <digitalWrite>
     850:	80 91 eb 02 	lds	r24, 0x02EB
     854:	60 91 b4 04 	lds	r22, 0x04B4
     858:	0e 94 5b 05 	call	0xab6	; 0xab6 <digitalWrite>
     85c:	08 95       	ret

0000085e <_GLOBAL__sub_I_btn1Pin>:
     85e:	88 e1       	ldi	r24, 0x18	; 24
     860:	93 e0       	ldi	r25, 0x03	; 3
     862:	66 e2       	ldi	r22, 0x26	; 38
     864:	70 e0       	ldi	r23, 0x00	; 0
     866:	0e 94 5e 01 	call	0x2bc	; 0x2bc <_ZN2IRC1Ei>
     86a:	08 95       	ret

0000086c <__vector_16>:
#endif

	SREG = oldSREG;
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}
     86c:	1f 92       	push	r1
     86e:	0f 92       	push	r0
     870:	0f b6       	in	r0, 0x3f	; 63
     872:	0f 92       	push	r0
     874:	11 24       	eor	r1, r1
     876:	2f 93       	push	r18
     878:	3f 93       	push	r19
     87a:	8f 93       	push	r24
     87c:	9f 93       	push	r25
     87e:	af 93       	push	r26
     880:	bf 93       	push	r27
     882:	80 91 bf 04 	lds	r24, 0x04BF
     886:	90 91 c0 04 	lds	r25, 0x04C0
     88a:	a0 91 c1 04 	lds	r26, 0x04C1
     88e:	b0 91 c2 04 	lds	r27, 0x04C2
     892:	30 91 c3 04 	lds	r19, 0x04C3
     896:	01 96       	adiw	r24, 0x01	; 1
     898:	a1 1d       	adc	r26, r1
     89a:	b1 1d       	adc	r27, r1
     89c:	23 2f       	mov	r18, r19
     89e:	2d 5f       	subi	r18, 0xFD	; 253
     8a0:	2d 37       	cpi	r18, 0x7D	; 125
     8a2:	20 f0       	brcs	.+8      	; 0x8ac <__vector_16+0x40>
     8a4:	2d 57       	subi	r18, 0x7D	; 125
     8a6:	01 96       	adiw	r24, 0x01	; 1
     8a8:	a1 1d       	adc	r26, r1
     8aa:	b1 1d       	adc	r27, r1
     8ac:	20 93 c3 04 	sts	0x04C3, r18
     8b0:	80 93 bf 04 	sts	0x04BF, r24
     8b4:	90 93 c0 04 	sts	0x04C0, r25
     8b8:	a0 93 c1 04 	sts	0x04C1, r26
     8bc:	b0 93 c2 04 	sts	0x04C2, r27
     8c0:	80 91 bb 04 	lds	r24, 0x04BB
     8c4:	90 91 bc 04 	lds	r25, 0x04BC
     8c8:	a0 91 bd 04 	lds	r26, 0x04BD
     8cc:	b0 91 be 04 	lds	r27, 0x04BE
     8d0:	01 96       	adiw	r24, 0x01	; 1
     8d2:	a1 1d       	adc	r26, r1
     8d4:	b1 1d       	adc	r27, r1
     8d6:	80 93 bb 04 	sts	0x04BB, r24
     8da:	90 93 bc 04 	sts	0x04BC, r25
     8de:	a0 93 bd 04 	sts	0x04BD, r26
     8e2:	b0 93 be 04 	sts	0x04BE, r27
     8e6:	bf 91       	pop	r27
     8e8:	af 91       	pop	r26
     8ea:	9f 91       	pop	r25
     8ec:	8f 91       	pop	r24
     8ee:	3f 91       	pop	r19
     8f0:	2f 91       	pop	r18
     8f2:	0f 90       	pop	r0
     8f4:	0f be       	out	0x3f, r0	; 63
     8f6:	0f 90       	pop	r0
     8f8:	1f 90       	pop	r1
     8fa:	18 95       	reti

000008fc <delay>:

void delay(unsigned long ms)
{
     8fc:	9b 01       	movw	r18, r22
     8fe:	ac 01       	movw	r20, r24
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
     900:	7f b7       	in	r23, 0x3f	; 63
	
	cli();
     902:	f8 94       	cli
	m = timer0_overflow_count;
     904:	80 91 bb 04 	lds	r24, 0x04BB
     908:	90 91 bc 04 	lds	r25, 0x04BC
     90c:	a0 91 bd 04 	lds	r26, 0x04BD
     910:	b0 91 be 04 	lds	r27, 0x04BE
#if defined(TCNT0)
	t = TCNT0;
     914:	66 b5       	in	r22, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
     916:	a8 9b       	sbis	0x15, 0	; 21
     918:	05 c0       	rjmp	.+10     	; 0x924 <__stack+0x25>
     91a:	6f 3f       	cpi	r22, 0xFF	; 255
     91c:	19 f0       	breq	.+6      	; 0x924 <__stack+0x25>
		m++;
     91e:	01 96       	adiw	r24, 0x01	; 1
     920:	a1 1d       	adc	r26, r1
     922:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
     924:	7f bf       	out	0x3f, r23	; 63
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();
     926:	ba 2f       	mov	r27, r26
     928:	a9 2f       	mov	r26, r25
     92a:	98 2f       	mov	r25, r24
     92c:	88 27       	eor	r24, r24
     92e:	86 0f       	add	r24, r22
     930:	91 1d       	adc	r25, r1
     932:	a1 1d       	adc	r26, r1
     934:	b1 1d       	adc	r27, r1
     936:	62 e0       	ldi	r22, 0x02	; 2
     938:	88 0f       	add	r24, r24
     93a:	99 1f       	adc	r25, r25
     93c:	aa 1f       	adc	r26, r26
     93e:	bb 1f       	adc	r27, r27
     940:	6a 95       	dec	r22
     942:	d1 f7       	brne	.-12     	; 0x938 <__stack+0x39>
     944:	bc 01       	movw	r22, r24
     946:	2d c0       	rjmp	.+90     	; 0x9a2 <__stack+0xa3>
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
     948:	ff b7       	in	r31, 0x3f	; 63
	
	cli();
     94a:	f8 94       	cli
	m = timer0_overflow_count;
     94c:	80 91 bb 04 	lds	r24, 0x04BB
     950:	90 91 bc 04 	lds	r25, 0x04BC
     954:	a0 91 bd 04 	lds	r26, 0x04BD
     958:	b0 91 be 04 	lds	r27, 0x04BE
#if defined(TCNT0)
	t = TCNT0;
     95c:	e6 b5       	in	r30, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
     95e:	a8 9b       	sbis	0x15, 0	; 21
     960:	05 c0       	rjmp	.+10     	; 0x96c <__stack+0x6d>
     962:	ef 3f       	cpi	r30, 0xFF	; 255
     964:	19 f0       	breq	.+6      	; 0x96c <__stack+0x6d>
		m++;
     966:	01 96       	adiw	r24, 0x01	; 1
     968:	a1 1d       	adc	r26, r1
     96a:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
     96c:	ff bf       	out	0x3f, r31	; 63
void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
		if (((uint16_t)micros() - start) >= 1000) {
     96e:	ba 2f       	mov	r27, r26
     970:	a9 2f       	mov	r26, r25
     972:	98 2f       	mov	r25, r24
     974:	88 27       	eor	r24, r24
     976:	8e 0f       	add	r24, r30
     978:	91 1d       	adc	r25, r1
     97a:	a1 1d       	adc	r26, r1
     97c:	b1 1d       	adc	r27, r1
     97e:	e2 e0       	ldi	r30, 0x02	; 2
     980:	88 0f       	add	r24, r24
     982:	99 1f       	adc	r25, r25
     984:	aa 1f       	adc	r26, r26
     986:	bb 1f       	adc	r27, r27
     988:	ea 95       	dec	r30
     98a:	d1 f7       	brne	.-12     	; 0x980 <__stack+0x81>
     98c:	86 1b       	sub	r24, r22
     98e:	97 0b       	sbc	r25, r23
     990:	88 5e       	subi	r24, 0xE8	; 232
     992:	93 40       	sbci	r25, 0x03	; 3
     994:	c8 f2       	brcs	.-78     	; 0x948 <__stack+0x49>
			ms--;
     996:	21 50       	subi	r18, 0x01	; 1
     998:	30 40       	sbci	r19, 0x00	; 0
     99a:	40 40       	sbci	r20, 0x00	; 0
     99c:	50 40       	sbci	r21, 0x00	; 0
			start += 1000;
     99e:	68 51       	subi	r22, 0x18	; 24
     9a0:	7c 4f       	sbci	r23, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
     9a2:	21 15       	cp	r18, r1
     9a4:	31 05       	cpc	r19, r1
     9a6:	41 05       	cpc	r20, r1
     9a8:	51 05       	cpc	r21, r1
     9aa:	71 f6       	brne	.-100    	; 0x948 <__stack+0x49>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
     9ac:	08 95       	ret

000009ae <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call yields a delay of approximately 1 1/8 us.
	if (--us == 0)
     9ae:	01 97       	sbiw	r24, 0x01	; 1
     9b0:	39 f0       	breq	.+14     	; 0x9c0 <delayMicroseconds+0x12>
		return;

	// the following loop takes a quarter of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2;
     9b2:	88 0f       	add	r24, r24
     9b4:	99 1f       	adc	r25, r25
     9b6:	88 0f       	add	r24, r24
     9b8:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	us -= 2;
     9ba:	02 97       	sbiw	r24, 0x02	; 2
	// we can't subtract any more than this or we'd overflow w/ small delays.
	us--;
#endif

	// busy wait
	__asm__ __volatile__ (
     9bc:	01 97       	sbiw	r24, 0x01	; 1
     9be:	f1 f7       	brne	.-4      	; 0x9bc <delayMicroseconds+0xe>
     9c0:	08 95       	ret

000009c2 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     9c2:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     9c4:	84 b5       	in	r24, 0x24	; 36
     9c6:	82 60       	ori	r24, 0x02	; 2
     9c8:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     9ca:	84 b5       	in	r24, 0x24	; 36
     9cc:	81 60       	ori	r24, 0x01	; 1
     9ce:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     9d0:	85 b5       	in	r24, 0x25	; 37
     9d2:	82 60       	ori	r24, 0x02	; 2
     9d4:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     9d6:	85 b5       	in	r24, 0x25	; 37
     9d8:	81 60       	ori	r24, 0x01	; 1
     9da:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     9dc:	ee e6       	ldi	r30, 0x6E	; 110
     9de:	f0 e0       	ldi	r31, 0x00	; 0
     9e0:	80 81       	ld	r24, Z
     9e2:	81 60       	ori	r24, 0x01	; 1
     9e4:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     9e6:	e1 e8       	ldi	r30, 0x81	; 129
     9e8:	f0 e0       	ldi	r31, 0x00	; 0
     9ea:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     9ec:	80 81       	ld	r24, Z
     9ee:	82 60       	ori	r24, 0x02	; 2
     9f0:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     9f2:	80 81       	ld	r24, Z
     9f4:	81 60       	ori	r24, 0x01	; 1
     9f6:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     9f8:	e0 e8       	ldi	r30, 0x80	; 128
     9fa:	f0 e0       	ldi	r31, 0x00	; 0
     9fc:	80 81       	ld	r24, Z
     9fe:	81 60       	ori	r24, 0x01	; 1
     a00:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     a02:	e1 eb       	ldi	r30, 0xB1	; 177
     a04:	f0 e0       	ldi	r31, 0x00	; 0
     a06:	80 81       	ld	r24, Z
     a08:	84 60       	ori	r24, 0x04	; 4
     a0a:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     a0c:	e0 eb       	ldi	r30, 0xB0	; 176
     a0e:	f0 e0       	ldi	r31, 0x00	; 0
     a10:	80 81       	ld	r24, Z
     a12:	81 60       	ori	r24, 0x01	; 1
     a14:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
     a16:	ea e7       	ldi	r30, 0x7A	; 122
     a18:	f0 e0       	ldi	r31, 0x00	; 0
     a1a:	80 81       	ld	r24, Z
     a1c:	84 60       	ori	r24, 0x04	; 4
     a1e:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
     a20:	80 81       	ld	r24, Z
     a22:	82 60       	ori	r24, 0x02	; 2
     a24:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
     a26:	80 81       	ld	r24, Z
     a28:	81 60       	ori	r24, 0x01	; 1
     a2a:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     a2c:	80 81       	ld	r24, Z
     a2e:	80 68       	ori	r24, 0x80	; 128
     a30:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     a32:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
     a36:	08 95       	ret

00000a38 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     a38:	cf 93       	push	r28
     a3a:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
     a3c:	48 2f       	mov	r20, r24
     a3e:	50 e0       	ldi	r21, 0x00	; 0
     a40:	ca 01       	movw	r24, r20
     a42:	86 56       	subi	r24, 0x66	; 102
     a44:	9f 4f       	sbci	r25, 0xFF	; 255
     a46:	fc 01       	movw	r30, r24
     a48:	34 91       	lpm	r19, Z
	uint8_t port = digitalPinToPort(pin);
     a4a:	4a 57       	subi	r20, 0x7A	; 122
     a4c:	5f 4f       	sbci	r21, 0xFF	; 255
     a4e:	fa 01       	movw	r30, r20
     a50:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
     a52:	88 23       	and	r24, r24
     a54:	69 f1       	breq	.+90     	; 0xab0 <pinMode+0x78>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
     a56:	90 e0       	ldi	r25, 0x00	; 0
     a58:	88 0f       	add	r24, r24
     a5a:	99 1f       	adc	r25, r25
     a5c:	fc 01       	movw	r30, r24
     a5e:	e8 59       	subi	r30, 0x98	; 152
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	a5 91       	lpm	r26, Z+
     a64:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
     a66:	fc 01       	movw	r30, r24
     a68:	ee 58       	subi	r30, 0x8E	; 142
     a6a:	ff 4f       	sbci	r31, 0xFF	; 255
     a6c:	c5 91       	lpm	r28, Z+
     a6e:	d4 91       	lpm	r29, Z

	if (mode == INPUT) { 
     a70:	66 23       	and	r22, r22
     a72:	51 f4       	brne	.+20     	; 0xa88 <pinMode+0x50>
		uint8_t oldSREG = SREG;
     a74:	2f b7       	in	r18, 0x3f	; 63
                cli();
     a76:	f8 94       	cli
		*reg &= ~bit;
     a78:	8c 91       	ld	r24, X
     a7a:	93 2f       	mov	r25, r19
     a7c:	90 95       	com	r25
     a7e:	89 23       	and	r24, r25
     a80:	8c 93       	st	X, r24
		*out &= ~bit;
     a82:	88 81       	ld	r24, Y
     a84:	89 23       	and	r24, r25
     a86:	0b c0       	rjmp	.+22     	; 0xa9e <pinMode+0x66>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
     a88:	62 30       	cpi	r22, 0x02	; 2
     a8a:	61 f4       	brne	.+24     	; 0xaa4 <pinMode+0x6c>
		uint8_t oldSREG = SREG;
     a8c:	2f b7       	in	r18, 0x3f	; 63
                cli();
     a8e:	f8 94       	cli
		*reg &= ~bit;
     a90:	8c 91       	ld	r24, X
     a92:	93 2f       	mov	r25, r19
     a94:	90 95       	com	r25
     a96:	89 23       	and	r24, r25
     a98:	8c 93       	st	X, r24
		*out |= bit;
     a9a:	88 81       	ld	r24, Y
     a9c:	83 2b       	or	r24, r19
     a9e:	88 83       	st	Y, r24
		SREG = oldSREG;
     aa0:	2f bf       	out	0x3f, r18	; 63
     aa2:	06 c0       	rjmp	.+12     	; 0xab0 <pinMode+0x78>
	} else {
		uint8_t oldSREG = SREG;
     aa4:	9f b7       	in	r25, 0x3f	; 63
                cli();
     aa6:	f8 94       	cli
		*reg |= bit;
     aa8:	8c 91       	ld	r24, X
     aaa:	83 2b       	or	r24, r19
     aac:	8c 93       	st	X, r24
		SREG = oldSREG;
     aae:	9f bf       	out	0x3f, r25	; 63
	}
}
     ab0:	df 91       	pop	r29
     ab2:	cf 91       	pop	r28
     ab4:	08 95       	ret

00000ab6 <digitalWrite>:
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t timer = digitalPinToTimer(pin);
     ab6:	48 2f       	mov	r20, r24
     ab8:	50 e0       	ldi	r21, 0x00	; 0
     aba:	ca 01       	movw	r24, r20
     abc:	82 55       	subi	r24, 0x52	; 82
     abe:	9f 4f       	sbci	r25, 0xFF	; 255
     ac0:	fc 01       	movw	r30, r24
     ac2:	24 91       	lpm	r18, Z
	uint8_t bit = digitalPinToBitMask(pin);
     ac4:	ca 01       	movw	r24, r20
     ac6:	86 56       	subi	r24, 0x66	; 102
     ac8:	9f 4f       	sbci	r25, 0xFF	; 255
     aca:	fc 01       	movw	r30, r24
     acc:	94 91       	lpm	r25, Z
	uint8_t port = digitalPinToPort(pin);
     ace:	4a 57       	subi	r20, 0x7A	; 122
     ad0:	5f 4f       	sbci	r21, 0xFF	; 255
     ad2:	fa 01       	movw	r30, r20
     ad4:	34 91       	lpm	r19, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
     ad6:	33 23       	and	r19, r19
     ad8:	09 f4       	brne	.+2      	; 0xadc <digitalWrite+0x26>
     ada:	40 c0       	rjmp	.+128    	; 0xb5c <digitalWrite+0xa6>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     adc:	22 23       	and	r18, r18
     ade:	51 f1       	breq	.+84     	; 0xb34 <digitalWrite+0x7e>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     ae0:	23 30       	cpi	r18, 0x03	; 3
     ae2:	71 f0       	breq	.+28     	; 0xb00 <digitalWrite+0x4a>
     ae4:	24 30       	cpi	r18, 0x04	; 4
     ae6:	28 f4       	brcc	.+10     	; 0xaf2 <digitalWrite+0x3c>
     ae8:	21 30       	cpi	r18, 0x01	; 1
     aea:	a1 f0       	breq	.+40     	; 0xb14 <digitalWrite+0x5e>
     aec:	22 30       	cpi	r18, 0x02	; 2
     aee:	11 f5       	brne	.+68     	; 0xb34 <digitalWrite+0x7e>
     af0:	14 c0       	rjmp	.+40     	; 0xb1a <digitalWrite+0x64>
     af2:	26 30       	cpi	r18, 0x06	; 6
     af4:	b1 f0       	breq	.+44     	; 0xb22 <digitalWrite+0x6c>
     af6:	27 30       	cpi	r18, 0x07	; 7
     af8:	c1 f0       	breq	.+48     	; 0xb2a <digitalWrite+0x74>
     afa:	24 30       	cpi	r18, 0x04	; 4
     afc:	d9 f4       	brne	.+54     	; 0xb34 <digitalWrite+0x7e>
     afe:	04 c0       	rjmp	.+8      	; 0xb08 <digitalWrite+0x52>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
     b00:	80 91 80 00 	lds	r24, 0x0080
     b04:	8f 77       	andi	r24, 0x7F	; 127
     b06:	03 c0       	rjmp	.+6      	; 0xb0e <digitalWrite+0x58>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     b08:	80 91 80 00 	lds	r24, 0x0080
     b0c:	8f 7d       	andi	r24, 0xDF	; 223
     b0e:	80 93 80 00 	sts	0x0080, r24
     b12:	10 c0       	rjmp	.+32     	; 0xb34 <digitalWrite+0x7e>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
     b14:	84 b5       	in	r24, 0x24	; 36
     b16:	8f 77       	andi	r24, 0x7F	; 127
     b18:	02 c0       	rjmp	.+4      	; 0xb1e <digitalWrite+0x68>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
     b1a:	84 b5       	in	r24, 0x24	; 36
     b1c:	8f 7d       	andi	r24, 0xDF	; 223
     b1e:	84 bd       	out	0x24, r24	; 36
     b20:	09 c0       	rjmp	.+18     	; 0xb34 <digitalWrite+0x7e>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
     b22:	80 91 b0 00 	lds	r24, 0x00B0
     b26:	8f 77       	andi	r24, 0x7F	; 127
     b28:	03 c0       	rjmp	.+6      	; 0xb30 <digitalWrite+0x7a>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     b2a:	80 91 b0 00 	lds	r24, 0x00B0
     b2e:	8f 7d       	andi	r24, 0xDF	; 223
     b30:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
     b34:	e3 2f       	mov	r30, r19
     b36:	f0 e0       	ldi	r31, 0x00	; 0
     b38:	ee 0f       	add	r30, r30
     b3a:	ff 1f       	adc	r31, r31
     b3c:	ee 58       	subi	r30, 0x8E	; 142
     b3e:	ff 4f       	sbci	r31, 0xFF	; 255
     b40:	a5 91       	lpm	r26, Z+
     b42:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
     b44:	2f b7       	in	r18, 0x3f	; 63
	cli();
     b46:	f8 94       	cli

	if (val == LOW) {
     b48:	66 23       	and	r22, r22
     b4a:	21 f4       	brne	.+8      	; 0xb54 <digitalWrite+0x9e>
		*out &= ~bit;
     b4c:	8c 91       	ld	r24, X
     b4e:	90 95       	com	r25
     b50:	89 23       	and	r24, r25
     b52:	02 c0       	rjmp	.+4      	; 0xb58 <digitalWrite+0xa2>
	} else {
		*out |= bit;
     b54:	8c 91       	ld	r24, X
     b56:	89 2b       	or	r24, r25
     b58:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
     b5a:	2f bf       	out	0x3f, r18	; 63
     b5c:	08 95       	ret

00000b5e <digitalRead>:
}

int digitalRead(uint8_t pin)
{
	uint8_t timer = digitalPinToTimer(pin);
     b5e:	68 2f       	mov	r22, r24
     b60:	70 e0       	ldi	r23, 0x00	; 0
     b62:	cb 01       	movw	r24, r22
     b64:	82 55       	subi	r24, 0x52	; 82
     b66:	9f 4f       	sbci	r25, 0xFF	; 255
     b68:	fc 01       	movw	r30, r24
     b6a:	24 91       	lpm	r18, Z
	uint8_t bit = digitalPinToBitMask(pin);
     b6c:	cb 01       	movw	r24, r22
     b6e:	86 56       	subi	r24, 0x66	; 102
     b70:	9f 4f       	sbci	r25, 0xFF	; 255
     b72:	fc 01       	movw	r30, r24
     b74:	44 91       	lpm	r20, Z
	uint8_t port = digitalPinToPort(pin);
     b76:	6a 57       	subi	r22, 0x7A	; 122
     b78:	7f 4f       	sbci	r23, 0xFF	; 255
     b7a:	fb 01       	movw	r30, r22
     b7c:	94 91       	lpm	r25, Z

	if (port == NOT_A_PIN) return LOW;
     b7e:	99 23       	and	r25, r25
     b80:	19 f4       	brne	.+6      	; 0xb88 <digitalRead+0x2a>
     b82:	20 e0       	ldi	r18, 0x00	; 0
     b84:	30 e0       	ldi	r19, 0x00	; 0
     b86:	3c c0       	rjmp	.+120    	; 0xc00 <digitalRead+0xa2>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     b88:	22 23       	and	r18, r18
     b8a:	51 f1       	breq	.+84     	; 0xbe0 <digitalRead+0x82>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     b8c:	23 30       	cpi	r18, 0x03	; 3
     b8e:	71 f0       	breq	.+28     	; 0xbac <digitalRead+0x4e>
     b90:	24 30       	cpi	r18, 0x04	; 4
     b92:	28 f4       	brcc	.+10     	; 0xb9e <digitalRead+0x40>
     b94:	21 30       	cpi	r18, 0x01	; 1
     b96:	a1 f0       	breq	.+40     	; 0xbc0 <digitalRead+0x62>
     b98:	22 30       	cpi	r18, 0x02	; 2
     b9a:	11 f5       	brne	.+68     	; 0xbe0 <digitalRead+0x82>
     b9c:	14 c0       	rjmp	.+40     	; 0xbc6 <digitalRead+0x68>
     b9e:	26 30       	cpi	r18, 0x06	; 6
     ba0:	b1 f0       	breq	.+44     	; 0xbce <digitalRead+0x70>
     ba2:	27 30       	cpi	r18, 0x07	; 7
     ba4:	c1 f0       	breq	.+48     	; 0xbd6 <digitalRead+0x78>
     ba6:	24 30       	cpi	r18, 0x04	; 4
     ba8:	d9 f4       	brne	.+54     	; 0xbe0 <digitalRead+0x82>
     baa:	04 c0       	rjmp	.+8      	; 0xbb4 <digitalRead+0x56>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
     bac:	80 91 80 00 	lds	r24, 0x0080
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <digitalRead+0x5c>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     bb4:	80 91 80 00 	lds	r24, 0x0080
     bb8:	8f 7d       	andi	r24, 0xDF	; 223
     bba:	80 93 80 00 	sts	0x0080, r24
     bbe:	10 c0       	rjmp	.+32     	; 0xbe0 <digitalRead+0x82>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
     bc0:	84 b5       	in	r24, 0x24	; 36
     bc2:	8f 77       	andi	r24, 0x7F	; 127
     bc4:	02 c0       	rjmp	.+4      	; 0xbca <digitalRead+0x6c>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
     bc6:	84 b5       	in	r24, 0x24	; 36
     bc8:	8f 7d       	andi	r24, 0xDF	; 223
     bca:	84 bd       	out	0x24, r24	; 36
     bcc:	09 c0       	rjmp	.+18     	; 0xbe0 <digitalRead+0x82>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
     bce:	80 91 b0 00 	lds	r24, 0x00B0
     bd2:	8f 77       	andi	r24, 0x7F	; 127
     bd4:	03 c0       	rjmp	.+6      	; 0xbdc <digitalRead+0x7e>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     bd6:	80 91 b0 00 	lds	r24, 0x00B0
     bda:	8f 7d       	andi	r24, 0xDF	; 223
     bdc:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
     be0:	89 2f       	mov	r24, r25
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	88 0f       	add	r24, r24
     be6:	99 1f       	adc	r25, r25
     be8:	84 58       	subi	r24, 0x84	; 132
     bea:	9f 4f       	sbci	r25, 0xFF	; 255
     bec:	fc 01       	movw	r30, r24
     bee:	a5 91       	lpm	r26, Z+
     bf0:	b4 91       	lpm	r27, Z
     bf2:	8c 91       	ld	r24, X
     bf4:	20 e0       	ldi	r18, 0x00	; 0
     bf6:	30 e0       	ldi	r19, 0x00	; 0
     bf8:	84 23       	and	r24, r20
     bfa:	11 f0       	breq	.+4      	; 0xc00 <digitalRead+0xa2>
     bfc:	21 e0       	ldi	r18, 0x01	; 1
     bfe:	30 e0       	ldi	r19, 0x00	; 0
	return LOW;
}
     c00:	c9 01       	movw	r24, r18
     c02:	08 95       	ret

00000c04 <_Z11serialEventv>:
  return 1;
}

HardwareSerial::operator bool() {
	return true;
}
     c04:	08 95       	ret

00000c06 <__vector_18>:
     c06:	1f 92       	push	r1
     c08:	0f 92       	push	r0
     c0a:	0f b6       	in	r0, 0x3f	; 63
     c0c:	0f 92       	push	r0
     c0e:	11 24       	eor	r1, r1
     c10:	2f 93       	push	r18
     c12:	3f 93       	push	r19
     c14:	4f 93       	push	r20
     c16:	8f 93       	push	r24
     c18:	9f 93       	push	r25
     c1a:	ef 93       	push	r30
     c1c:	ff 93       	push	r31
     c1e:	80 91 c0 00 	lds	r24, 0x00C0
     c22:	82 fd       	sbrc	r24, 2
     c24:	1d c0       	rjmp	.+58     	; 0xc60 <__vector_18+0x5a>
     c26:	40 91 c6 00 	lds	r20, 0x00C6
     c2a:	20 91 04 05 	lds	r18, 0x0504
     c2e:	30 91 05 05 	lds	r19, 0x0505
     c32:	2f 5f       	subi	r18, 0xFF	; 255
     c34:	3f 4f       	sbci	r19, 0xFF	; 255
     c36:	2f 73       	andi	r18, 0x3F	; 63
     c38:	30 70       	andi	r19, 0x00	; 0
     c3a:	80 91 06 05 	lds	r24, 0x0506
     c3e:	90 91 07 05 	lds	r25, 0x0507
     c42:	28 17       	cp	r18, r24
     c44:	39 07       	cpc	r19, r25
     c46:	71 f0       	breq	.+28     	; 0xc64 <__vector_18+0x5e>
     c48:	e0 91 04 05 	lds	r30, 0x0504
     c4c:	f0 91 05 05 	lds	r31, 0x0505
     c50:	ec 53       	subi	r30, 0x3C	; 60
     c52:	fb 4f       	sbci	r31, 0xFB	; 251
     c54:	40 83       	st	Z, r20
     c56:	30 93 05 05 	sts	0x0505, r19
     c5a:	20 93 04 05 	sts	0x0504, r18
     c5e:	02 c0       	rjmp	.+4      	; 0xc64 <__vector_18+0x5e>
     c60:	80 91 c6 00 	lds	r24, 0x00C6
     c64:	ff 91       	pop	r31
     c66:	ef 91       	pop	r30
     c68:	9f 91       	pop	r25
     c6a:	8f 91       	pop	r24
     c6c:	4f 91       	pop	r20
     c6e:	3f 91       	pop	r19
     c70:	2f 91       	pop	r18
     c72:	0f 90       	pop	r0
     c74:	0f be       	out	0x3f, r0	; 63
     c76:	0f 90       	pop	r0
     c78:	1f 90       	pop	r1
     c7a:	18 95       	reti

00000c7c <_Z14serialEventRunv>:
     c7c:	e0 91 58 05 	lds	r30, 0x0558
     c80:	f0 91 59 05 	lds	r31, 0x0559
     c84:	e0 5c       	subi	r30, 0xC0	; 192
     c86:	ff 4f       	sbci	r31, 0xFF	; 255
     c88:	81 91       	ld	r24, Z+
     c8a:	91 91       	ld	r25, Z+
     c8c:	20 81       	ld	r18, Z
     c8e:	31 81       	ldd	r19, Z+1	; 0x01
     c90:	82 1b       	sub	r24, r18
     c92:	93 0b       	sbc	r25, r19
     c94:	8f 73       	andi	r24, 0x3F	; 63
     c96:	90 70       	andi	r25, 0x00	; 0
     c98:	89 2b       	or	r24, r25
     c9a:	11 f0       	breq	.+4      	; 0xca0 <_Z14serialEventRunv+0x24>
     c9c:	0e 94 02 06 	call	0xc04	; 0xc04 <_Z11serialEventv>
     ca0:	08 95       	ret

00000ca2 <__vector_19>:
     ca2:	1f 92       	push	r1
     ca4:	0f 92       	push	r0
     ca6:	0f b6       	in	r0, 0x3f	; 63
     ca8:	0f 92       	push	r0
     caa:	11 24       	eor	r1, r1
     cac:	2f 93       	push	r18
     cae:	3f 93       	push	r19
     cb0:	8f 93       	push	r24
     cb2:	9f 93       	push	r25
     cb4:	ef 93       	push	r30
     cb6:	ff 93       	push	r31
     cb8:	20 91 48 05 	lds	r18, 0x0548
     cbc:	30 91 49 05 	lds	r19, 0x0549
     cc0:	80 91 4a 05 	lds	r24, 0x054A
     cc4:	90 91 4b 05 	lds	r25, 0x054B
     cc8:	28 17       	cp	r18, r24
     cca:	39 07       	cpc	r19, r25
     ccc:	31 f4       	brne	.+12     	; 0xcda <__vector_19+0x38>
     cce:	80 91 c1 00 	lds	r24, 0x00C1
     cd2:	8f 7d       	andi	r24, 0xDF	; 223
     cd4:	80 93 c1 00 	sts	0x00C1, r24
     cd8:	14 c0       	rjmp	.+40     	; 0xd02 <__vector_19+0x60>
     cda:	e0 91 4a 05 	lds	r30, 0x054A
     cde:	f0 91 4b 05 	lds	r31, 0x054B
     ce2:	e8 5f       	subi	r30, 0xF8	; 248
     ce4:	fa 4f       	sbci	r31, 0xFA	; 250
     ce6:	20 81       	ld	r18, Z
     ce8:	80 91 4a 05 	lds	r24, 0x054A
     cec:	90 91 4b 05 	lds	r25, 0x054B
     cf0:	01 96       	adiw	r24, 0x01	; 1
     cf2:	8f 73       	andi	r24, 0x3F	; 63
     cf4:	90 70       	andi	r25, 0x00	; 0
     cf6:	90 93 4b 05 	sts	0x054B, r25
     cfa:	80 93 4a 05 	sts	0x054A, r24
     cfe:	20 93 c6 00 	sts	0x00C6, r18
     d02:	ff 91       	pop	r31
     d04:	ef 91       	pop	r30
     d06:	9f 91       	pop	r25
     d08:	8f 91       	pop	r24
     d0a:	3f 91       	pop	r19
     d0c:	2f 91       	pop	r18
     d0e:	0f 90       	pop	r0
     d10:	0f be       	out	0x3f, r0	; 63
     d12:	0f 90       	pop	r0
     d14:	1f 90       	pop	r1
     d16:	18 95       	reti

00000d18 <_ZN14HardwareSerial5beginEm>:
     d18:	af 92       	push	r10
     d1a:	bf 92       	push	r11
     d1c:	df 92       	push	r13
     d1e:	ef 92       	push	r14
     d20:	ff 92       	push	r15
     d22:	0f 93       	push	r16
     d24:	1f 93       	push	r17
     d26:	cf 93       	push	r28
     d28:	df 93       	push	r29
     d2a:	ec 01       	movw	r28, r24
     d2c:	7a 01       	movw	r14, r20
     d2e:	8b 01       	movw	r16, r22
     d30:	dd 24       	eor	r13, r13
     d32:	40 30       	cpi	r20, 0x00	; 0
     d34:	81 ee       	ldi	r24, 0xE1	; 225
     d36:	58 07       	cpc	r21, r24
     d38:	80 e0       	ldi	r24, 0x00	; 0
     d3a:	68 07       	cpc	r22, r24
     d3c:	80 e0       	ldi	r24, 0x00	; 0
     d3e:	78 07       	cpc	r23, r24
     d40:	11 f0       	breq	.+4      	; 0xd46 <_ZN14HardwareSerial5beginEm+0x2e>
     d42:	dd 24       	eor	r13, r13
     d44:	d3 94       	inc	r13
     d46:	91 e0       	ldi	r25, 0x01	; 1
     d48:	a9 2e       	mov	r10, r25
     d4a:	b1 2c       	mov	r11, r1
     d4c:	ec 89       	ldd	r30, Y+20	; 0x14
     d4e:	fd 89       	ldd	r31, Y+21	; 0x15
     d50:	dd 20       	and	r13, r13
     d52:	69 f0       	breq	.+26     	; 0xd6e <_ZN14HardwareSerial5beginEm+0x56>
     d54:	c5 01       	movw	r24, r10
     d56:	08 a0       	lds	r16, 0x88
     d58:	02 c0       	rjmp	.+4      	; 0xd5e <_ZN14HardwareSerial5beginEm+0x46>
     d5a:	88 0f       	add	r24, r24
     d5c:	99 1f       	adc	r25, r25
     d5e:	0a 94       	dec	r0
     d60:	e2 f7       	brpl	.-8      	; 0xd5a <_ZN14HardwareSerial5beginEm+0x42>
     d62:	80 83       	st	Z, r24
     d64:	60 e0       	ldi	r22, 0x00	; 0
     d66:	79 e0       	ldi	r23, 0x09	; 9
     d68:	8d e3       	ldi	r24, 0x3D	; 61
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	05 c0       	rjmp	.+10     	; 0xd78 <_ZN14HardwareSerial5beginEm+0x60>
     d6e:	10 82       	st	Z, r1
     d70:	60 e8       	ldi	r22, 0x80	; 128
     d72:	74 e8       	ldi	r23, 0x84	; 132
     d74:	8e e1       	ldi	r24, 0x1E	; 30
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	a8 01       	movw	r20, r16
     d7a:	97 01       	movw	r18, r14
     d7c:	0e 94 bf 09 	call	0x137e	; 0x137e <__udivmodsi4>
     d80:	21 50       	subi	r18, 0x01	; 1
     d82:	30 40       	sbci	r19, 0x00	; 0
     d84:	40 40       	sbci	r20, 0x00	; 0
     d86:	50 40       	sbci	r21, 0x00	; 0
     d88:	56 95       	lsr	r21
     d8a:	47 95       	ror	r20
     d8c:	37 95       	ror	r19
     d8e:	27 95       	ror	r18
     d90:	80 e1       	ldi	r24, 0x10	; 16
     d92:	20 30       	cpi	r18, 0x00	; 0
     d94:	38 07       	cpc	r19, r24
     d96:	20 f0       	brcs	.+8      	; 0xda0 <_ZN14HardwareSerial5beginEm+0x88>
     d98:	dd 20       	and	r13, r13
     d9a:	11 f0       	breq	.+4      	; 0xda0 <_ZN14HardwareSerial5beginEm+0x88>
     d9c:	dd 24       	eor	r13, r13
     d9e:	d6 cf       	rjmp	.-84     	; 0xd4c <_ZN14HardwareSerial5beginEm+0x34>
     da0:	e8 89       	ldd	r30, Y+16	; 0x10
     da2:	f9 89       	ldd	r31, Y+17	; 0x11
     da4:	30 83       	st	Z, r19
     da6:	ea 89       	ldd	r30, Y+18	; 0x12
     da8:	fb 89       	ldd	r31, Y+19	; 0x13
     daa:	20 83       	st	Z, r18
     dac:	19 a2       	lds	r17, 0x99
     dae:	ee 89       	ldd	r30, Y+22	; 0x16
     db0:	ff 89       	ldd	r31, Y+23	; 0x17
     db2:	40 81       	ld	r20, Z
     db4:	21 e0       	ldi	r18, 0x01	; 1
     db6:	30 e0       	ldi	r19, 0x00	; 0
     db8:	c9 01       	movw	r24, r18
     dba:	0c 8c       	ldd	r0, Y+28	; 0x1c
     dbc:	02 c0       	rjmp	.+4      	; 0xdc2 <_ZN14HardwareSerial5beginEm+0xaa>
     dbe:	88 0f       	add	r24, r24
     dc0:	99 1f       	adc	r25, r25
     dc2:	0a 94       	dec	r0
     dc4:	e2 f7       	brpl	.-8      	; 0xdbe <_ZN14HardwareSerial5beginEm+0xa6>
     dc6:	48 2b       	or	r20, r24
     dc8:	40 83       	st	Z, r20
     dca:	ee 89       	ldd	r30, Y+22	; 0x16
     dcc:	ff 89       	ldd	r31, Y+23	; 0x17
     dce:	40 81       	ld	r20, Z
     dd0:	c9 01       	movw	r24, r18
     dd2:	0d 8c       	ldd	r0, Y+29	; 0x1d
     dd4:	02 c0       	rjmp	.+4      	; 0xdda <_ZN14HardwareSerial5beginEm+0xc2>
     dd6:	88 0f       	add	r24, r24
     dd8:	99 1f       	adc	r25, r25
     dda:	0a 94       	dec	r0
     ddc:	e2 f7       	brpl	.-8      	; 0xdd6 <_ZN14HardwareSerial5beginEm+0xbe>
     dde:	48 2b       	or	r20, r24
     de0:	40 83       	st	Z, r20
     de2:	ee 89       	ldd	r30, Y+22	; 0x16
     de4:	ff 89       	ldd	r31, Y+23	; 0x17
     de6:	40 81       	ld	r20, Z
     de8:	c9 01       	movw	r24, r18
     dea:	0e 8c       	ldd	r0, Y+30	; 0x1e
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <_ZN14HardwareSerial5beginEm+0xda>
     dee:	88 0f       	add	r24, r24
     df0:	99 1f       	adc	r25, r25
     df2:	0a 94       	dec	r0
     df4:	e2 f7       	brpl	.-8      	; 0xdee <_ZN14HardwareSerial5beginEm+0xd6>
     df6:	48 2b       	or	r20, r24
     df8:	40 83       	st	Z, r20
     dfa:	ee 89       	ldd	r30, Y+22	; 0x16
     dfc:	ff 89       	ldd	r31, Y+23	; 0x17
     dfe:	80 81       	ld	r24, Z
     e00:	0f 8c       	ldd	r0, Y+31	; 0x1f
     e02:	02 c0       	rjmp	.+4      	; 0xe08 <_ZN14HardwareSerial5beginEm+0xf0>
     e04:	22 0f       	add	r18, r18
     e06:	33 1f       	adc	r19, r19
     e08:	0a 94       	dec	r0
     e0a:	e2 f7       	brpl	.-8      	; 0xe04 <_ZN14HardwareSerial5beginEm+0xec>
     e0c:	20 95       	com	r18
     e0e:	28 23       	and	r18, r24
     e10:	20 83       	st	Z, r18
     e12:	df 91       	pop	r29
     e14:	cf 91       	pop	r28
     e16:	1f 91       	pop	r17
     e18:	0f 91       	pop	r16
     e1a:	ff 90       	pop	r15
     e1c:	ef 90       	pop	r14
     e1e:	df 90       	pop	r13
     e20:	bf 90       	pop	r11
     e22:	af 90       	pop	r10
     e24:	08 95       	ret

00000e26 <_ZN14HardwareSerial9availableEv>:
     e26:	dc 01       	movw	r26, r24
     e28:	1c 96       	adiw	r26, 0x0c	; 12
     e2a:	ed 91       	ld	r30, X+
     e2c:	fc 91       	ld	r31, X
     e2e:	1d 97       	sbiw	r26, 0x0d	; 13
     e30:	e0 5c       	subi	r30, 0xC0	; 192
     e32:	ff 4f       	sbci	r31, 0xFF	; 255
     e34:	21 91       	ld	r18, Z+
     e36:	31 91       	ld	r19, Z+
     e38:	80 81       	ld	r24, Z
     e3a:	91 81       	ldd	r25, Z+1	; 0x01
     e3c:	28 1b       	sub	r18, r24
     e3e:	39 0b       	sbc	r19, r25
     e40:	2f 73       	andi	r18, 0x3F	; 63
     e42:	30 70       	andi	r19, 0x00	; 0
     e44:	c9 01       	movw	r24, r18
     e46:	08 95       	ret

00000e48 <_ZN14HardwareSerial4peekEv>:
     e48:	dc 01       	movw	r26, r24
     e4a:	1c 96       	adiw	r26, 0x0c	; 12
     e4c:	ed 91       	ld	r30, X+
     e4e:	fc 91       	ld	r31, X
     e50:	1d 97       	sbiw	r26, 0x0d	; 13
     e52:	e0 5c       	subi	r30, 0xC0	; 192
     e54:	ff 4f       	sbci	r31, 0xFF	; 255
     e56:	20 81       	ld	r18, Z
     e58:	31 81       	ldd	r19, Z+1	; 0x01
     e5a:	e0 54       	subi	r30, 0x40	; 64
     e5c:	f0 40       	sbci	r31, 0x00	; 0
     e5e:	df 01       	movw	r26, r30
     e60:	ae 5b       	subi	r26, 0xBE	; 190
     e62:	bf 4f       	sbci	r27, 0xFF	; 255
     e64:	8d 91       	ld	r24, X+
     e66:	9c 91       	ld	r25, X
     e68:	11 97       	sbiw	r26, 0x01	; 1
     e6a:	28 17       	cp	r18, r24
     e6c:	39 07       	cpc	r19, r25
     e6e:	19 f4       	brne	.+6      	; 0xe76 <_ZN14HardwareSerial4peekEv+0x2e>
     e70:	2f ef       	ldi	r18, 0xFF	; 255
     e72:	3f ef       	ldi	r19, 0xFF	; 255
     e74:	07 c0       	rjmp	.+14     	; 0xe84 <_ZN14HardwareSerial4peekEv+0x3c>
     e76:	8d 91       	ld	r24, X+
     e78:	9c 91       	ld	r25, X
     e7a:	e8 0f       	add	r30, r24
     e7c:	f9 1f       	adc	r31, r25
     e7e:	80 81       	ld	r24, Z
     e80:	28 2f       	mov	r18, r24
     e82:	30 e0       	ldi	r19, 0x00	; 0
     e84:	c9 01       	movw	r24, r18
     e86:	08 95       	ret

00000e88 <_ZN14HardwareSerial4readEv>:
     e88:	dc 01       	movw	r26, r24
     e8a:	1c 96       	adiw	r26, 0x0c	; 12
     e8c:	ed 91       	ld	r30, X+
     e8e:	fc 91       	ld	r31, X
     e90:	1d 97       	sbiw	r26, 0x0d	; 13
     e92:	e0 5c       	subi	r30, 0xC0	; 192
     e94:	ff 4f       	sbci	r31, 0xFF	; 255
     e96:	20 81       	ld	r18, Z
     e98:	31 81       	ldd	r19, Z+1	; 0x01
     e9a:	e0 54       	subi	r30, 0x40	; 64
     e9c:	f0 40       	sbci	r31, 0x00	; 0
     e9e:	df 01       	movw	r26, r30
     ea0:	ae 5b       	subi	r26, 0xBE	; 190
     ea2:	bf 4f       	sbci	r27, 0xFF	; 255
     ea4:	8d 91       	ld	r24, X+
     ea6:	9c 91       	ld	r25, X
     ea8:	11 97       	sbiw	r26, 0x01	; 1
     eaa:	28 17       	cp	r18, r24
     eac:	39 07       	cpc	r19, r25
     eae:	19 f4       	brne	.+6      	; 0xeb6 <_ZN14HardwareSerial4readEv+0x2e>
     eb0:	2f ef       	ldi	r18, 0xFF	; 255
     eb2:	3f ef       	ldi	r19, 0xFF	; 255
     eb4:	10 c0       	rjmp	.+32     	; 0xed6 <_ZN14HardwareSerial4readEv+0x4e>
     eb6:	8d 91       	ld	r24, X+
     eb8:	9c 91       	ld	r25, X
     eba:	11 97       	sbiw	r26, 0x01	; 1
     ebc:	e8 0f       	add	r30, r24
     ebe:	f9 1f       	adc	r31, r25
     ec0:	20 81       	ld	r18, Z
     ec2:	8d 91       	ld	r24, X+
     ec4:	9c 91       	ld	r25, X
     ec6:	11 97       	sbiw	r26, 0x01	; 1
     ec8:	01 96       	adiw	r24, 0x01	; 1
     eca:	8f 73       	andi	r24, 0x3F	; 63
     ecc:	90 70       	andi	r25, 0x00	; 0
     ece:	11 96       	adiw	r26, 0x01	; 1
     ed0:	9c 93       	st	X, r25
     ed2:	8e 93       	st	-X, r24
     ed4:	30 e0       	ldi	r19, 0x00	; 0
     ed6:	c9 01       	movw	r24, r18
     ed8:	08 95       	ret

00000eda <_ZN14HardwareSerial5flushEv>:
     eda:	dc 01       	movw	r26, r24
     edc:	91 96       	adiw	r26, 0x21	; 33
     ede:	8c 91       	ld	r24, X
     ee0:	91 97       	sbiw	r26, 0x21	; 33
     ee2:	88 23       	and	r24, r24
     ee4:	39 f0       	breq	.+14     	; 0xef4 <_ZN14HardwareSerial5flushEv+0x1a>
     ee6:	54 96       	adiw	r26, 0x14	; 20
     ee8:	ed 91       	ld	r30, X+
     eea:	fc 91       	ld	r31, X
     eec:	55 97       	sbiw	r26, 0x15	; 21
     eee:	80 81       	ld	r24, Z
     ef0:	86 ff       	sbrs	r24, 6
     ef2:	f9 cf       	rjmp	.-14     	; 0xee6 <_ZN14HardwareSerial5flushEv+0xc>
     ef4:	91 96       	adiw	r26, 0x21	; 33
     ef6:	1c 92       	st	X, r1
     ef8:	08 95       	ret

00000efa <_ZN14HardwareSerial5writeEh>:
     efa:	cf 93       	push	r28
     efc:	df 93       	push	r29
     efe:	ec 01       	movw	r28, r24
     f00:	ee 85       	ldd	r30, Y+14	; 0x0e
     f02:	ff 85       	ldd	r31, Y+15	; 0x0f
     f04:	e0 5c       	subi	r30, 0xC0	; 192
     f06:	ff 4f       	sbci	r31, 0xFF	; 255
     f08:	20 81       	ld	r18, Z
     f0a:	31 81       	ldd	r19, Z+1	; 0x01
     f0c:	e0 54       	subi	r30, 0x40	; 64
     f0e:	f0 40       	sbci	r31, 0x00	; 0
     f10:	2f 5f       	subi	r18, 0xFF	; 255
     f12:	3f 4f       	sbci	r19, 0xFF	; 255
     f14:	2f 73       	andi	r18, 0x3F	; 63
     f16:	30 70       	andi	r19, 0x00	; 0
     f18:	df 01       	movw	r26, r30
     f1a:	ae 5b       	subi	r26, 0xBE	; 190
     f1c:	bf 4f       	sbci	r27, 0xFF	; 255
     f1e:	8d 91       	ld	r24, X+
     f20:	9c 91       	ld	r25, X
     f22:	11 97       	sbiw	r26, 0x01	; 1
     f24:	28 17       	cp	r18, r24
     f26:	39 07       	cpc	r19, r25
     f28:	d1 f3       	breq	.-12     	; 0xf1e <_ZN14HardwareSerial5writeEh+0x24>
     f2a:	e0 5c       	subi	r30, 0xC0	; 192
     f2c:	ff 4f       	sbci	r31, 0xFF	; 255
     f2e:	80 81       	ld	r24, Z
     f30:	91 81       	ldd	r25, Z+1	; 0x01
     f32:	e0 54       	subi	r30, 0x40	; 64
     f34:	f0 40       	sbci	r31, 0x00	; 0
     f36:	e8 0f       	add	r30, r24
     f38:	f9 1f       	adc	r31, r25
     f3a:	60 83       	st	Z, r22
     f3c:	ee 85       	ldd	r30, Y+14	; 0x0e
     f3e:	ff 85       	ldd	r31, Y+15	; 0x0f
     f40:	e0 5c       	subi	r30, 0xC0	; 192
     f42:	ff 4f       	sbci	r31, 0xFF	; 255
     f44:	31 83       	std	Z+1, r19	; 0x01
     f46:	20 83       	st	Z, r18
     f48:	ee 89       	ldd	r30, Y+22	; 0x16
     f4a:	ff 89       	ldd	r31, Y+23	; 0x17
     f4c:	20 81       	ld	r18, Z
     f4e:	81 e0       	ldi	r24, 0x01	; 1
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	0f 8c       	ldd	r0, Y+31	; 0x1f
     f54:	02 c0       	rjmp	.+4      	; 0xf5a <_ZN14HardwareSerial5writeEh+0x60>
     f56:	88 0f       	add	r24, r24
     f58:	99 1f       	adc	r25, r25
     f5a:	0a 94       	dec	r0
     f5c:	e2 f7       	brpl	.-8      	; 0xf56 <_ZN14HardwareSerial5writeEh+0x5c>
     f5e:	28 2b       	or	r18, r24
     f60:	20 83       	st	Z, r18
     f62:	81 e0       	ldi	r24, 0x01	; 1
     f64:	89 a3       	lds	r24, 0x59
     f66:	ec 89       	ldd	r30, Y+20	; 0x14
     f68:	fd 89       	ldd	r31, Y+21	; 0x15
     f6a:	80 81       	ld	r24, Z
     f6c:	80 64       	ori	r24, 0x40	; 64
     f6e:	80 83       	st	Z, r24
     f70:	81 e0       	ldi	r24, 0x01	; 1
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	df 91       	pop	r29
     f76:	cf 91       	pop	r28
     f78:	08 95       	ret

00000f7a <_GLOBAL__I_rx_buffer>:
     f7a:	10 92 4f 05 	sts	0x054F, r1
     f7e:	10 92 4e 05 	sts	0x054E, r1
     f82:	88 ee       	ldi	r24, 0xE8	; 232
     f84:	93 e0       	ldi	r25, 0x03	; 3
     f86:	a0 e0       	ldi	r26, 0x00	; 0
     f88:	b0 e0       	ldi	r27, 0x00	; 0
     f8a:	80 93 50 05 	sts	0x0550, r24
     f8e:	90 93 51 05 	sts	0x0551, r25
     f92:	a0 93 52 05 	sts	0x0552, r26
     f96:	b0 93 53 05 	sts	0x0553, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
     f9a:	8c e0       	ldi	r24, 0x0C	; 12
     f9c:	93 e0       	ldi	r25, 0x03	; 3
     f9e:	90 93 4d 05 	sts	0x054D, r25
     fa2:	80 93 4c 05 	sts	0x054C, r24
{
  _rx_buffer = rx_buffer;
     fa6:	84 ec       	ldi	r24, 0xC4	; 196
     fa8:	94 e0       	ldi	r25, 0x04	; 4
     faa:	90 93 59 05 	sts	0x0559, r25
     fae:	80 93 58 05 	sts	0x0558, r24
  _tx_buffer = tx_buffer;
     fb2:	88 e0       	ldi	r24, 0x08	; 8
     fb4:	95 e0       	ldi	r25, 0x05	; 5
     fb6:	90 93 5b 05 	sts	0x055B, r25
     fba:	80 93 5a 05 	sts	0x055A, r24
  _ubrrh = ubrrh;
     fbe:	85 ec       	ldi	r24, 0xC5	; 197
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	90 93 5d 05 	sts	0x055D, r25
     fc6:	80 93 5c 05 	sts	0x055C, r24
  _ubrrl = ubrrl;
     fca:	84 ec       	ldi	r24, 0xC4	; 196
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	90 93 5f 05 	sts	0x055F, r25
     fd2:	80 93 5e 05 	sts	0x055E, r24
  _ucsra = ucsra;
     fd6:	80 ec       	ldi	r24, 0xC0	; 192
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	90 93 61 05 	sts	0x0561, r25
     fde:	80 93 60 05 	sts	0x0560, r24
  _ucsrb = ucsrb;
     fe2:	81 ec       	ldi	r24, 0xC1	; 193
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	90 93 63 05 	sts	0x0563, r25
     fea:	80 93 62 05 	sts	0x0562, r24
  _ucsrc = ucsrc;
     fee:	82 ec       	ldi	r24, 0xC2	; 194
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	90 93 65 05 	sts	0x0565, r25
     ff6:	80 93 64 05 	sts	0x0564, r24
  _udr = udr;
     ffa:	86 ec       	ldi	r24, 0xC6	; 198
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	90 93 67 05 	sts	0x0567, r25
    1002:	80 93 66 05 	sts	0x0566, r24
  _rxen = rxen;
    1006:	84 e0       	ldi	r24, 0x04	; 4
    1008:	80 93 68 05 	sts	0x0568, r24
  _txen = txen;
    100c:	83 e0       	ldi	r24, 0x03	; 3
    100e:	80 93 69 05 	sts	0x0569, r24
  _rxcie = rxcie;
    1012:	87 e0       	ldi	r24, 0x07	; 7
    1014:	80 93 6a 05 	sts	0x056A, r24
  _udrie = udrie;
    1018:	85 e0       	ldi	r24, 0x05	; 5
    101a:	80 93 6b 05 	sts	0x056B, r24
  _u2x = u2x;
    101e:	81 e0       	ldi	r24, 0x01	; 1
    1020:	80 93 6c 05 	sts	0x056C, r24
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UCSRC, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UCSR0C, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
    1024:	08 95       	ret

00001026 <main>:
/*
  main.cpp - Main loop for Arduino sketches
  Copyright (c) 2005-2013 Arduino Team.  All right reserved.
    1026:	cf 93       	push	r28
    1028:	df 93       	push	r29

  This library is free software; you can redistribute it and/or
    102a:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <init>
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
    102e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <setup>
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
    1032:	ce e3       	ldi	r28, 0x3E	; 62
    1034:	d6 e0       	ldi	r29, 0x06	; 6

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

    1036:	0e 94 a7 03 	call	0x74e	; 0x74e <loop>
  You should have received a copy of the GNU Lesser General Public
    103a:	20 97       	sbiw	r28, 0x00	; 0
    103c:	e1 f3       	breq	.-8      	; 0x1036 <main+0x10>
    103e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <_Z14serialEventRunv>
    1042:	f9 cf       	rjmp	.-14     	; 0x1036 <main+0x10>

00001044 <_ZN5Print5writeEPKhj>:
  return n;
}

size_t Print::println(const Printable& x)
{
  size_t n = print(x);
    1044:	cf 92       	push	r12
    1046:	df 92       	push	r13
    1048:	ef 92       	push	r14
    104a:	ff 92       	push	r15
    104c:	0f 93       	push	r16
    104e:	1f 93       	push	r17
    1050:	cf 93       	push	r28
    1052:	df 93       	push	r29
    1054:	7c 01       	movw	r14, r24
    1056:	6b 01       	movw	r12, r22
    1058:	8a 01       	movw	r16, r20
    105a:	c0 e0       	ldi	r28, 0x00	; 0
    105c:	d0 e0       	ldi	r29, 0x00	; 0
    105e:	0f c0       	rjmp	.+30     	; 0x107e <_ZN5Print5writeEPKhj+0x3a>
    1060:	d6 01       	movw	r26, r12
    1062:	6d 91       	ld	r22, X+
    1064:	6d 01       	movw	r12, r26
    1066:	d7 01       	movw	r26, r14
    1068:	ed 91       	ld	r30, X+
    106a:	fc 91       	ld	r31, X
    106c:	01 90       	ld	r0, Z+
    106e:	f0 81       	ld	r31, Z
    1070:	e0 2d       	mov	r30, r0
    1072:	c7 01       	movw	r24, r14
    1074:	09 95       	icall
    1076:	c8 0f       	add	r28, r24
    1078:	d9 1f       	adc	r29, r25
    107a:	01 50       	subi	r16, 0x01	; 1
    107c:	10 40       	sbci	r17, 0x00	; 0
    107e:	01 15       	cp	r16, r1
    1080:	11 05       	cpc	r17, r1
    1082:	71 f7       	brne	.-36     	; 0x1060 <_ZN5Print5writeEPKhj+0x1c>
    1084:	ce 01       	movw	r24, r28
    1086:	df 91       	pop	r29
    1088:	cf 91       	pop	r28
    108a:	1f 91       	pop	r17
    108c:	0f 91       	pop	r16
    108e:	ff 90       	pop	r15
    1090:	ef 90       	pop	r14
    1092:	df 90       	pop	r13
    1094:	cf 90       	pop	r12
    1096:	08 95       	ret

00001098 <_ZN5Print7printlnEv>:
    1098:	ef 92       	push	r14
    109a:	ff 92       	push	r15
    109c:	0f 93       	push	r16
    109e:	1f 93       	push	r17
    10a0:	8c 01       	movw	r16, r24
    10a2:	dc 01       	movw	r26, r24
    10a4:	ed 91       	ld	r30, X+
    10a6:	fc 91       	ld	r31, X
    10a8:	01 90       	ld	r0, Z+
    10aa:	f0 81       	ld	r31, Z
    10ac:	e0 2d       	mov	r30, r0
    10ae:	6d e0       	ldi	r22, 0x0D	; 13
    10b0:	09 95       	icall
    10b2:	7c 01       	movw	r14, r24
    10b4:	d8 01       	movw	r26, r16
    10b6:	ed 91       	ld	r30, X+
    10b8:	fc 91       	ld	r31, X
    10ba:	01 90       	ld	r0, Z+
    10bc:	f0 81       	ld	r31, Z
    10be:	e0 2d       	mov	r30, r0
    10c0:	c8 01       	movw	r24, r16
    10c2:	6a e0       	ldi	r22, 0x0A	; 10
    10c4:	09 95       	icall
    10c6:	9c 01       	movw	r18, r24
    10c8:	2e 0d       	add	r18, r14
    10ca:	3f 1d       	adc	r19, r15
    10cc:	c9 01       	movw	r24, r18
    10ce:	1f 91       	pop	r17
    10d0:	0f 91       	pop	r16
    10d2:	ff 90       	pop	r15
    10d4:	ef 90       	pop	r14
    10d6:	08 95       	ret

000010d8 <_ZN5Print5writeEPKc>:
    10d8:	cf 93       	push	r28
    10da:	df 93       	push	r29
    10dc:	ec 01       	movw	r28, r24
    10de:	61 15       	cp	r22, r1
    10e0:	71 05       	cpc	r23, r1
    10e2:	19 f4       	brne	.+6      	; 0x10ea <_ZN5Print5writeEPKc+0x12>
    10e4:	20 e0       	ldi	r18, 0x00	; 0
    10e6:	30 e0       	ldi	r19, 0x00	; 0
    10e8:	0f c0       	rjmp	.+30     	; 0x1108 <_ZN5Print5writeEPKc+0x30>
    10ea:	db 01       	movw	r26, r22
    10ec:	0d 90       	ld	r0, X+
    10ee:	00 20       	and	r0, r0
    10f0:	e9 f7       	brne	.-6      	; 0x10ec <_ZN5Print5writeEPKc+0x14>
    10f2:	11 97       	sbiw	r26, 0x01	; 1
    10f4:	a6 1b       	sub	r26, r22
    10f6:	b7 0b       	sbc	r27, r23
    10f8:	e8 81       	ld	r30, Y
    10fa:	f9 81       	ldd	r31, Y+1	; 0x01
    10fc:	02 80       	ldd	r0, Z+2	; 0x02
    10fe:	f3 81       	ldd	r31, Z+3	; 0x03
    1100:	e0 2d       	mov	r30, r0
    1102:	ad 01       	movw	r20, r26
    1104:	09 95       	icall
    1106:	9c 01       	movw	r18, r24
    1108:	c9 01       	movw	r24, r18
    110a:	df 91       	pop	r29
    110c:	cf 91       	pop	r28
    110e:	08 95       	ret

00001110 <_ZN5Print11printNumberEmh>:
    1110:	4f 92       	push	r4
    1112:	5f 92       	push	r5
    1114:	7f 92       	push	r7
    1116:	8f 92       	push	r8
    1118:	9f 92       	push	r9
    111a:	af 92       	push	r10
    111c:	bf 92       	push	r11
    111e:	cf 92       	push	r12
    1120:	df 92       	push	r13
    1122:	ef 92       	push	r14
    1124:	ff 92       	push	r15
    1126:	0f 93       	push	r16
    1128:	1f 93       	push	r17
    112a:	df 93       	push	r29
    112c:	cf 93       	push	r28
    112e:	cd b7       	in	r28, 0x3d	; 61
    1130:	de b7       	in	r29, 0x3e	; 62
    1132:	a1 97       	sbiw	r28, 0x21	; 33
    1134:	0f b6       	in	r0, 0x3f	; 63
    1136:	f8 94       	cli
    1138:	de bf       	out	0x3e, r29	; 62
    113a:	0f be       	out	0x3f, r0	; 63
    113c:	cd bf       	out	0x3d, r28	; 61
    113e:	2c 01       	movw	r4, r24
    1140:	74 2e       	mov	r7, r20
    1142:	cb 01       	movw	r24, r22
    1144:	22 30       	cpi	r18, 0x02	; 2
    1146:	08 f4       	brcc	.+2      	; 0x114a <_ZN5Print11printNumberEmh+0x3a>
    1148:	2a e0       	ldi	r18, 0x0A	; 10
    114a:	19 a2       	lds	r17, 0x99
    114c:	31 e2       	ldi	r19, 0x21	; 33
    114e:	c3 2e       	mov	r12, r19
    1150:	d1 2c       	mov	r13, r1
    1152:	cc 0e       	add	r12, r28
    1154:	dd 1e       	adc	r13, r29
    1156:	82 2e       	mov	r8, r18
    1158:	99 24       	eor	r9, r9
    115a:	aa 24       	eor	r10, r10
    115c:	bb 24       	eor	r11, r11
    115e:	67 2d       	mov	r22, r7
    1160:	75 2f       	mov	r23, r21
    1162:	a5 01       	movw	r20, r10
    1164:	94 01       	movw	r18, r8
    1166:	0e 94 bf 09 	call	0x137e	; 0x137e <__udivmodsi4>
    116a:	79 01       	movw	r14, r18
    116c:	8a 01       	movw	r16, r20
    116e:	c8 01       	movw	r24, r16
    1170:	b7 01       	movw	r22, r14
    1172:	a5 01       	movw	r20, r10
    1174:	94 01       	movw	r18, r8
    1176:	0e 94 8d 09 	call	0x131a	; 0x131a <__mulsi3>
    117a:	47 2d       	mov	r20, r7
    117c:	46 1b       	sub	r20, r22
    117e:	08 94       	sec
    1180:	c1 08       	sbc	r12, r1
    1182:	d1 08       	sbc	r13, r1
    1184:	4a 30       	cpi	r20, 0x0A	; 10
    1186:	14 f4       	brge	.+4      	; 0x118c <_ZN5Print11printNumberEmh+0x7c>
    1188:	40 5d       	subi	r20, 0xD0	; 208
    118a:	01 c0       	rjmp	.+2      	; 0x118e <_ZN5Print11printNumberEmh+0x7e>
    118c:	49 5c       	subi	r20, 0xC9	; 201
    118e:	f6 01       	movw	r30, r12
    1190:	40 83       	st	Z, r20
    1192:	e1 14       	cp	r14, r1
    1194:	f1 04       	cpc	r15, r1
    1196:	01 05       	cpc	r16, r1
    1198:	11 05       	cpc	r17, r1
    119a:	21 f0       	breq	.+8      	; 0x11a4 <_ZN5Print11printNumberEmh+0x94>
    119c:	7e 2c       	mov	r7, r14
    119e:	5f 2d       	mov	r21, r15
    11a0:	c8 01       	movw	r24, r16
    11a2:	dd cf       	rjmp	.-70     	; 0x115e <_ZN5Print11printNumberEmh+0x4e>
    11a4:	c2 01       	movw	r24, r4
    11a6:	b6 01       	movw	r22, r12
    11a8:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <_ZN5Print5writeEPKc>
    11ac:	a1 96       	adiw	r28, 0x21	; 33
    11ae:	0f b6       	in	r0, 0x3f	; 63
    11b0:	f8 94       	cli
    11b2:	de bf       	out	0x3e, r29	; 62
    11b4:	0f be       	out	0x3f, r0	; 63
    11b6:	cd bf       	out	0x3d, r28	; 61
    11b8:	cf 91       	pop	r28
    11ba:	df 91       	pop	r29
    11bc:	1f 91       	pop	r17
    11be:	0f 91       	pop	r16
    11c0:	ff 90       	pop	r15
    11c2:	ef 90       	pop	r14
    11c4:	df 90       	pop	r13
    11c6:	cf 90       	pop	r12
    11c8:	bf 90       	pop	r11
    11ca:	af 90       	pop	r10
    11cc:	9f 90       	pop	r9
    11ce:	8f 90       	pop	r8
    11d0:	7f 90       	pop	r7
    11d2:	5f 90       	pop	r5
    11d4:	4f 90       	pop	r4
    11d6:	08 95       	ret

000011d8 <_ZN5Print5printEmi>:
    11d8:	dc 01       	movw	r26, r24
    11da:	21 15       	cp	r18, r1
    11dc:	31 05       	cpc	r19, r1
    11de:	41 f4       	brne	.+16     	; 0x11f0 <_ZN5Print5printEmi+0x18>
    11e0:	ed 91       	ld	r30, X+
    11e2:	fc 91       	ld	r31, X
    11e4:	01 90       	ld	r0, Z+
    11e6:	f0 81       	ld	r31, Z
    11e8:	e0 2d       	mov	r30, r0
    11ea:	64 2f       	mov	r22, r20
    11ec:	09 95       	icall
    11ee:	08 95       	ret
    11f0:	0e 94 88 08 	call	0x1110	; 0x1110 <_ZN5Print11printNumberEmh>
    11f4:	08 95       	ret

000011f6 <_ZN5Print7printlnEji>:
    11f6:	cf 92       	push	r12
    11f8:	df 92       	push	r13
    11fa:	ef 92       	push	r14
    11fc:	ff 92       	push	r15
    11fe:	0f 93       	push	r16
    1200:	1f 93       	push	r17
    1202:	6c 01       	movw	r12, r24
    1204:	7b 01       	movw	r14, r22
    1206:	9a 01       	movw	r18, r20
    1208:	00 e0       	ldi	r16, 0x00	; 0
    120a:	10 e0       	ldi	r17, 0x00	; 0
    120c:	b8 01       	movw	r22, r16
    120e:	a7 01       	movw	r20, r14
    1210:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <_ZN5Print5printEmi>
    1214:	8c 01       	movw	r16, r24
    1216:	c6 01       	movw	r24, r12
    1218:	0e 94 4c 08 	call	0x1098	; 0x1098 <_ZN5Print7printlnEv>
    121c:	08 0f       	add	r16, r24
    121e:	19 1f       	adc	r17, r25
    1220:	c8 01       	movw	r24, r16
    1222:	1f 91       	pop	r17
    1224:	0f 91       	pop	r16
    1226:	ff 90       	pop	r15
    1228:	ef 90       	pop	r14
    122a:	df 90       	pop	r13
    122c:	cf 90       	pop	r12
    122e:	08 95       	ret

00001230 <_ZN5Print5printEli>:
    1230:	cf 92       	push	r12
    1232:	df 92       	push	r13
    1234:	ef 92       	push	r14
    1236:	ff 92       	push	r15
    1238:	0f 93       	push	r16
    123a:	1f 93       	push	r17
    123c:	cf 93       	push	r28
    123e:	df 93       	push	r29
    1240:	ec 01       	movw	r28, r24
    1242:	6a 01       	movw	r12, r20
    1244:	7b 01       	movw	r14, r22
    1246:	21 15       	cp	r18, r1
    1248:	31 05       	cpc	r19, r1
    124a:	41 f4       	brne	.+16     	; 0x125c <_ZN5Print5printEli+0x2c>
    124c:	e8 81       	ld	r30, Y
    124e:	f9 81       	ldd	r31, Y+1	; 0x01
    1250:	01 90       	ld	r0, Z+
    1252:	f0 81       	ld	r31, Z
    1254:	e0 2d       	mov	r30, r0
    1256:	64 2f       	mov	r22, r20
    1258:	09 95       	icall
    125a:	1f c0       	rjmp	.+62     	; 0x129a <_ZN5Print5printEli+0x6a>
    125c:	2a 30       	cpi	r18, 0x0A	; 10
    125e:	31 05       	cpc	r19, r1
    1260:	d1 f4       	brne	.+52     	; 0x1296 <_ZN5Print5printEli+0x66>
    1262:	77 ff       	sbrs	r23, 7
    1264:	17 c0       	rjmp	.+46     	; 0x1294 <_ZN5Print5printEli+0x64>
    1266:	e8 81       	ld	r30, Y
    1268:	f9 81       	ldd	r31, Y+1	; 0x01
    126a:	01 90       	ld	r0, Z+
    126c:	f0 81       	ld	r31, Z
    126e:	e0 2d       	mov	r30, r0
    1270:	6d e2       	ldi	r22, 0x2D	; 45
    1272:	09 95       	icall
    1274:	8c 01       	movw	r16, r24
    1276:	44 27       	eor	r20, r20
    1278:	55 27       	eor	r21, r21
    127a:	ba 01       	movw	r22, r20
    127c:	4c 19       	sub	r20, r12
    127e:	5d 09       	sbc	r21, r13
    1280:	6e 09       	sbc	r22, r14
    1282:	7f 09       	sbc	r23, r15
    1284:	ce 01       	movw	r24, r28
    1286:	2a e0       	ldi	r18, 0x0A	; 10
    1288:	0e 94 88 08 	call	0x1110	; 0x1110 <_ZN5Print11printNumberEmh>
    128c:	98 01       	movw	r18, r16
    128e:	28 0f       	add	r18, r24
    1290:	39 1f       	adc	r19, r25
    1292:	04 c0       	rjmp	.+8      	; 0x129c <_ZN5Print5printEli+0x6c>
    1294:	2a e0       	ldi	r18, 0x0A	; 10
    1296:	0e 94 88 08 	call	0x1110	; 0x1110 <_ZN5Print11printNumberEmh>
    129a:	9c 01       	movw	r18, r24
    129c:	c9 01       	movw	r24, r18
    129e:	df 91       	pop	r29
    12a0:	cf 91       	pop	r28
    12a2:	1f 91       	pop	r17
    12a4:	0f 91       	pop	r16
    12a6:	ff 90       	pop	r15
    12a8:	ef 90       	pop	r14
    12aa:	df 90       	pop	r13
    12ac:	cf 90       	pop	r12
    12ae:	08 95       	ret

000012b0 <_ZN5Print7printlnEii>:
    12b0:	cf 92       	push	r12
    12b2:	df 92       	push	r13
    12b4:	ef 92       	push	r14
    12b6:	ff 92       	push	r15
    12b8:	0f 93       	push	r16
    12ba:	1f 93       	push	r17
    12bc:	6c 01       	movw	r12, r24
    12be:	7b 01       	movw	r14, r22
    12c0:	9a 01       	movw	r18, r20
    12c2:	00 27       	eor	r16, r16
    12c4:	f7 fc       	sbrc	r15, 7
    12c6:	00 95       	com	r16
    12c8:	10 2f       	mov	r17, r16
    12ca:	b8 01       	movw	r22, r16
    12cc:	a7 01       	movw	r20, r14
    12ce:	0e 94 18 09 	call	0x1230	; 0x1230 <_ZN5Print5printEli>
    12d2:	8c 01       	movw	r16, r24
    12d4:	c6 01       	movw	r24, r12
    12d6:	0e 94 4c 08 	call	0x1098	; 0x1098 <_ZN5Print7printlnEv>
    12da:	08 0f       	add	r16, r24
    12dc:	19 1f       	adc	r17, r25
    12de:	c8 01       	movw	r24, r16
    12e0:	1f 91       	pop	r17
    12e2:	0f 91       	pop	r16
    12e4:	ff 90       	pop	r15
    12e6:	ef 90       	pop	r14
    12e8:	df 90       	pop	r13
    12ea:	cf 90       	pop	r12
    12ec:	08 95       	ret

000012ee <_ZN5Print5printEPKc>:
    12ee:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <_ZN5Print5writeEPKc>
    12f2:	08 95       	ret

000012f4 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
  return n;
    12f4:	ef 92       	push	r14
    12f6:	ff 92       	push	r15
    12f8:	0f 93       	push	r16
    12fa:	1f 93       	push	r17
    12fc:	7c 01       	movw	r14, r24
{
  return write(str);
}

size_t Print::print(char c)
{
    12fe:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <_ZN5Print5writeEPKc>
    1302:	8c 01       	movw	r16, r24
  size_t n = print(c);
  n += println();
  return n;
}

size_t Print::println(char c)
    1304:	c7 01       	movw	r24, r14
    1306:	0e 94 4c 08 	call	0x1098	; 0x1098 <_ZN5Print7printlnEv>
    130a:	08 0f       	add	r16, r24
    130c:	19 1f       	adc	r17, r25
{
  size_t n = print(c);
    130e:	c8 01       	movw	r24, r16
    1310:	1f 91       	pop	r17
    1312:	0f 91       	pop	r16
    1314:	ff 90       	pop	r15
    1316:	ef 90       	pop	r14
    1318:	08 95       	ret

0000131a <__mulsi3>:
    131a:	62 9f       	mul	r22, r18
    131c:	d0 01       	movw	r26, r0
    131e:	73 9f       	mul	r23, r19
    1320:	f0 01       	movw	r30, r0
    1322:	82 9f       	mul	r24, r18
    1324:	e0 0d       	add	r30, r0
    1326:	f1 1d       	adc	r31, r1
    1328:	64 9f       	mul	r22, r20
    132a:	e0 0d       	add	r30, r0
    132c:	f1 1d       	adc	r31, r1
    132e:	92 9f       	mul	r25, r18
    1330:	f0 0d       	add	r31, r0
    1332:	83 9f       	mul	r24, r19
    1334:	f0 0d       	add	r31, r0
    1336:	74 9f       	mul	r23, r20
    1338:	f0 0d       	add	r31, r0
    133a:	65 9f       	mul	r22, r21
    133c:	f0 0d       	add	r31, r0
    133e:	99 27       	eor	r25, r25
    1340:	72 9f       	mul	r23, r18
    1342:	b0 0d       	add	r27, r0
    1344:	e1 1d       	adc	r30, r1
    1346:	f9 1f       	adc	r31, r25
    1348:	63 9f       	mul	r22, r19
    134a:	b0 0d       	add	r27, r0
    134c:	e1 1d       	adc	r30, r1
    134e:	f9 1f       	adc	r31, r25
    1350:	bd 01       	movw	r22, r26
    1352:	cf 01       	movw	r24, r30
    1354:	11 24       	eor	r1, r1
    1356:	08 95       	ret

00001358 <__divmodhi4>:
    1358:	97 fb       	bst	r25, 7
    135a:	09 2e       	mov	r0, r25
    135c:	07 26       	eor	r0, r23
    135e:	0a d0       	rcall	.+20     	; 0x1374 <__divmodhi4_neg1>
    1360:	77 fd       	sbrc	r23, 7
    1362:	04 d0       	rcall	.+8      	; 0x136c <__divmodhi4_neg2>
    1364:	2e d0       	rcall	.+92     	; 0x13c2 <__udivmodhi4>
    1366:	06 d0       	rcall	.+12     	; 0x1374 <__divmodhi4_neg1>
    1368:	00 20       	and	r0, r0
    136a:	1a f4       	brpl	.+6      	; 0x1372 <__divmodhi4_exit>

0000136c <__divmodhi4_neg2>:
    136c:	70 95       	com	r23
    136e:	61 95       	neg	r22
    1370:	7f 4f       	sbci	r23, 0xFF	; 255

00001372 <__divmodhi4_exit>:
    1372:	08 95       	ret

00001374 <__divmodhi4_neg1>:
    1374:	f6 f7       	brtc	.-4      	; 0x1372 <__divmodhi4_exit>
    1376:	90 95       	com	r25
    1378:	81 95       	neg	r24
    137a:	9f 4f       	sbci	r25, 0xFF	; 255
    137c:	08 95       	ret

0000137e <__udivmodsi4>:
    137e:	a1 e2       	ldi	r26, 0x21	; 33
    1380:	1a 2e       	mov	r1, r26
    1382:	aa 1b       	sub	r26, r26
    1384:	bb 1b       	sub	r27, r27
    1386:	fd 01       	movw	r30, r26
    1388:	0d c0       	rjmp	.+26     	; 0x13a4 <__udivmodsi4_ep>

0000138a <__udivmodsi4_loop>:
    138a:	aa 1f       	adc	r26, r26
    138c:	bb 1f       	adc	r27, r27
    138e:	ee 1f       	adc	r30, r30
    1390:	ff 1f       	adc	r31, r31
    1392:	a2 17       	cp	r26, r18
    1394:	b3 07       	cpc	r27, r19
    1396:	e4 07       	cpc	r30, r20
    1398:	f5 07       	cpc	r31, r21
    139a:	20 f0       	brcs	.+8      	; 0x13a4 <__udivmodsi4_ep>
    139c:	a2 1b       	sub	r26, r18
    139e:	b3 0b       	sbc	r27, r19
    13a0:	e4 0b       	sbc	r30, r20
    13a2:	f5 0b       	sbc	r31, r21

000013a4 <__udivmodsi4_ep>:
    13a4:	66 1f       	adc	r22, r22
    13a6:	77 1f       	adc	r23, r23
    13a8:	88 1f       	adc	r24, r24
    13aa:	99 1f       	adc	r25, r25
    13ac:	1a 94       	dec	r1
    13ae:	69 f7       	brne	.-38     	; 0x138a <__udivmodsi4_loop>
    13b0:	60 95       	com	r22
    13b2:	70 95       	com	r23
    13b4:	80 95       	com	r24
    13b6:	90 95       	com	r25
    13b8:	9b 01       	movw	r18, r22
    13ba:	ac 01       	movw	r20, r24
    13bc:	bd 01       	movw	r22, r26
    13be:	cf 01       	movw	r24, r30
    13c0:	08 95       	ret

000013c2 <__udivmodhi4>:
    13c2:	aa 1b       	sub	r26, r26
    13c4:	bb 1b       	sub	r27, r27
    13c6:	51 e1       	ldi	r21, 0x11	; 17
    13c8:	07 c0       	rjmp	.+14     	; 0x13d8 <__udivmodhi4_ep>

000013ca <__udivmodhi4_loop>:
    13ca:	aa 1f       	adc	r26, r26
    13cc:	bb 1f       	adc	r27, r27
    13ce:	a6 17       	cp	r26, r22
    13d0:	b7 07       	cpc	r27, r23
    13d2:	10 f0       	brcs	.+4      	; 0x13d8 <__udivmodhi4_ep>
    13d4:	a6 1b       	sub	r26, r22
    13d6:	b7 0b       	sbc	r27, r23

000013d8 <__udivmodhi4_ep>:
    13d8:	88 1f       	adc	r24, r24
    13da:	99 1f       	adc	r25, r25
    13dc:	5a 95       	dec	r21
    13de:	a9 f7       	brne	.-22     	; 0x13ca <__udivmodhi4_loop>
    13e0:	80 95       	com	r24
    13e2:	90 95       	com	r25
    13e4:	bc 01       	movw	r22, r24
    13e6:	cd 01       	movw	r24, r26
    13e8:	08 95       	ret

000013ea <__tablejump2__>:
    13ea:	ee 0f       	add	r30, r30
    13ec:	ff 1f       	adc	r31, r31

000013ee <__tablejump__>:
    13ee:	05 90       	lpm	r0, Z+
    13f0:	f4 91       	lpm	r31, Z
    13f2:	e0 2d       	mov	r30, r0
    13f4:	09 94       	ijmp

000013f6 <_exit>:
    13f6:	f8 94       	cli

000013f8 <__stop_program>:
    13f8:	ff cf       	rjmp	.-2      	; 0x13f8 <__stop_program>
