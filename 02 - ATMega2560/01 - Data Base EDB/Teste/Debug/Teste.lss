
Teste.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002d4  00800200  000044f6  0000458a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000044f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000053e  008004d4  008004d4  0000485e  2**0
                  ALLOC
  3 .stab         000026dc  00000000  00000000  00004860  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000954  00000000  00000000  00006f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000a18  00000000  00000000  00007890  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000007a0  00000000  00000000  000082a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000180a7  00000000  00000000  00008a48  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000038ca  00000000  00000000  00020aef  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000053ff  00000000  00000000  000243b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001fac  00000000  00000000  000297b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000048d8  00000000  00000000  0002b764  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000a48c  00000000  00000000  0003003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000c00  00000000  00000000  0003a4c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__dtors_end>
       4:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
       8:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
       c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      10:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      14:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      18:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      1c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      20:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      24:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      28:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      2c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      30:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      34:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      38:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      3c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      40:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      44:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      48:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      4c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      50:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      54:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      58:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      5c:	0c 94 f9 19 	jmp	0x33f2	; 0x33f2 <__vector_23>
      60:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      64:	0c 94 a2 1b 	jmp	0x3744	; 0x3744 <__vector_25>
      68:	0c 94 fa 1c 	jmp	0x39f4	; 0x39f4 <__vector_26>
      6c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      70:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      74:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      78:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      7c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      80:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      84:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      88:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      8c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      90:	0c 94 e2 1b 	jmp	0x37c4	; 0x37c4 <__vector_36>
      94:	0c 94 39 1d 	jmp	0x3a72	; 0x3a72 <__vector_37>
      98:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      9c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      a0:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      a4:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      a8:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      ac:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      b0:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      b4:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      b8:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      bc:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      c0:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      c4:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      c8:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      cc:	0c 94 22 1c 	jmp	0x3844	; 0x3844 <__vector_51>
      d0:	0c 94 78 1d 	jmp	0x3af0	; 0x3af0 <__vector_52>
      d4:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      d8:	0c 94 62 1c 	jmp	0x38c4	; 0x38c4 <__vector_54>
      dc:	0c 94 b7 1d 	jmp	0x3b6e	; 0x3b6e <__vector_55>
      e0:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>

000000e4 <_ZZN6SdFile10make83NameEPKcPhE3__c>:
      e4:	7c 3c 3e 5e 2b 3d 3f 2f 5b 5d 3b 2c 2a 22 5c 00     |<>^+=?/[];,*"\.

000000f4 <port_to_mode_PGM>:
      f4:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     104:	01 01 00 00 04 01 07 01 0a 01                       ..........

0000010e <port_to_output_PGM>:
     10e:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     11e:	02 01 00 00 05 01 08 01 0b 01                       ..........

00000128 <port_to_input_PGM>:
     128:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
     138:	00 01 00 00 03 01 06 01 09 01                       ..........

00000142 <digital_pin_to_port_PGM>:
     142:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     152:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     162:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     172:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     182:	0b 0b 0b 0b 0b 0b                                   ......

00000188 <digital_pin_to_bit_mask_PGM>:
     188:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     198:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     1a8:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     1b8:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     1c8:	04 08 10 20 40 80                                   ... @.

000001ce <digital_pin_to_timer_PGM>:
     1ce:	00 00 09 0a 02 08 0b 0c 0d 07 06 03 04 01 00 00     ................
	...
     1fa:	11 10 0f 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

00000214 <__ctors_start>:
     214:	4a 06       	cpc	r4, r26
     216:	3e 09       	sbc	r19, r14
     218:	2a 1f       	adc	r18, r26

0000021a <__ctors_end>:
     21a:	4f 06       	cpc	r4, r31

0000021c <__dtors_end>:
     21c:	11 24       	eor	r1, r1
     21e:	1f be       	out	0x3f, r1	; 63
     220:	cf ef       	ldi	r28, 0xFF	; 255
     222:	d1 e2       	ldi	r29, 0x21	; 33
     224:	de bf       	out	0x3e, r29	; 62
     226:	cd bf       	out	0x3d, r28	; 61
     228:	00 e0       	ldi	r16, 0x00	; 0
     22a:	0c bf       	out	0x3c, r16	; 60

0000022c <__do_copy_data>:
     22c:	14 e0       	ldi	r17, 0x04	; 4
     22e:	a0 e0       	ldi	r26, 0x00	; 0
     230:	b2 e0       	ldi	r27, 0x02	; 2
     232:	e6 ef       	ldi	r30, 0xF6	; 246
     234:	f4 e4       	ldi	r31, 0x44	; 68
     236:	00 e0       	ldi	r16, 0x00	; 0
     238:	0b bf       	out	0x3b, r16	; 59
     23a:	02 c0       	rjmp	.+4      	; 0x240 <__do_copy_data+0x14>
     23c:	07 90       	elpm	r0, Z+
     23e:	0d 92       	st	X+, r0
     240:	a4 3d       	cpi	r26, 0xD4	; 212
     242:	b1 07       	cpc	r27, r17
     244:	d9 f7       	brne	.-10     	; 0x23c <__do_copy_data+0x10>
     246:	1b be       	out	0x3b, r1	; 59

00000248 <__do_clear_bss>:
     248:	1a e0       	ldi	r17, 0x0A	; 10
     24a:	a4 ed       	ldi	r26, 0xD4	; 212
     24c:	b4 e0       	ldi	r27, 0x04	; 4
     24e:	01 c0       	rjmp	.+2      	; 0x252 <.do_clear_bss_start>

00000250 <.do_clear_bss_loop>:
     250:	1d 92       	st	X+, r1

00000252 <.do_clear_bss_start>:
     252:	a2 31       	cpi	r26, 0x12	; 18
     254:	b1 07       	cpc	r27, r17
     256:	e1 f7       	brne	.-8      	; 0x250 <.do_clear_bss_loop>

00000258 <__do_global_ctors>:
     258:	12 e0       	ldi	r17, 0x02	; 2
     25a:	ca e1       	ldi	r28, 0x1A	; 26
     25c:	d2 e0       	ldi	r29, 0x02	; 2
     25e:	00 e0       	ldi	r16, 0x00	; 0
     260:	06 c0       	rjmp	.+12     	; 0x26e <__do_global_ctors+0x16>
     262:	22 97       	sbiw	r28, 0x02	; 2
     264:	01 09       	sbc	r16, r1
     266:	fe 01       	movw	r30, r28
     268:	0b bf       	out	0x3b, r16	; 59
     26a:	0e 94 3d 22 	call	0x447a	; 0x447a <__tablejump_elpm__>
     26e:	c4 31       	cpi	r28, 0x14	; 20
     270:	d1 07       	cpc	r29, r17
     272:	80 e0       	ldi	r24, 0x00	; 0
     274:	08 07       	cpc	r16, r24
     276:	a9 f7       	brne	.-22     	; 0x262 <__do_global_ctors+0xa>
     278:	1b be       	out	0x3b, r1	; 59
     27a:	0e 94 61 20 	call	0x40c2	; 0x40c2 <main>
     27e:	0c 94 68 22 	jmp	0x44d0	; 0x44d0 <__do_global_dtors>

00000282 <__bad_interrupt>:
     282:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000286 <_ZN3EDB8edbWriteEmPKhj>:
/**************************************************/
// private functions

// low level byte write
void EDB::edbWrite(unsigned long ee, const byte* p, unsigned int recsize)
{
     286:	4f 92       	push	r4
     288:	5f 92       	push	r5
     28a:	6f 92       	push	r6
     28c:	7f 92       	push	r7
     28e:	8f 92       	push	r8
     290:	9f 92       	push	r9
     292:	af 92       	push	r10
     294:	bf 92       	push	r11
     296:	cf 92       	push	r12
     298:	df 92       	push	r13
     29a:	ef 92       	push	r14
     29c:	ff 92       	push	r15
     29e:	0f 93       	push	r16
     2a0:	1f 93       	push	r17
     2a2:	cf 93       	push	r28
     2a4:	df 93       	push	r29
     2a6:	2c 01       	movw	r4, r24
     2a8:	4a 01       	movw	r8, r20
     2aa:	5b 01       	movw	r10, r22
     2ac:	e9 01       	movw	r28, r18
     2ae:	38 01       	movw	r6, r16
  for (unsigned int i = 0; i < recsize; i++)
     2b0:	8a 01       	movw	r16, r20
     2b2:	9b 01       	movw	r18, r22
     2b4:	12 c0       	rjmp	.+36     	; 0x2da <_ZN3EDB8edbWriteEmPKhj+0x54>
    _write_byte(ee++, *p++);
     2b6:	68 01       	movw	r12, r16
     2b8:	79 01       	movw	r14, r18
     2ba:	08 94       	sec
     2bc:	c1 1c       	adc	r12, r1
     2be:	d1 1c       	adc	r13, r1
     2c0:	e1 1c       	adc	r14, r1
     2c2:	f1 1c       	adc	r15, r1
     2c4:	49 91       	ld	r20, Y+
     2c6:	d2 01       	movw	r26, r4
     2c8:	18 96       	adiw	r26, 0x08	; 8
     2ca:	ed 91       	ld	r30, X+
     2cc:	fc 91       	ld	r31, X
     2ce:	19 97       	sbiw	r26, 0x09	; 9
     2d0:	c9 01       	movw	r24, r18
     2d2:	b8 01       	movw	r22, r16
     2d4:	19 95       	eicall
     2d6:	97 01       	movw	r18, r14
     2d8:	86 01       	movw	r16, r12
// private functions

// low level byte write
void EDB::edbWrite(unsigned long ee, const byte* p, unsigned int recsize)
{
  for (unsigned int i = 0; i < recsize; i++)
     2da:	c8 01       	movw	r24, r16
     2dc:	88 19       	sub	r24, r8
     2de:	99 09       	sbc	r25, r9
     2e0:	86 15       	cp	r24, r6
     2e2:	97 05       	cpc	r25, r7
     2e4:	40 f3       	brcs	.-48     	; 0x2b6 <_ZN3EDB8edbWriteEmPKhj+0x30>
    _write_byte(ee++, *p++);
}
     2e6:	df 91       	pop	r29
     2e8:	cf 91       	pop	r28
     2ea:	1f 91       	pop	r17
     2ec:	0f 91       	pop	r16
     2ee:	ff 90       	pop	r15
     2f0:	ef 90       	pop	r14
     2f2:	df 90       	pop	r13
     2f4:	cf 90       	pop	r12
     2f6:	bf 90       	pop	r11
     2f8:	af 90       	pop	r10
     2fa:	9f 90       	pop	r9
     2fc:	8f 90       	pop	r8
     2fe:	7f 90       	pop	r7
     300:	6f 90       	pop	r6
     302:	5f 90       	pop	r5
     304:	4f 90       	pop	r4
     306:	08 95       	ret

00000308 <_ZN3EDB7edbReadEmPhj>:

// low level byte read
void EDB::edbRead(unsigned long ee, byte* p, unsigned int recsize)
{  
     308:	6f 92       	push	r6
     30a:	7f 92       	push	r7
     30c:	8f 92       	push	r8
     30e:	9f 92       	push	r9
     310:	af 92       	push	r10
     312:	bf 92       	push	r11
     314:	cf 92       	push	r12
     316:	df 92       	push	r13
     318:	ef 92       	push	r14
     31a:	ff 92       	push	r15
     31c:	0f 93       	push	r16
     31e:	1f 93       	push	r17
     320:	cf 93       	push	r28
     322:	df 93       	push	r29
     324:	3c 01       	movw	r6, r24
     326:	4a 01       	movw	r8, r20
     328:	5b 01       	movw	r10, r22
     32a:	e9 01       	movw	r28, r18
  for (unsigned i = 0; i < recsize; i++)
     32c:	12 c0       	rjmp	.+36     	; 0x352 <_ZN3EDB7edbReadEmPhj+0x4a>
    *p++ = _read_byte(ee++);
     32e:	6a 01       	movw	r12, r20
     330:	7b 01       	movw	r14, r22
     332:	08 94       	sec
     334:	c1 1c       	adc	r12, r1
     336:	d1 1c       	adc	r13, r1
     338:	e1 1c       	adc	r14, r1
     33a:	f1 1c       	adc	r15, r1
     33c:	d3 01       	movw	r26, r6
     33e:	1a 96       	adiw	r26, 0x0a	; 10
     340:	ed 91       	ld	r30, X+
     342:	fc 91       	ld	r31, X
     344:	1b 97       	sbiw	r26, 0x0b	; 11
     346:	cb 01       	movw	r24, r22
     348:	ba 01       	movw	r22, r20
     34a:	19 95       	eicall
     34c:	89 93       	st	Y+, r24
     34e:	b7 01       	movw	r22, r14
     350:	a6 01       	movw	r20, r12
}

// low level byte read
void EDB::edbRead(unsigned long ee, byte* p, unsigned int recsize)
{  
  for (unsigned i = 0; i < recsize; i++)
     352:	ca 01       	movw	r24, r20
     354:	88 19       	sub	r24, r8
     356:	99 09       	sbc	r25, r9
     358:	80 17       	cp	r24, r16
     35a:	91 07       	cpc	r25, r17
     35c:	40 f3       	brcs	.-48     	; 0x32e <_ZN3EDB7edbReadEmPhj+0x26>
    *p++ = _read_byte(ee++);
}
     35e:	df 91       	pop	r29
     360:	cf 91       	pop	r28
     362:	1f 91       	pop	r17
     364:	0f 91       	pop	r16
     366:	ff 90       	pop	r15
     368:	ef 90       	pop	r14
     36a:	df 90       	pop	r13
     36c:	cf 90       	pop	r12
     36e:	bf 90       	pop	r11
     370:	af 90       	pop	r10
     372:	9f 90       	pop	r9
     374:	8f 90       	pop	r8
     376:	7f 90       	pop	r7
     378:	6f 90       	pop	r6
     37a:	08 95       	ret

0000037c <_ZN3EDB9writeHeadEv>:

// writes EDB_Header
void EDB::writeHead()
{
     37c:	0f 93       	push	r16
     37e:	1f 93       	push	r17
  edbWrite(EDB_head_ptr, EDB_REC EDB_head, (unsigned long)sizeof(EDB_Header));
     380:	fc 01       	movw	r30, r24
     382:	40 81       	ld	r20, Z
     384:	51 81       	ldd	r21, Z+1	; 0x01
     386:	62 81       	ldd	r22, Z+2	; 0x02
     388:	73 81       	ldd	r23, Z+3	; 0x03
     38a:	9c 01       	movw	r18, r24
     38c:	24 5f       	subi	r18, 0xF4	; 244
     38e:	3f 4f       	sbci	r19, 0xFF	; 255
     390:	0a e0       	ldi	r16, 0x0A	; 10
     392:	10 e0       	ldi	r17, 0x00	; 0
     394:	0e 94 43 01 	call	0x286	; 0x286 <_ZN3EDB8edbWriteEmPKhj>
}
     398:	1f 91       	pop	r17
     39a:	0f 91       	pop	r16
     39c:	08 95       	ret

0000039e <_ZN3EDB8readHeadEv>:

// reads EDB_Header
void EDB::readHead()
{
     39e:	0f 93       	push	r16
     3a0:	1f 93       	push	r17
  edbRead(EDB_head_ptr, EDB_REC EDB_head, (unsigned long)sizeof(EDB_Header));
     3a2:	fc 01       	movw	r30, r24
     3a4:	40 81       	ld	r20, Z
     3a6:	51 81       	ldd	r21, Z+1	; 0x01
     3a8:	62 81       	ldd	r22, Z+2	; 0x02
     3aa:	73 81       	ldd	r23, Z+3	; 0x03
     3ac:	9c 01       	movw	r18, r24
     3ae:	24 5f       	subi	r18, 0xF4	; 244
     3b0:	3f 4f       	sbci	r19, 0xFF	; 255
     3b2:	0a e0       	ldi	r16, 0x0A	; 10
     3b4:	10 e0       	ldi	r17, 0x00	; 0
     3b6:	0e 94 84 01 	call	0x308	; 0x308 <_ZN3EDB7edbReadEmPhj>
}
     3ba:	1f 91       	pop	r17
     3bc:	0f 91       	pop	r16
     3be:	08 95       	ret

000003c0 <_ZN3EDBC1EPFvmhEPFhmE>:

/**************************************************/
// public functions

EDB::EDB(EDB_Write_Handler *w, EDB_Read_Handler *r)
     3c0:	fc 01       	movw	r30, r24
{
  _write_byte = w;
     3c2:	71 87       	std	Z+9, r23	; 0x09
     3c4:	60 87       	std	Z+8, r22	; 0x08
  _read_byte = r;
     3c6:	53 87       	std	Z+11, r21	; 0x0b
     3c8:	42 87       	std	Z+10, r20	; 0x0a
}
     3ca:	08 95       	ret

000003cc <_ZN3EDB6createEmmj>:

// creates a new table and sets header values 
EDB_Status EDB::create(unsigned long head_ptr, unsigned long tablesize, unsigned int recsize)
{
     3cc:	ef 92       	push	r14
     3ce:	ff 92       	push	r15
     3d0:	0f 93       	push	r16
     3d2:	1f 93       	push	r17
     3d4:	fc 01       	movw	r30, r24
  EDB_head_ptr = head_ptr;
     3d6:	40 83       	st	Z, r20
     3d8:	51 83       	std	Z+1, r21	; 0x01
     3da:	62 83       	std	Z+2, r22	; 0x02
     3dc:	73 83       	std	Z+3, r23	; 0x03
  EDB_table_ptr = sizeof(EDB_Header) + EDB_head_ptr;
     3de:	46 5f       	subi	r20, 0xF6	; 246
     3e0:	5f 4f       	sbci	r21, 0xFF	; 255
     3e2:	6f 4f       	sbci	r22, 0xFF	; 255
     3e4:	7f 4f       	sbci	r23, 0xFF	; 255
     3e6:	44 83       	std	Z+4, r20	; 0x04
     3e8:	55 83       	std	Z+5, r21	; 0x05
     3ea:	66 83       	std	Z+6, r22	; 0x06
     3ec:	77 83       	std	Z+7, r23	; 0x07
  EDB_head.n_recs = 0;
     3ee:	14 86       	std	Z+12, r1	; 0x0c
     3f0:	15 86       	std	Z+13, r1	; 0x0d
     3f2:	16 86       	std	Z+14, r1	; 0x0e
     3f4:	17 86       	std	Z+15, r1	; 0x0f
  EDB_head.rec_size = recsize;
     3f6:	f1 8a       	std	Z+17, r15	; 0x11
     3f8:	e0 8a       	std	Z+16, r14	; 0x10
  EDB_head.table_size = tablesize;
     3fa:	02 8b       	std	Z+18, r16	; 0x12
     3fc:	13 8b       	std	Z+19, r17	; 0x13
     3fe:	24 8b       	std	Z+20, r18	; 0x14
     400:	35 8b       	std	Z+21, r19	; 0x15
  writeHead();
     402:	0e 94 be 01 	call	0x37c	; 0x37c <_ZN3EDB9writeHeadEv>
  return EDB_OK;
}
     406:	80 e0       	ldi	r24, 0x00	; 0
     408:	1f 91       	pop	r17
     40a:	0f 91       	pop	r16
     40c:	ff 90       	pop	r15
     40e:	ef 90       	pop	r14
     410:	08 95       	ret

00000412 <_ZN3EDB4openEm>:

// reads an existing edb header at a given recno and sets header values
EDB_Status EDB::open(unsigned long head_ptr)
{
  EDB_head_ptr = head_ptr;
     412:	fc 01       	movw	r30, r24
     414:	40 83       	st	Z, r20
     416:	51 83       	std	Z+1, r21	; 0x01
     418:	62 83       	std	Z+2, r22	; 0x02
     41a:	73 83       	std	Z+3, r23	; 0x03
  readHead();
     41c:	0e 94 cf 01 	call	0x39e	; 0x39e <_ZN3EDB8readHeadEv>
  return EDB_OK;
}
     420:	80 e0       	ldi	r24, 0x00	; 0
     422:	08 95       	ret

00000424 <_ZN3EDB8writeRecEmPh>:

// writes a record to a given recno
EDB_Status EDB::writeRec(unsigned long recno, const EDB_Rec rec)
{
     424:	cf 92       	push	r12
     426:	df 92       	push	r13
     428:	ef 92       	push	r14
     42a:	ff 92       	push	r15
     42c:	0f 93       	push	r16
     42e:	1f 93       	push	r17
     430:	cf 93       	push	r28
     432:	df 93       	push	r29
     434:	ec 01       	movw	r28, r24
     436:	69 01       	movw	r12, r18
  edbWrite(EDB_table_ptr + ((recno - 1) * EDB_head.rec_size), rec, EDB_head.rec_size);
     438:	e8 88       	ldd	r14, Y+16	; 0x10
     43a:	f9 88       	ldd	r15, Y+17	; 0x11
     43c:	41 50       	subi	r20, 0x01	; 1
     43e:	50 40       	sbci	r21, 0x00	; 0
     440:	60 40       	sbci	r22, 0x00	; 0
     442:	70 40       	sbci	r23, 0x00	; 0
     444:	87 01       	movw	r16, r14
     446:	20 e0       	ldi	r18, 0x00	; 0
     448:	30 e0       	ldi	r19, 0x00	; 0
     44a:	cb 01       	movw	r24, r22
     44c:	ba 01       	movw	r22, r20
     44e:	a9 01       	movw	r20, r18
     450:	98 01       	movw	r18, r16
     452:	0e 94 d5 21 	call	0x43aa	; 0x43aa <__mulsi3>
     456:	ab 01       	movw	r20, r22
     458:	bc 01       	movw	r22, r24
     45a:	8c 81       	ldd	r24, Y+4	; 0x04
     45c:	9d 81       	ldd	r25, Y+5	; 0x05
     45e:	ae 81       	ldd	r26, Y+6	; 0x06
     460:	bf 81       	ldd	r27, Y+7	; 0x07
     462:	48 0f       	add	r20, r24
     464:	59 1f       	adc	r21, r25
     466:	6a 1f       	adc	r22, r26
     468:	7b 1f       	adc	r23, r27
     46a:	ce 01       	movw	r24, r28
     46c:	96 01       	movw	r18, r12
     46e:	87 01       	movw	r16, r14
     470:	0e 94 43 01 	call	0x286	; 0x286 <_ZN3EDB8edbWriteEmPKhj>
  return EDB_OK;
}
     474:	80 e0       	ldi	r24, 0x00	; 0
     476:	df 91       	pop	r29
     478:	cf 91       	pop	r28
     47a:	1f 91       	pop	r17
     47c:	0f 91       	pop	r16
     47e:	ff 90       	pop	r15
     480:	ef 90       	pop	r14
     482:	df 90       	pop	r13
     484:	cf 90       	pop	r12
     486:	08 95       	ret

00000488 <_ZN3EDB7readRecEmPh>:

// reads a record from a given recno
EDB_Status EDB::readRec(unsigned long recno, EDB_Rec rec)
{
     488:	ef 92       	push	r14
     48a:	ff 92       	push	r15
     48c:	0f 93       	push	r16
     48e:	1f 93       	push	r17
     490:	cf 93       	push	r28
     492:	df 93       	push	r29
     494:	ec 01       	movw	r28, r24
     496:	79 01       	movw	r14, r18
  if (recno < 1 || recno > EDB_head.n_recs) return EDB_OUT_OF_RANGE;
     498:	41 15       	cp	r20, r1
     49a:	51 05       	cpc	r21, r1
     49c:	61 05       	cpc	r22, r1
     49e:	71 05       	cpc	r23, r1
     4a0:	31 f1       	breq	.+76     	; 0x4ee <_ZN3EDB7readRecEmPh+0x66>
     4a2:	8c 85       	ldd	r24, Y+12	; 0x0c
     4a4:	9d 85       	ldd	r25, Y+13	; 0x0d
     4a6:	ae 85       	ldd	r26, Y+14	; 0x0e
     4a8:	bf 85       	ldd	r27, Y+15	; 0x0f
     4aa:	84 17       	cp	r24, r20
     4ac:	95 07       	cpc	r25, r21
     4ae:	a6 07       	cpc	r26, r22
     4b0:	b7 07       	cpc	r27, r23
     4b2:	e8 f0       	brcs	.+58     	; 0x4ee <_ZN3EDB7readRecEmPh+0x66>
  edbRead(EDB_table_ptr + ((recno - 1) * EDB_head.rec_size), rec, EDB_head.rec_size);
     4b4:	08 89       	ldd	r16, Y+16	; 0x10
     4b6:	19 89       	ldd	r17, Y+17	; 0x11
     4b8:	cb 01       	movw	r24, r22
     4ba:	ba 01       	movw	r22, r20
     4bc:	61 50       	subi	r22, 0x01	; 1
     4be:	70 40       	sbci	r23, 0x00	; 0
     4c0:	80 40       	sbci	r24, 0x00	; 0
     4c2:	90 40       	sbci	r25, 0x00	; 0
     4c4:	98 01       	movw	r18, r16
     4c6:	40 e0       	ldi	r20, 0x00	; 0
     4c8:	50 e0       	ldi	r21, 0x00	; 0
     4ca:	0e 94 d5 21 	call	0x43aa	; 0x43aa <__mulsi3>
     4ce:	ab 01       	movw	r20, r22
     4d0:	bc 01       	movw	r22, r24
     4d2:	8c 81       	ldd	r24, Y+4	; 0x04
     4d4:	9d 81       	ldd	r25, Y+5	; 0x05
     4d6:	ae 81       	ldd	r26, Y+6	; 0x06
     4d8:	bf 81       	ldd	r27, Y+7	; 0x07
     4da:	48 0f       	add	r20, r24
     4dc:	59 1f       	adc	r21, r25
     4de:	6a 1f       	adc	r22, r26
     4e0:	7b 1f       	adc	r23, r27
     4e2:	ce 01       	movw	r24, r28
     4e4:	97 01       	movw	r18, r14
     4e6:	0e 94 84 01 	call	0x308	; 0x308 <_ZN3EDB7edbReadEmPhj>
     4ea:	80 e0       	ldi	r24, 0x00	; 0
     4ec:	01 c0       	rjmp	.+2      	; 0x4f0 <_ZN3EDB7readRecEmPh+0x68>
}

// reads a record from a given recno
EDB_Status EDB::readRec(unsigned long recno, EDB_Rec rec)
{
  if (recno < 1 || recno > EDB_head.n_recs) return EDB_OUT_OF_RANGE;
     4ee:	81 e0       	ldi	r24, 0x01	; 1
  edbRead(EDB_table_ptr + ((recno - 1) * EDB_head.rec_size), rec, EDB_head.rec_size);
  return EDB_OK;
}
     4f0:	df 91       	pop	r29
     4f2:	cf 91       	pop	r28
     4f4:	1f 91       	pop	r17
     4f6:	0f 91       	pop	r16
     4f8:	ff 90       	pop	r15
     4fa:	ef 90       	pop	r14
     4fc:	08 95       	ret

000004fe <_ZN3EDB9deleteRecEm>:

// Deletes a record at a given recno
// Becomes more inefficient as you the record set increases and you delete records 
// early in the record queue.
EDB_Status EDB::deleteRec(unsigned long recno)
{
     4fe:	8f 92       	push	r8
     500:	9f 92       	push	r9
     502:	af 92       	push	r10
     504:	bf 92       	push	r11
     506:	cf 92       	push	r12
     508:	df 92       	push	r13
     50a:	ef 92       	push	r14
     50c:	ff 92       	push	r15
     50e:	0f 93       	push	r16
     510:	1f 93       	push	r17
     512:	cf 93       	push	r28
     514:	df 93       	push	r29
     516:	ec 01       	movw	r28, r24
     518:	4a 01       	movw	r8, r20
     51a:	5b 01       	movw	r10, r22
  if (recno < 0 || recno > EDB_head.n_recs) return  EDB_OUT_OF_RANGE;
     51c:	8c 85       	ldd	r24, Y+12	; 0x0c
     51e:	9d 85       	ldd	r25, Y+13	; 0x0d
     520:	ae 85       	ldd	r26, Y+14	; 0x0e
     522:	bf 85       	ldd	r27, Y+15	; 0x0f
     524:	84 17       	cp	r24, r20
     526:	95 07       	cpc	r25, r21
     528:	a6 07       	cpc	r26, r22
     52a:	b7 07       	cpc	r27, r23
     52c:	d8 f1       	brcs	.+118    	; 0x5a4 <_ZN3EDB9deleteRecEm+0xa6>
  EDB_Rec rec = (byte*)malloc(EDB_head.rec_size);
     52e:	88 89       	ldd	r24, Y+16	; 0x10
     530:	99 89       	ldd	r25, Y+17	; 0x11
     532:	0e 94 c4 18 	call	0x3188	; 0x3188 <malloc>
     536:	18 2f       	mov	r17, r24
     538:	09 2f       	mov	r16, r25
  for (unsigned long i = recno + 1; i <= EDB_head.n_recs; i++)
     53a:	10 c0       	rjmp	.+32     	; 0x55c <_ZN3EDB9deleteRecEm+0x5e>
  {
    readRec(i, rec);
     53c:	ce 01       	movw	r24, r28
     53e:	b7 01       	movw	r22, r14
     540:	a6 01       	movw	r20, r12
     542:	21 2f       	mov	r18, r17
     544:	30 2f       	mov	r19, r16
     546:	0e 94 44 02 	call	0x488	; 0x488 <_ZN3EDB7readRecEmPh>
    writeRec(i - 1, rec);
     54a:	ce 01       	movw	r24, r28
     54c:	b5 01       	movw	r22, r10
     54e:	a4 01       	movw	r20, r8
     550:	21 2f       	mov	r18, r17
     552:	30 2f       	mov	r19, r16
     554:	0e 94 12 02 	call	0x424	; 0x424 <_ZN3EDB8writeRecEmPh>
     558:	46 01       	movw	r8, r12
     55a:	57 01       	movw	r10, r14
     55c:	75 01       	movw	r14, r10
     55e:	64 01       	movw	r12, r8
     560:	08 94       	sec
     562:	c1 1c       	adc	r12, r1
     564:	d1 1c       	adc	r13, r1
     566:	e1 1c       	adc	r14, r1
     568:	f1 1c       	adc	r15, r1
// early in the record queue.
EDB_Status EDB::deleteRec(unsigned long recno)
{
  if (recno < 0 || recno > EDB_head.n_recs) return  EDB_OUT_OF_RANGE;
  EDB_Rec rec = (byte*)malloc(EDB_head.rec_size);
  for (unsigned long i = recno + 1; i <= EDB_head.n_recs; i++)
     56a:	8c 85       	ldd	r24, Y+12	; 0x0c
     56c:	9d 85       	ldd	r25, Y+13	; 0x0d
     56e:	ae 85       	ldd	r26, Y+14	; 0x0e
     570:	bf 85       	ldd	r27, Y+15	; 0x0f
     572:	8c 15       	cp	r24, r12
     574:	9d 05       	cpc	r25, r13
     576:	ae 05       	cpc	r26, r14
     578:	bf 05       	cpc	r27, r15
     57a:	00 f7       	brcc	.-64     	; 0x53c <_ZN3EDB9deleteRecEm+0x3e>
  {
    readRec(i, rec);
    writeRec(i - 1, rec);
  }  
  free(rec);
     57c:	81 2f       	mov	r24, r17
     57e:	90 2f       	mov	r25, r16
     580:	0e 94 61 19 	call	0x32c2	; 0x32c2 <free>
  EDB_head.n_recs--;
     584:	8c 85       	ldd	r24, Y+12	; 0x0c
     586:	9d 85       	ldd	r25, Y+13	; 0x0d
     588:	ae 85       	ldd	r26, Y+14	; 0x0e
     58a:	bf 85       	ldd	r27, Y+15	; 0x0f
     58c:	01 97       	sbiw	r24, 0x01	; 1
     58e:	a1 09       	sbc	r26, r1
     590:	b1 09       	sbc	r27, r1
     592:	8c 87       	std	Y+12, r24	; 0x0c
     594:	9d 87       	std	Y+13, r25	; 0x0d
     596:	ae 87       	std	Y+14, r26	; 0x0e
     598:	bf 87       	std	Y+15, r27	; 0x0f
  writeHead();
     59a:	ce 01       	movw	r24, r28
     59c:	0e 94 be 01 	call	0x37c	; 0x37c <_ZN3EDB9writeHeadEv>
  return EDB_OK;
     5a0:	80 e0       	ldi	r24, 0x00	; 0
     5a2:	01 c0       	rjmp	.+2      	; 0x5a6 <_ZN3EDB9deleteRecEm+0xa8>
// Deletes a record at a given recno
// Becomes more inefficient as you the record set increases and you delete records 
// early in the record queue.
EDB_Status EDB::deleteRec(unsigned long recno)
{
  if (recno < 0 || recno > EDB_head.n_recs) return  EDB_OUT_OF_RANGE;
     5a4:	81 e0       	ldi	r24, 0x01	; 1
  }  
  free(rec);
  EDB_head.n_recs--;
  writeHead();
  return EDB_OK;
}
     5a6:	df 91       	pop	r29
     5a8:	cf 91       	pop	r28
     5aa:	1f 91       	pop	r17
     5ac:	0f 91       	pop	r16
     5ae:	ff 90       	pop	r15
     5b0:	ef 90       	pop	r14
     5b2:	df 90       	pop	r13
     5b4:	cf 90       	pop	r12
     5b6:	bf 90       	pop	r11
     5b8:	af 90       	pop	r10
     5ba:	9f 90       	pop	r9
     5bc:	8f 90       	pop	r8
     5be:	08 95       	ret

000005c0 <_ZN3EDB9appendRecEPh>:
}

// Adds a record to the end of the record set.
// This is the fastest way to add a record.
EDB_Status EDB::appendRec(EDB_Rec rec)
{
     5c0:	cf 92       	push	r12
     5c2:	df 92       	push	r13
     5c4:	ef 92       	push	r14
     5c6:	ff 92       	push	r15
     5c8:	0f 93       	push	r16
     5ca:	1f 93       	push	r17
     5cc:	cf 93       	push	r28
     5ce:	df 93       	push	r29
     5d0:	ec 01       	movw	r28, r24
     5d2:	8b 01       	movw	r16, r22
  if (EDB_head.n_recs + 1 > limit()) return EDB_TABLE_FULL;
     5d4:	cc 84       	ldd	r12, Y+12	; 0x0c
     5d6:	dd 84       	ldd	r13, Y+13	; 0x0d
     5d8:	ee 84       	ldd	r14, Y+14	; 0x0e
     5da:	ff 84       	ldd	r15, Y+15	; 0x0f
     5dc:	08 94       	sec
     5de:	c1 1c       	adc	r12, r1
     5e0:	d1 1c       	adc	r13, r1
     5e2:	e1 1c       	adc	r14, r1
     5e4:	f1 1c       	adc	r15, r1
}

// returns the maximum number of items that will fit into the queue
unsigned long EDB::limit()
{
   return (EDB_head.table_size - EDB_table_ptr) / EDB_head.rec_size;
     5e6:	8a 89       	ldd	r24, Y+18	; 0x12
     5e8:	9b 89       	ldd	r25, Y+19	; 0x13
     5ea:	ac 89       	ldd	r26, Y+20	; 0x14
     5ec:	bd 89       	ldd	r27, Y+21	; 0x15
     5ee:	4c 81       	ldd	r20, Y+4	; 0x04
     5f0:	5d 81       	ldd	r21, Y+5	; 0x05
     5f2:	6e 81       	ldd	r22, Y+6	; 0x06
     5f4:	7f 81       	ldd	r23, Y+7	; 0x07
     5f6:	84 1b       	sub	r24, r20
     5f8:	95 0b       	sbc	r25, r21
     5fa:	a6 0b       	sbc	r26, r22
     5fc:	b7 0b       	sbc	r27, r23
     5fe:	28 89       	ldd	r18, Y+16	; 0x10
     600:	39 89       	ldd	r19, Y+17	; 0x11
     602:	40 e0       	ldi	r20, 0x00	; 0
     604:	50 e0       	ldi	r21, 0x00	; 0
     606:	bc 01       	movw	r22, r24
     608:	cd 01       	movw	r24, r26
     60a:	0e 94 07 22 	call	0x440e	; 0x440e <__udivmodsi4>

// Adds a record to the end of the record set.
// This is the fastest way to add a record.
EDB_Status EDB::appendRec(EDB_Rec rec)
{
  if (EDB_head.n_recs + 1 > limit()) return EDB_TABLE_FULL;
     60e:	2c 15       	cp	r18, r12
     610:	3d 05       	cpc	r19, r13
     612:	4e 05       	cpc	r20, r14
     614:	5f 05       	cpc	r21, r15
     616:	78 f0       	brcs	.+30     	; 0x636 <_ZN3EDB9appendRecEPh+0x76>
  EDB_head.n_recs++;
     618:	cc 86       	std	Y+12, r12	; 0x0c
     61a:	dd 86       	std	Y+13, r13	; 0x0d
     61c:	ee 86       	std	Y+14, r14	; 0x0e
     61e:	ff 86       	std	Y+15, r15	; 0x0f
  writeRec(EDB_head.n_recs,rec);
     620:	ce 01       	movw	r24, r28
     622:	b7 01       	movw	r22, r14
     624:	a6 01       	movw	r20, r12
     626:	98 01       	movw	r18, r16
     628:	0e 94 12 02 	call	0x424	; 0x424 <_ZN3EDB8writeRecEmPh>
  writeHead();
     62c:	ce 01       	movw	r24, r28
     62e:	0e 94 be 01 	call	0x37c	; 0x37c <_ZN3EDB9writeHeadEv>
  return EDB_OK;
     632:	80 e0       	ldi	r24, 0x00	; 0
     634:	01 c0       	rjmp	.+2      	; 0x638 <_ZN3EDB9appendRecEPh+0x78>

// Adds a record to the end of the record set.
// This is the fastest way to add a record.
EDB_Status EDB::appendRec(EDB_Rec rec)
{
  if (EDB_head.n_recs + 1 > limit()) return EDB_TABLE_FULL;
     636:	82 e0       	ldi	r24, 0x02	; 2
  EDB_head.n_recs++;
  writeRec(EDB_head.n_recs,rec);
  writeHead();
  return EDB_OK;
}
     638:	df 91       	pop	r29
     63a:	cf 91       	pop	r28
     63c:	1f 91       	pop	r17
     63e:	0f 91       	pop	r16
     640:	ff 90       	pop	r15
     642:	ef 90       	pop	r14
     644:	df 90       	pop	r13
     646:	cf 90       	pop	r12
     648:	08 95       	ret

0000064a <_ZN3EDB5countEv>:

// returns the number of queued items
unsigned long EDB::count()
{
     64a:	fc 01       	movw	r30, r24
  return EDB_head.n_recs;
     64c:	64 85       	ldd	r22, Z+12	; 0x0c
     64e:	75 85       	ldd	r23, Z+13	; 0x0d
}
     650:	86 85       	ldd	r24, Z+14	; 0x0e
     652:	97 85       	ldd	r25, Z+15	; 0x0f
     654:	08 95       	ret

00000656 <_Z10whileInputbiiRjib>:
 */ 
#include "Arduino.h"
#include "IOUtilities.h"

bool whileInput(bool whileTrueOrFalse, int inputNO, int timeOut, unsigned int &acc, int timeResolutionMS, bool withTimeout)
{
     656:	6f 92       	push	r6
     658:	7f 92       	push	r7
     65a:	8f 92       	push	r8
     65c:	9f 92       	push	r9
     65e:	af 92       	push	r10
     660:	bf 92       	push	r11
     662:	cf 92       	push	r12
     664:	df 92       	push	r13
     666:	ef 92       	push	r14
     668:	ff 92       	push	r15
     66a:	0f 93       	push	r16
     66c:	1f 93       	push	r17
     66e:	cf 93       	push	r28
     670:	df 93       	push	r29
     672:	0f 92       	push	r0
     674:	cd b7       	in	r28, 0x3d	; 61
     676:	de b7       	in	r29, 0x3e	; 62
     678:	f8 2e       	mov	r15, r24
     67a:	4a 01       	movw	r8, r20
     67c:	69 01       	movw	r12, r18
	acc = 0;
     67e:	f9 01       	movw	r30, r18
     680:	11 82       	std	Z+1, r1	; 0x01
     682:	10 82       	st	Z, r1
     684:	81 e0       	ldi	r24, 0x01	; 1
     686:	a8 2e       	mov	r10, r24
     688:	b1 2c       	mov	r11, r1
     68a:	06 2e       	mov	r0, r22
     68c:	02 c0       	rjmp	.+4      	; 0x692 <_Z10whileInputbiiRjib+0x3c>
     68e:	aa 0c       	add	r10, r10
     690:	bb 1c       	adc	r11, r11
     692:	0a 94       	dec	r0
     694:	e2 f7       	brpl	.-8      	; 0x68e <_Z10whileInputbiiRjib+0x38>
	while
     696:	16 c0       	rjmp	.+44     	; 0x6c4 <_Z10whileInputbiiRjib+0x6e>
	( (!whileTrueOrFalse) && !(PIND & _BV(inputNO)) )
	)
	{
		if (withTimeout)
		{
			if ( (acc >= timeOut) )
     698:	f6 01       	movw	r30, r12
     69a:	80 81       	ld	r24, Z
     69c:	91 81       	ldd	r25, Z+1	; 0x01
     69e:	88 15       	cp	r24, r8
     6a0:	99 05       	cpc	r25, r9
     6a2:	20 f0       	brcs	.+8      	; 0x6ac <_Z10whileInputbiiRjib+0x56>
			{
				acc = 0;
     6a4:	11 82       	std	Z+1, r1	; 0x01
     6a6:	10 82       	st	Z, r1
				return false;
     6a8:	80 e0       	ldi	r24, 0x00	; 0
     6aa:	21 c0       	rjmp	.+66     	; 0x6ee <_Z10whileInputbiiRjib+0x98>
			}

			delayMicroseconds(timeResolutionMS);
     6ac:	c8 01       	movw	r24, r16
     6ae:	69 83       	std	Y+1, r22	; 0x01
     6b0:	0e 94 4f 1a 	call	0x349e	; 0x349e <delayMicroseconds>
			acc = acc + timeResolutionMS;
     6b4:	f6 01       	movw	r30, r12
     6b6:	80 81       	ld	r24, Z
     6b8:	91 81       	ldd	r25, Z+1	; 0x01
     6ba:	80 0f       	add	r24, r16
     6bc:	91 1f       	adc	r25, r17
     6be:	91 83       	std	Z+1, r25	; 0x01
     6c0:	80 83       	st	Z, r24
     6c2:	69 81       	ldd	r22, Y+1	; 0x01
#include "IOUtilities.h"

bool whileInput(bool whileTrueOrFalse, int inputNO, int timeOut, unsigned int &acc, int timeResolutionMS, bool withTimeout)
{
	acc = 0;
	while
     6c4:	89 b1       	in	r24, 0x09	; 9
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	ff 20       	and	r15, r15
     6ca:	29 f0       	breq	.+10     	; 0x6d6 <_Z10whileInputbiiRjib+0x80>
     6cc:	8a 21       	and	r24, r10
     6ce:	9b 21       	and	r25, r11
     6d0:	00 97       	sbiw	r24, 0x00	; 0
     6d2:	49 f4       	brne	.+18     	; 0x6e6 <_Z10whileInputbiiRjib+0x90>
     6d4:	0b c0       	rjmp	.+22     	; 0x6ec <_Z10whileInputbiiRjib+0x96>
	(
	( (whileTrueOrFalse)  &&  (PIND & _BV(inputNO)) )
	||
	( (!whileTrueOrFalse) && !(PIND & _BV(inputNO)) )
     6d6:	06 2e       	mov	r0, r22
     6d8:	02 c0       	rjmp	.+4      	; 0x6de <_Z10whileInputbiiRjib+0x88>
     6da:	95 95       	asr	r25
     6dc:	87 95       	ror	r24
     6de:	0a 94       	dec	r0
     6e0:	e2 f7       	brpl	.-8      	; 0x6da <_Z10whileInputbiiRjib+0x84>
#include "IOUtilities.h"

bool whileInput(bool whileTrueOrFalse, int inputNO, int timeOut, unsigned int &acc, int timeResolutionMS, bool withTimeout)
{
	acc = 0;
	while
     6e2:	80 fd       	sbrc	r24, 0
     6e4:	03 c0       	rjmp	.+6      	; 0x6ec <_Z10whileInputbiiRjib+0x96>
	( (whileTrueOrFalse)  &&  (PIND & _BV(inputNO)) )
	||
	( (!whileTrueOrFalse) && !(PIND & _BV(inputNO)) )
	)
	{
		if (withTimeout)
     6e6:	ee 20       	and	r14, r14
     6e8:	69 f3       	breq	.-38     	; 0x6c4 <_Z10whileInputbiiRjib+0x6e>
     6ea:	d6 cf       	rjmp	.-84     	; 0x698 <_Z10whileInputbiiRjib+0x42>

			delayMicroseconds(timeResolutionMS);
			acc = acc + timeResolutionMS;
		}
	}
	return true;
     6ec:	81 e0       	ldi	r24, 0x01	; 1
}
     6ee:	0f 90       	pop	r0
     6f0:	df 91       	pop	r29
     6f2:	cf 91       	pop	r28
     6f4:	1f 91       	pop	r17
     6f6:	0f 91       	pop	r16
     6f8:	ff 90       	pop	r15
     6fa:	ef 90       	pop	r14
     6fc:	df 90       	pop	r13
     6fe:	cf 90       	pop	r12
     700:	bf 90       	pop	r11
     702:	af 90       	pop	r10
     704:	9f 90       	pop	r9
     706:	8f 90       	pop	r8
     708:	7f 90       	pop	r7
     70a:	6f 90       	pop	r6
     70c:	08 95       	ret

0000070e <_Z10whileInputbimRmib>:

bool whileInput(bool whileTrueOrFalse, int inputNO, unsigned long timeOut, unsigned long &acc, int timeResolutionMS, bool withTimeout)
{
     70e:	3f 92       	push	r3
     710:	4f 92       	push	r4
     712:	5f 92       	push	r5
     714:	6f 92       	push	r6
     716:	7f 92       	push	r7
     718:	8f 92       	push	r8
     71a:	9f 92       	push	r9
     71c:	af 92       	push	r10
     71e:	bf 92       	push	r11
     720:	cf 92       	push	r12
     722:	df 92       	push	r13
     724:	ef 92       	push	r14
     726:	ff 92       	push	r15
     728:	0f 93       	push	r16
     72a:	1f 93       	push	r17
     72c:	cf 93       	push	r28
     72e:	df 93       	push	r29
     730:	38 2e       	mov	r3, r24
     732:	d6 2e       	mov	r13, r22
     734:	ca 01       	movw	r24, r20
     736:	b9 01       	movw	r22, r18
     738:	e8 01       	movw	r28, r16
	acc = 0;
     73a:	18 82       	st	Y, r1
     73c:	19 82       	std	Y+1, r1	; 0x01
     73e:	1a 82       	std	Y+2, r1	; 0x02
     740:	1b 82       	std	Y+3, r1	; 0x03
     742:	01 e0       	ldi	r16, 0x01	; 1
     744:	10 e0       	ldi	r17, 0x00	; 0
     746:	0d 2c       	mov	r0, r13
     748:	02 c0       	rjmp	.+4      	; 0x74e <_Z10whileInputbimRmib+0x40>
     74a:	00 0f       	add	r16, r16
     74c:	11 1f       	adc	r17, r17
     74e:	0a 94       	dec	r0
     750:	e2 f7       	brpl	.-8      	; 0x74a <_Z10whileInputbimRmib+0x3c>
	( (!whileTrueOrFalse) && !(PIND & _BV(inputNO)) )
	)
	{
		if (withTimeout)
		{
			if ( (acc >= (timeOut*1000)) )
     752:	28 ee       	ldi	r18, 0xE8	; 232
     754:	33 e0       	ldi	r19, 0x03	; 3
     756:	40 e0       	ldi	r20, 0x00	; 0
     758:	50 e0       	ldi	r21, 0x00	; 0
     75a:	0e 94 d5 21 	call	0x43aa	; 0x43aa <__mulsi3>
     75e:	4b 01       	movw	r8, r22
     760:	5c 01       	movw	r10, r24
				acc = 0;
				return false;
			}

			delayMicroseconds(timeResolutionMS);
			acc = acc + (long)timeResolutionMS;
     762:	27 01       	movw	r4, r14
     764:	66 24       	eor	r6, r6
     766:	57 fc       	sbrc	r5, 7
     768:	60 94       	com	r6
     76a:	76 2c       	mov	r7, r6
}

bool whileInput(bool whileTrueOrFalse, int inputNO, unsigned long timeOut, unsigned long &acc, int timeResolutionMS, bool withTimeout)
{
	acc = 0;
	while
     76c:	1e c0       	rjmp	.+60     	; 0x7aa <_Z10whileInputbimRmib+0x9c>
	( (!whileTrueOrFalse) && !(PIND & _BV(inputNO)) )
	)
	{
		if (withTimeout)
		{
			if ( (acc >= (timeOut*1000)) )
     76e:	88 81       	ld	r24, Y
     770:	99 81       	ldd	r25, Y+1	; 0x01
     772:	aa 81       	ldd	r26, Y+2	; 0x02
     774:	bb 81       	ldd	r27, Y+3	; 0x03
     776:	88 15       	cp	r24, r8
     778:	99 05       	cpc	r25, r9
     77a:	aa 05       	cpc	r26, r10
     77c:	bb 05       	cpc	r27, r11
     77e:	30 f0       	brcs	.+12     	; 0x78c <_Z10whileInputbimRmib+0x7e>
			{
				acc = 0;
     780:	18 82       	st	Y, r1
     782:	19 82       	std	Y+1, r1	; 0x01
     784:	1a 82       	std	Y+2, r1	; 0x02
     786:	1b 82       	std	Y+3, r1	; 0x03
				return false;
     788:	80 e0       	ldi	r24, 0x00	; 0
     78a:	24 c0       	rjmp	.+72     	; 0x7d4 <_Z10whileInputbimRmib+0xc6>
			}

			delayMicroseconds(timeResolutionMS);
     78c:	c7 01       	movw	r24, r14
     78e:	0e 94 4f 1a 	call	0x349e	; 0x349e <delayMicroseconds>
			acc = acc + (long)timeResolutionMS;
     792:	88 81       	ld	r24, Y
     794:	99 81       	ldd	r25, Y+1	; 0x01
     796:	aa 81       	ldd	r26, Y+2	; 0x02
     798:	bb 81       	ldd	r27, Y+3	; 0x03
     79a:	84 0d       	add	r24, r4
     79c:	95 1d       	adc	r25, r5
     79e:	a6 1d       	adc	r26, r6
     7a0:	b7 1d       	adc	r27, r7
     7a2:	88 83       	st	Y, r24
     7a4:	99 83       	std	Y+1, r25	; 0x01
     7a6:	aa 83       	std	Y+2, r26	; 0x02
     7a8:	bb 83       	std	Y+3, r27	; 0x03
}

bool whileInput(bool whileTrueOrFalse, int inputNO, unsigned long timeOut, unsigned long &acc, int timeResolutionMS, bool withTimeout)
{
	acc = 0;
	while
     7aa:	89 b1       	in	r24, 0x09	; 9
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	33 20       	and	r3, r3
     7b0:	29 f0       	breq	.+10     	; 0x7bc <_Z10whileInputbimRmib+0xae>
     7b2:	80 23       	and	r24, r16
     7b4:	91 23       	and	r25, r17
     7b6:	00 97       	sbiw	r24, 0x00	; 0
     7b8:	49 f4       	brne	.+18     	; 0x7cc <_Z10whileInputbimRmib+0xbe>
     7ba:	0b c0       	rjmp	.+22     	; 0x7d2 <_Z10whileInputbimRmib+0xc4>
	(
	( (whileTrueOrFalse)  &&  (PIND & _BV(inputNO)) )
	||
	( (!whileTrueOrFalse) && !(PIND & _BV(inputNO)) )
     7bc:	0d 2c       	mov	r0, r13
     7be:	02 c0       	rjmp	.+4      	; 0x7c4 <_Z10whileInputbimRmib+0xb6>
     7c0:	95 95       	asr	r25
     7c2:	87 95       	ror	r24
     7c4:	0a 94       	dec	r0
     7c6:	e2 f7       	brpl	.-8      	; 0x7c0 <_Z10whileInputbimRmib+0xb2>
}

bool whileInput(bool whileTrueOrFalse, int inputNO, unsigned long timeOut, unsigned long &acc, int timeResolutionMS, bool withTimeout)
{
	acc = 0;
	while
     7c8:	80 fd       	sbrc	r24, 0
     7ca:	03 c0       	rjmp	.+6      	; 0x7d2 <_Z10whileInputbimRmib+0xc4>
	( (whileTrueOrFalse)  &&  (PIND & _BV(inputNO)) )
	||
	( (!whileTrueOrFalse) && !(PIND & _BV(inputNO)) )
	)
	{
		if (withTimeout)
     7cc:	cc 20       	and	r12, r12
     7ce:	69 f3       	breq	.-38     	; 0x7aa <_Z10whileInputbimRmib+0x9c>
     7d0:	ce cf       	rjmp	.-100    	; 0x76e <_Z10whileInputbimRmib+0x60>

			delayMicroseconds(timeResolutionMS);
			acc = acc + (long)timeResolutionMS;
		}
	}
	return true;
     7d2:	81 e0       	ldi	r24, 0x01	; 1
}
     7d4:	df 91       	pop	r29
     7d6:	cf 91       	pop	r28
     7d8:	1f 91       	pop	r17
     7da:	0f 91       	pop	r16
     7dc:	ff 90       	pop	r15
     7de:	ef 90       	pop	r14
     7e0:	df 90       	pop	r13
     7e2:	cf 90       	pop	r12
     7e4:	bf 90       	pop	r11
     7e6:	af 90       	pop	r10
     7e8:	9f 90       	pop	r9
     7ea:	8f 90       	pop	r8
     7ec:	7f 90       	pop	r7
     7ee:	6f 90       	pop	r6
     7f0:	5f 90       	pop	r5
     7f2:	4f 90       	pop	r4
     7f4:	3f 90       	pop	r3
     7f6:	08 95       	ret

000007f8 <_ZN2IR7captureEibi>:
	Serial.println("------------------ Report ------------------");
	delay(500);
}

bool IR::capture(int _PINDInputNO, bool _withTimeOut, int _arrayMaxSize)
{
     7f8:	2f 92       	push	r2
     7fa:	3f 92       	push	r3
     7fc:	4f 92       	push	r4
     7fe:	5f 92       	push	r5
     800:	6f 92       	push	r6
     802:	7f 92       	push	r7
     804:	8f 92       	push	r8
     806:	9f 92       	push	r9
     808:	af 92       	push	r10
     80a:	bf 92       	push	r11
     80c:	cf 92       	push	r12
     80e:	df 92       	push	r13
     810:	ef 92       	push	r14
     812:	ff 92       	push	r15
     814:	0f 93       	push	r16
     816:	1f 93       	push	r17
     818:	cf 93       	push	r28
     81a:	df 93       	push	r29
     81c:	00 d0       	rcall	.+0      	; 0x81e <_ZN2IR7captureEibi+0x26>
     81e:	0f 92       	push	r0
     820:	cd b7       	in	r28, 0x3d	; 61
     822:	de b7       	in	r29, 0x3e	; 62
     824:	5c 01       	movw	r10, r24
     826:	2b 01       	movw	r4, r22
     828:	19 01       	movw	r2, r18
	long unsigned currentPulse;			//Current pulse accumulator
	int currentIndex;					//Current Index
	//int _arrayMaxSize 100;			//Maximum size to be stored
	#define pulseMaxSize 65000			//Maximum Pulse size 65000
	#define resolution 30//20			//The resolution to verify a 
	bool IRLogicLevelTrue = !m_inputIsInverted;
     82a:	fc 01       	movw	r30, r24
     82c:	e9 56       	subi	r30, 0x69	; 105
     82e:	fe 4f       	sbci	r31, 0xFE	; 254
     830:	70 80       	ld	r7, Z
     832:	66 24       	eor	r6, r6
     834:	63 94       	inc	r6
     836:	67 24       	eor	r6, r7
	bool IRLogicLevelFalse = m_inputIsInverted;
	//Declare variables		<---------------------------------------------------------
	
	//Prepare to a new teach procedure		----------------------------------------->
	//currentPulse = 0;
	m_IRCode.stTeached = 0;
     838:	fc 01       	movw	r30, r24
     83a:	12 82       	std	Z+2, r1	; 0x02
	m_IRCode.size = 0;
     83c:	16 82       	std	Z+6, r1	; 0x06
     83e:	15 82       	std	Z+5, r1	; 0x05
	
	//Check if it is with or without timeout	----------------------------------------------->
	//Wait for a start signal. While a "IRLogicLevelFalse" doesn't comes stay here.	----------->
	if (_withTimeOut)
	{
		if ( !( whileInput(IRLogicLevelFalse, _PINDInputNO, 5000, currentPulse, resolution, true)) )
     840:	87 2d       	mov	r24, r7
	currentIndex = 0;
	//Prepare to a new teach procedure		<---------------------------------------------------
	
	//Check if it is with or without timeout	----------------------------------------------->
	//Wait for a start signal. While a "IRLogicLevelFalse" doesn't comes stay here.	----------->
	if (_withTimeOut)
     842:	44 23       	and	r20, r20
     844:	a9 f0       	breq	.+42     	; 0x870 <_ZN2IR7captureEibi+0x78>
	{
		if ( !( whileInput(IRLogicLevelFalse, _PINDInputNO, 5000, currentPulse, resolution, true)) )
     846:	28 e8       	ldi	r18, 0x88	; 136
     848:	33 e1       	ldi	r19, 0x13	; 19
     84a:	40 e0       	ldi	r20, 0x00	; 0
     84c:	50 e0       	ldi	r21, 0x00	; 0
     84e:	8e 01       	movw	r16, r28
     850:	0f 5f       	subi	r16, 0xFF	; 255
     852:	1f 4f       	sbci	r17, 0xFF	; 255
     854:	fe e1       	ldi	r31, 0x1E	; 30
     856:	ef 2e       	mov	r14, r31
     858:	f1 2c       	mov	r15, r1
     85a:	cc 24       	eor	r12, r12
     85c:	c3 94       	inc	r12
     85e:	0e 94 87 03 	call	0x70e	; 0x70e <_Z10whileInputbimRmib>
     862:	88 23       	and	r24, r24
     864:	91 f4       	brne	.+36     	; 0x88a <_ZN2IR7captureEibi+0x92>
		{
			Serial.println("Time out. Try again!");
     866:	86 e8       	ldi	r24, 0x86	; 134
     868:	99 e0       	ldi	r25, 0x09	; 9
     86a:	65 e2       	ldi	r22, 0x25	; 37
     86c:	73 e0       	ldi	r23, 0x03	; 3
     86e:	1a c0       	rjmp	.+52     	; 0x8a4 <_ZN2IR7captureEibi+0xac>
			return false;
		}
	} 
	else
	{
		whileInput(IRLogicLevelFalse, _PINDInputNO, 5000, currentPulse, resolution, false);
     870:	28 e8       	ldi	r18, 0x88	; 136
     872:	33 e1       	ldi	r19, 0x13	; 19
     874:	40 e0       	ldi	r20, 0x00	; 0
     876:	50 e0       	ldi	r21, 0x00	; 0
     878:	8e 01       	movw	r16, r28
     87a:	0f 5f       	subi	r16, 0xFF	; 255
     87c:	1f 4f       	sbci	r17, 0xFF	; 255
     87e:	ee e1       	ldi	r30, 0x1E	; 30
     880:	ee 2e       	mov	r14, r30
     882:	f1 2c       	mov	r15, r1
     884:	cc 24       	eor	r12, r12
     886:	0e 94 87 03 	call	0x70e	; 0x70e <_Z10whileInputbimRmib>
	Serial.println("------------------ Report ------------------");
	delay(500);
}

bool IR::capture(int _PINDInputNO, bool _withTimeOut, int _arrayMaxSize)
{
     88a:	88 24       	eor	r8, r8
     88c:	99 24       	eor	r9, r9
	
	//Caption all signals cycle		----------------------------------------------------------->
	while(1)
	{
		//Test if it reached the maximum rates allowed		----------------------------------->
		if ( currentIndex >= _arrayMaxSize )
     88e:	82 14       	cp	r8, r2
     890:	93 04       	cpc	r9, r3
     892:	64 f0       	brlt	.+24     	; 0x8ac <_ZN2IR7captureEibi+0xb4>
		{
			m_IRCode.stTeached = 0;
     894:	f5 01       	movw	r30, r10
     896:	12 82       	std	Z+2, r1	; 0x02
			m_IRCode.size = 0;
     898:	16 82       	std	Z+6, r1	; 0x06
     89a:	15 82       	std	Z+5, r1	; 0x05
			Serial.println("Maximum amount reached! The code is bigger than the maximum allowed! Try again!");
     89c:	86 e8       	ldi	r24, 0x86	; 134
     89e:	99 e0       	ldi	r25, 0x09	; 9
     8a0:	6a e3       	ldi	r22, 0x3A	; 58
     8a2:	73 e0       	ldi	r23, 0x03	; 3
     8a4:	0e 94 c2 21 	call	0x4384	; 0x4384 <_ZN5Print7printlnEPKc>
			return false;
     8a8:	80 e0       	ldi	r24, 0x00	; 0
     8aa:	38 c0       	rjmp	.+112    	; 0x91c <_ZN2IR7captureEibi+0x124>
		}
		//Test if it reached the maximum rates allowed		<-----------------------------------
		
		//While a "IRLogicLevelTrue" doesn't comes stay here.	------------------------------->
		if ( !( whileInput(IRLogicLevelTrue, _PINDInputNO, pulseMaxSize, m_IRCode.pulses[currentIndex][0], resolution, true)) )
     8ac:	64 01       	movw	r12, r8
     8ae:	cc 0c       	add	r12, r12
     8b0:	dd 1c       	adc	r13, r13
     8b2:	cc 0c       	add	r12, r12
     8b4:	dd 1c       	adc	r13, r13
     8b6:	96 01       	movw	r18, r12
     8b8:	29 5f       	subi	r18, 0xF9	; 249
     8ba:	3f 4f       	sbci	r19, 0xFF	; 255
     8bc:	2a 0d       	add	r18, r10
     8be:	3b 1d       	adc	r19, r11
     8c0:	86 2d       	mov	r24, r6
     8c2:	b2 01       	movw	r22, r4
     8c4:	48 ee       	ldi	r20, 0xE8	; 232
     8c6:	5d ef       	ldi	r21, 0xFD	; 253
     8c8:	0e e1       	ldi	r16, 0x1E	; 30
     8ca:	10 e0       	ldi	r17, 0x00	; 0
     8cc:	ee 24       	eor	r14, r14
     8ce:	e3 94       	inc	r14
     8d0:	0e 94 2b 03 	call	0x656	; 0x656 <_Z10whileInputbiiRjib>
     8d4:	88 23       	and	r24, r24
     8d6:	31 f4       	brne	.+12     	; 0x8e4 <_ZN2IR7captureEibi+0xec>
		{
			m_IRCode.stTeached = 1;
     8d8:	81 e0       	ldi	r24, 0x01	; 1
     8da:	f5 01       	movw	r30, r10
     8dc:	82 83       	std	Z+2, r24	; 0x02
			m_IRCode.size = currentIndex;
     8de:	96 82       	std	Z+6, r9	; 0x06
     8e0:	85 82       	std	Z+5, r8	; 0x05
			return true;
     8e2:	1c c0       	rjmp	.+56     	; 0x91c <_ZN2IR7captureEibi+0x124>
		}
		//While a "IRLogicLevelTrue" doesn't comes stay here.	<-------------------------------
		
		//While a "IRLogicLevelFalse" doesn't comes stay here.	------------------------------->
		if ( !( whileInput(IRLogicLevelFalse, _PINDInputNO, pulseMaxSize, m_IRCode.pulses[currentIndex][1], resolution, true)) )
     8e4:	96 01       	movw	r18, r12
     8e6:	27 5f       	subi	r18, 0xF7	; 247
     8e8:	3f 4f       	sbci	r19, 0xFF	; 255
     8ea:	2a 0d       	add	r18, r10
     8ec:	3b 1d       	adc	r19, r11
     8ee:	87 2d       	mov	r24, r7
     8f0:	b2 01       	movw	r22, r4
     8f2:	48 ee       	ldi	r20, 0xE8	; 232
     8f4:	5d ef       	ldi	r21, 0xFD	; 253
     8f6:	0e e1       	ldi	r16, 0x1E	; 30
     8f8:	10 e0       	ldi	r17, 0x00	; 0
     8fa:	ee 24       	eor	r14, r14
     8fc:	e3 94       	inc	r14
     8fe:	0e 94 2b 03 	call	0x656	; 0x656 <_Z10whileInputbiiRjib>
     902:	94 01       	movw	r18, r8
     904:	2f 5f       	subi	r18, 0xFF	; 255
     906:	3f 4f       	sbci	r19, 0xFF	; 255
     908:	88 23       	and	r24, r24
     90a:	31 f4       	brne	.+12     	; 0x918 <_ZN2IR7captureEibi+0x120>
		{
			m_IRCode.stTeached = 1;
     90c:	81 e0       	ldi	r24, 0x01	; 1
     90e:	f5 01       	movw	r30, r10
     910:	82 83       	std	Z+2, r24	; 0x02
			m_IRCode.size = currentIndex + 1;
     912:	36 83       	std	Z+6, r19	; 0x06
     914:	25 83       	std	Z+5, r18	; 0x05
			return true;
     916:	02 c0       	rjmp	.+4      	; 0x91c <_ZN2IR7captureEibi+0x124>
		}
		//While a "IRLogicLevelFalse" doesn't comes stay here.	<-------------------------------
				
		currentIndex++;
     918:	49 01       	movw	r8, r18
	}
	//Wait for a start signal. While a "IRLogicLevelFalse" doesn't comes stay here.	<-----------
	//Check if it is with or without timeout	<-----------------------------------------------
	
	//Caption all signals cycle		----------------------------------------------------------->
	while(1)
     91a:	b9 cf       	rjmp	.-142    	; 0x88e <_ZN2IR7captureEibi+0x96>
		//While a "IRLogicLevelFalse" doesn't comes stay here.	<-------------------------------
				
		currentIndex++;
	}
	//Caption all signals cycle		<-----------------------------------------------------------
}
     91c:	0f 90       	pop	r0
     91e:	0f 90       	pop	r0
     920:	0f 90       	pop	r0
     922:	0f 90       	pop	r0
     924:	df 91       	pop	r29
     926:	cf 91       	pop	r28
     928:	1f 91       	pop	r17
     92a:	0f 91       	pop	r16
     92c:	ff 90       	pop	r15
     92e:	ef 90       	pop	r14
     930:	df 90       	pop	r13
     932:	cf 90       	pop	r12
     934:	bf 90       	pop	r11
     936:	af 90       	pop	r10
     938:	9f 90       	pop	r9
     93a:	8f 90       	pop	r8
     93c:	7f 90       	pop	r7
     93e:	6f 90       	pop	r6
     940:	5f 90       	pop	r5
     942:	4f 90       	pop	r4
     944:	3f 90       	pop	r3
     946:	2f 90       	pop	r2
     948:	08 95       	ret

0000094a <_ZN2IR5teachEi>:

bool IR::teach(int _PINDInputNO)
{
     94a:	0f 93       	push	r16
     94c:	1f 93       	push	r17
     94e:	cf 93       	push	r28
     950:	df 93       	push	r29
     952:	ec 01       	movw	r28, r24
     954:	8b 01       	movw	r16, r22
	Serial.println("Start teaching. Please press the IR button!");
     956:	86 e8       	ldi	r24, 0x86	; 134
     958:	99 e0       	ldi	r25, 0x09	; 9
     95a:	6a e8       	ldi	r22, 0x8A	; 138
     95c:	73 e0       	ldi	r23, 0x03	; 3
     95e:	0e 94 c2 21 	call	0x4384	; 0x4384 <_ZN5Print7printlnEPKc>
	if (capture(_PINDInputNO, true, 100))
     962:	ce 01       	movw	r24, r28
     964:	b8 01       	movw	r22, r16
     966:	41 e0       	ldi	r20, 0x01	; 1
     968:	24 e6       	ldi	r18, 0x64	; 100
     96a:	30 e0       	ldi	r19, 0x00	; 0
     96c:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <_ZN2IR7captureEibi>
     970:	88 23       	and	r24, r24
     972:	29 f0       	breq	.+10     	; 0x97e <_ZN2IR5teachEi+0x34>
	{
		Serial.println("Teached Successfully!");
     974:	86 e8       	ldi	r24, 0x86	; 134
     976:	99 e0       	ldi	r25, 0x09	; 9
     978:	66 eb       	ldi	r22, 0xB6	; 182
     97a:	73 e0       	ldi	r23, 0x03	; 3
     97c:	04 c0       	rjmp	.+8      	; 0x986 <_ZN2IR5teachEi+0x3c>
	} 
	else
	{
		Serial.println("Didn't Teach Successfully!");
     97e:	86 e8       	ldi	r24, 0x86	; 134
     980:	99 e0       	ldi	r25, 0x09	; 9
     982:	6c ec       	ldi	r22, 0xCC	; 204
     984:	73 e0       	ldi	r23, 0x03	; 3
     986:	0e 94 c2 21 	call	0x4384	; 0x4384 <_ZN5Print7printlnEPKc>
	}
}
     98a:	df 91       	pop	r29
     98c:	cf 91       	pop	r28
     98e:	1f 91       	pop	r17
     990:	0f 91       	pop	r16
     992:	08 95       	ret

00000994 <_Z6readerm>:
	dbFile.write(data);
	dbFile.flush();
}

byte reader(unsigned long address)
{
     994:	cf 93       	push	r28
     996:	df 93       	push	r29
     998:	ab 01       	movw	r20, r22
     99a:	bc 01       	movw	r22, r24
	dbFile.seek(address);
     99c:	ce ee       	ldi	r28, 0xEE	; 238
     99e:	d4 e0       	ldi	r29, 0x04	; 4
     9a0:	ce 01       	movw	r24, r28
     9a2:	0e 94 36 07 	call	0xe6c	; 0xe6c <_ZN4File4seekEm>
	return dbFile.read();
     9a6:	ce 01       	movw	r24, r28
     9a8:	0e 94 a6 06 	call	0xd4c	; 0xd4c <_ZN4File4readEv>
}
     9ac:	df 91       	pop	r29
     9ae:	cf 91       	pop	r28
     9b0:	08 95       	ret

000009b2 <_Z6writermh>:
	int temperature;
}
logEvent;

void writer(unsigned long address, byte data)
{
     9b2:	ff 92       	push	r15
     9b4:	0f 93       	push	r16
     9b6:	1f 93       	push	r17
     9b8:	cf 93       	push	r28
     9ba:	df 93       	push	r29
     9bc:	8b 01       	movw	r16, r22
     9be:	9c 01       	movw	r18, r24
     9c0:	f4 2e       	mov	r15, r20
	dbFile.seek(address);
     9c2:	ce ee       	ldi	r28, 0xEE	; 238
     9c4:	d4 e0       	ldi	r29, 0x04	; 4
     9c6:	ce 01       	movw	r24, r28
     9c8:	b9 01       	movw	r22, r18
     9ca:	a8 01       	movw	r20, r16
     9cc:	0e 94 36 07 	call	0xe6c	; 0xe6c <_ZN4File4seekEm>
	dbFile.write(data);
     9d0:	ce 01       	movw	r24, r28
     9d2:	6f 2d       	mov	r22, r15
     9d4:	0e 94 54 06 	call	0xca8	; 0xca8 <_ZN4File5writeEh>
	dbFile.flush();
     9d8:	ce 01       	movw	r24, r28
     9da:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <_ZN4File5flushEv>
}
     9de:	df 91       	pop	r29
     9e0:	cf 91       	pop	r28
     9e2:	1f 91       	pop	r17
     9e4:	0f 91       	pop	r16
     9e6:	ff 90       	pop	r15
     9e8:	08 95       	ret

000009ea <_Z41__static_initialization_and_destruction_0ii.constprop.3>:


void loop()
{
	
     9ea:	81 30       	cpi	r24, 0x01	; 1
     9ec:	91 05       	cpc	r25, r1
     9ee:	69 f4       	brne	.+26     	; 0xa0a <_Z41__static_initialization_and_destruction_0ii.constprop.3+0x20>
#define ARDUINO 105
#include "Arduino.h"
#include <EDB.h>
#include <SD.h>

File dbFile;
     9f0:	8e ee       	ldi	r24, 0xEE	; 238
     9f2:	94 e0       	ldi	r25, 0x04	; 4
     9f4:	0e 94 1d 07 	call	0xe3a	; 0xe3a <_ZN4FileC1Ev>
	dbFile.seek(address);
	return dbFile.read();
}


EDB db(&writer, &reader);
     9f8:	84 ed       	ldi	r24, 0xD4	; 212
     9fa:	94 e0       	ldi	r25, 0x04	; 4
     9fc:	69 ed       	ldi	r22, 0xD9	; 217
     9fe:	74 e0       	ldi	r23, 0x04	; 4
     a00:	4a ec       	ldi	r20, 0xCA	; 202
     a02:	54 e0       	ldi	r21, 0x04	; 4
     a04:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <_ZN3EDBC1EPFvmhEPFhmE>
     a08:	08 95       	ret
     a0a:	00 97       	sbiw	r24, 0x00	; 0
     a0c:	21 f4       	brne	.+8      	; 0xa16 <_Z41__static_initialization_and_destruction_0ii.constprop.3+0x2c>
#define ARDUINO 105
#include "Arduino.h"
#include <EDB.h>
#include <SD.h>

File dbFile;
     a0e:	8e ee       	ldi	r24, 0xEE	; 238
     a10:	94 e0       	ldi	r25, 0x04	; 4
     a12:	0e 94 30 07 	call	0xe60	; 0xe60 <_ZN4FileD1Ev>
     a16:	08 95       	ret

00000a18 <setup>:


EDB db(&writer, &reader);

void setup()
{
     a18:	8f 92       	push	r8
     a1a:	9f 92       	push	r9
     a1c:	af 92       	push	r10
     a1e:	bf 92       	push	r11
     a20:	cf 92       	push	r12
     a22:	df 92       	push	r13
     a24:	ef 92       	push	r14
     a26:	ff 92       	push	r15
     a28:	0f 93       	push	r16
     a2a:	1f 93       	push	r17
     a2c:	cf 93       	push	r28
     a2e:	df 93       	push	r29
     a30:	cd b7       	in	r28, 0x3d	; 61
     a32:	de b7       	in	r29, 0x3e	; 62
     a34:	6b 97       	sbiw	r28, 0x1b	; 27
     a36:	0f b6       	in	r0, 0x3f	; 63
     a38:	f8 94       	cli
     a3a:	de bf       	out	0x3e, r29	; 62
     a3c:	0f be       	out	0x3f, r0	; 63
     a3e:	cd bf       	out	0x3d, r28	; 61
	Serial.begin(9600);
     a40:	86 e8       	ldi	r24, 0x86	; 134
     a42:	99 e0       	ldi	r25, 0x09	; 9
     a44:	40 e8       	ldi	r20, 0x80	; 128
     a46:	55 e2       	ldi	r21, 0x25	; 37
     a48:	60 e0       	ldi	r22, 0x00	; 0
     a4a:	70 e0       	ldi	r23, 0x00	; 0
     a4c:	0e 94 f6 1d 	call	0x3bec	; 0x3bec <_ZN14HardwareSerial5beginEm>
	
	Serial.print("Initializing SD card...");
     a50:	86 e8       	ldi	r24, 0x86	; 134
     a52:	99 e0       	ldi	r25, 0x09	; 9
     a54:	6d ee       	ldi	r22, 0xED	; 237
     a56:	73 e0       	ldi	r23, 0x03	; 3
     a58:	0e 94 bf 21 	call	0x437e	; 0x437e <_ZN5Print5printEPKc>
	
	pinMode(53, OUTPUT);
     a5c:	85 e3       	ldi	r24, 0x35	; 53
     a5e:	61 e0       	ldi	r22, 0x01	; 1
     a60:	0e 94 bb 1a 	call	0x3576	; 0x3576 <pinMode>
	
	if (!SD.begin(4)) {
     a64:	89 e0       	ldi	r24, 0x09	; 9
     a66:	95 e0       	ldi	r25, 0x05	; 5
     a68:	64 e0       	ldi	r22, 0x04	; 4
     a6a:	0e 94 9f 07 	call	0xf3e	; 0xf3e <_ZN7SDClass5beginEh>
     a6e:	88 23       	and	r24, r24
     a70:	39 f4       	brne	.+14     	; 0xa80 <setup+0x68>
		Serial.println("initialization failed!");
     a72:	86 e8       	ldi	r24, 0x86	; 134
     a74:	99 e0       	ldi	r25, 0x09	; 9
     a76:	65 e0       	ldi	r22, 0x05	; 5
     a78:	74 e0       	ldi	r23, 0x04	; 4
     a7a:	0e 94 c2 21 	call	0x4384	; 0x4384 <_ZN5Print7printlnEPKc>
		return;
     a7e:	f6 c0       	rjmp	.+492    	; 0xc6c <setup+0x254>
	}
	
	Serial.println("initialization done.");
     a80:	86 e8       	ldi	r24, 0x86	; 134
     a82:	99 e0       	ldi	r25, 0x09	; 9
     a84:	6c e1       	ldi	r22, 0x1C	; 28
     a86:	74 e0       	ldi	r23, 0x04	; 4
     a88:	0e 94 c2 21 	call	0x4384	; 0x4384 <_ZN5Print7printlnEPKc>
	
	Serial.println("Opening example.db ...");
     a8c:	86 e8       	ldi	r24, 0x86	; 134
     a8e:	99 e0       	ldi	r25, 0x09	; 9
     a90:	61 e3       	ldi	r22, 0x31	; 49
     a92:	74 e0       	ldi	r23, 0x04	; 4
     a94:	0e 94 c2 21 	call	0x4384	; 0x4384 <_ZN5Print7printlnEPKc>
	dbFile = SD.open("TestDB.db", FILE_WRITE);//FILE_READ
     a98:	ce 01       	movw	r24, r28
     a9a:	01 96       	adiw	r24, 0x01	; 1
     a9c:	69 e0       	ldi	r22, 0x09	; 9
     a9e:	75 e0       	ldi	r23, 0x05	; 5
     aa0:	48 e4       	ldi	r20, 0x48	; 72
     aa2:	54 e0       	ldi	r21, 0x04	; 4
     aa4:	23 e1       	ldi	r18, 0x13	; 19
     aa6:	0e 94 b2 08 	call	0x1164	; 0x1164 <_ZN7SDClass4openEPKch>
#define DEC 10
#define HEX 16
#define OCT 8
#define BIN 2

class Print
     aaa:	8b 81       	ldd	r24, Y+3	; 0x03
     aac:	9c 81       	ldd	r25, Y+4	; 0x04
     aae:	90 93 f1 04 	sts	0x04F1, r25
     ab2:	80 93 f0 04 	sts	0x04F0, r24
#define   getFloat(skipChar)  parseFloat(skipChar)
#define   getString( pre_string, post_string, buffer, length)
readBytesBetween( pre_string, terminator, buffer, length)
*/

class Stream : public Print
     ab6:	8d 81       	ldd	r24, Y+5	; 0x05
     ab8:	9e 81       	ldd	r25, Y+6	; 0x06
     aba:	af 81       	ldd	r26, Y+7	; 0x07
     abc:	b8 85       	ldd	r27, Y+8	; 0x08
     abe:	80 93 f2 04 	sts	0x04F2, r24
     ac2:	90 93 f3 04 	sts	0x04F3, r25
     ac6:	a0 93 f4 04 	sts	0x04F4, r26
     aca:	b0 93 f5 04 	sts	0x04F5, r27
     ace:	89 85       	ldd	r24, Y+9	; 0x09
     ad0:	9a 85       	ldd	r25, Y+10	; 0x0a
     ad2:	ab 85       	ldd	r26, Y+11	; 0x0b
     ad4:	bc 85       	ldd	r27, Y+12	; 0x0c
     ad6:	80 93 f6 04 	sts	0x04F6, r24
     ada:	90 93 f7 04 	sts	0x04F7, r25
     ade:	a0 93 f8 04 	sts	0x04F8, r26
     ae2:	b0 93 f9 04 	sts	0x04F9, r27
#include <utility/SdFatUtil.h>

#define FILE_READ O_READ
#define FILE_WRITE (O_READ | O_WRITE | O_CREAT)

class File : public Stream {
     ae6:	aa ef       	ldi	r26, 0xFA	; 250
     ae8:	b4 e0       	ldi	r27, 0x04	; 4
     aea:	fe 01       	movw	r30, r28
     aec:	3d 96       	adiw	r30, 0x0d	; 13
     aee:	8d e0       	ldi	r24, 0x0D	; 13
     af0:	01 90       	ld	r0, Z+
     af2:	0d 92       	st	X+, r0
     af4:	81 50       	subi	r24, 0x01	; 1
     af6:	e1 f7       	brne	.-8      	; 0xaf0 <setup+0xd8>
     af8:	8a 8d       	ldd	r24, Y+26	; 0x1a
     afa:	9b 8d       	ldd	r25, Y+27	; 0x1b
     afc:	90 93 08 05 	sts	0x0508, r25
     b00:	80 93 07 05 	sts	0x0507, r24
     b04:	ce 01       	movw	r24, r28
     b06:	01 96       	adiw	r24, 0x01	; 1
     b08:	0e 94 30 07 	call	0xe60	; 0xe60 <_ZN4FileD1Ev>
	
	
	Serial.println(db.count(), DEC);
     b0c:	84 ed       	ldi	r24, 0xD4	; 212
     b0e:	94 e0       	ldi	r25, 0x04	; 4
     b10:	0e 94 25 03 	call	0x64a	; 0x64a <_ZN3EDB5countEv>
     b14:	ab 01       	movw	r20, r22
     b16:	bc 01       	movw	r22, r24
     b18:	86 e8       	ldi	r24, 0x86	; 134
     b1a:	99 e0       	ldi	r25, 0x09	; 9
     b1c:	2a e0       	ldi	r18, 0x0A	; 10
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	0e 94 4c 21 	call	0x4298	; 0x4298 <_ZN5Print7printlnEmi>
	db.create(0, TABLE_SIZE, sizeof(logEvent));
     b24:	84 ed       	ldi	r24, 0xD4	; 212
     b26:	94 e0       	ldi	r25, 0x04	; 4
     b28:	40 e0       	ldi	r20, 0x00	; 0
     b2a:	50 e0       	ldi	r21, 0x00	; 0
     b2c:	ba 01       	movw	r22, r20
     b2e:	00 e5       	ldi	r16, 0x50	; 80
     b30:	13 ec       	ldi	r17, 0xC3	; 195
     b32:	20 e0       	ldi	r18, 0x00	; 0
     b34:	30 e0       	ldi	r19, 0x00	; 0
     b36:	e4 e0       	ldi	r30, 0x04	; 4
     b38:	ee 2e       	mov	r14, r30
     b3a:	f1 2c       	mov	r15, r1
     b3c:	0e 94 e6 01 	call	0x3cc	; 0x3cc <_ZN3EDB6createEmmj>
	db.open(0);
     b40:	84 ed       	ldi	r24, 0xD4	; 212
     b42:	94 e0       	ldi	r25, 0x04	; 4
     b44:	40 e0       	ldi	r20, 0x00	; 0
     b46:	50 e0       	ldi	r21, 0x00	; 0
     b48:	ba 01       	movw	r22, r20
     b4a:	0e 94 09 02 	call	0x412	; 0x412 <_ZN3EDB4openEm>
	
	Serial.print("Record Count: "); Serial.println(db.count());
     b4e:	86 e8       	ldi	r24, 0x86	; 134
     b50:	99 e0       	ldi	r25, 0x09	; 9
     b52:	62 e5       	ldi	r22, 0x52	; 82
     b54:	74 e0       	ldi	r23, 0x04	; 4
     b56:	0e 94 bf 21 	call	0x437e	; 0x437e <_ZN5Print5printEPKc>
     b5a:	84 ed       	ldi	r24, 0xD4	; 212
     b5c:	94 e0       	ldi	r25, 0x04	; 4
     b5e:	0e 94 25 03 	call	0x64a	; 0x64a <_ZN3EDB5countEv>
     b62:	ab 01       	movw	r20, r22
     b64:	bc 01       	movw	r22, r24
     b66:	86 e8       	ldi	r24, 0x86	; 134
     b68:	99 e0       	ldi	r25, 0x09	; 9
     b6a:	2a e0       	ldi	r18, 0x0A	; 10
     b6c:	30 e0       	ldi	r19, 0x00	; 0
     b6e:	0e 94 4c 21 	call	0x4298	; 0x4298 <_ZN5Print7printlnEmi>
	
	Serial.println("Creating Records...");
     b72:	86 e8       	ldi	r24, 0x86	; 134
     b74:	99 e0       	ldi	r25, 0x09	; 9
     b76:	61 e6       	ldi	r22, 0x61	; 97
     b78:	74 e0       	ldi	r23, 0x04	; 4
     b7a:	0e 94 c2 21 	call	0x4384	; 0x4384 <_ZN5Print7printlnEPKc>
	int recno;
	for (recno = 1; recno <= RECORDS_TO_CREATE; recno++)
     b7e:	01 e0       	ldi	r16, 0x01	; 1
     b80:	10 e0       	ldi	r17, 0x00	; 0
	{
		logEvent.id = recno;
     b82:	10 93 eb 04 	sts	0x04EB, r17
     b86:	00 93 ea 04 	sts	0x04EA, r16
}


EDB db(&writer, &reader);

void setup()
     b8a:	c8 01       	movw	r24, r16
     b8c:	88 0f       	add	r24, r24
     b8e:	99 1f       	adc	r25, r25
	Serial.println("Creating Records...");
	int recno;
	for (recno = 1; recno <= RECORDS_TO_CREATE; recno++)
	{
		logEvent.id = recno;
		logEvent.temperature = recno * 2;
     b90:	90 93 ed 04 	sts	0x04ED, r25
     b94:	80 93 ec 04 	sts	0x04EC, r24
		db.appendRec(EDB_REC logEvent);
     b98:	84 ed       	ldi	r24, 0xD4	; 212
     b9a:	94 e0       	ldi	r25, 0x04	; 4
     b9c:	6a ee       	ldi	r22, 0xEA	; 234
     b9e:	74 e0       	ldi	r23, 0x04	; 4
     ba0:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <_ZN3EDB9appendRecEPh>
		if (recno == 5)
     ba4:	05 30       	cpi	r16, 0x05	; 5
     ba6:	11 05       	cpc	r17, r1
     ba8:	41 f4       	brne	.+16     	; 0xbba <setup+0x1a2>
		{
			db.deleteRec(recno);
     baa:	84 ed       	ldi	r24, 0xD4	; 212
     bac:	94 e0       	ldi	r25, 0x04	; 4
     bae:	45 e0       	ldi	r20, 0x05	; 5
     bb0:	50 e0       	ldi	r21, 0x00	; 0
     bb2:	60 e0       	ldi	r22, 0x00	; 0
     bb4:	70 e0       	ldi	r23, 0x00	; 0
     bb6:	0e 94 7f 02 	call	0x4fe	; 0x4fe <_ZN3EDB9deleteRecEm>
	
	Serial.print("Record Count: "); Serial.println(db.count());
	
	Serial.println("Creating Records...");
	int recno;
	for (recno = 1; recno <= RECORDS_TO_CREATE; recno++)
     bba:	0f 5f       	subi	r16, 0xFF	; 255
     bbc:	1f 4f       	sbci	r17, 0xFF	; 255
     bbe:	00 31       	cpi	r16, 0x10	; 16
     bc0:	11 05       	cpc	r17, r1
     bc2:	f9 f6       	brne	.-66     	; 0xb82 <setup+0x16a>
			db.deleteRec(recno);
			
		}
	}
	
	Serial.print("Record Count: "); Serial.println(db.count());
     bc4:	86 e8       	ldi	r24, 0x86	; 134
     bc6:	99 e0       	ldi	r25, 0x09	; 9
     bc8:	62 e5       	ldi	r22, 0x52	; 82
     bca:	74 e0       	ldi	r23, 0x04	; 4
     bcc:	0e 94 bf 21 	call	0x437e	; 0x437e <_ZN5Print5printEPKc>
     bd0:	84 ed       	ldi	r24, 0xD4	; 212
     bd2:	94 e0       	ldi	r25, 0x04	; 4
     bd4:	0e 94 25 03 	call	0x64a	; 0x64a <_ZN3EDB5countEv>
     bd8:	ab 01       	movw	r20, r22
     bda:	bc 01       	movw	r22, r24
     bdc:	86 e8       	ldi	r24, 0x86	; 134
     bde:	99 e0       	ldi	r25, 0x09	; 9
     be0:	2a e0       	ldi	r18, 0x0A	; 10
     be2:	30 e0       	ldi	r19, 0x00	; 0
     be4:	0e 94 4c 21 	call	0x4298	; 0x4298 <_ZN5Print7printlnEmi>
	for (recno = 1; recno < db.count(); recno++)
     be8:	81 e0       	ldi	r24, 0x01	; 1
     bea:	c8 2e       	mov	r12, r24
     bec:	d1 2c       	mov	r13, r1
     bee:	e1 2c       	mov	r14, r1
     bf0:	f1 2c       	mov	r15, r1
     bf2:	2a c0       	rjmp	.+84     	; 0xc48 <setup+0x230>
	{
		db.readRec(recno, EDB_REC logEvent);
     bf4:	84 ed       	ldi	r24, 0xD4	; 212
     bf6:	94 e0       	ldi	r25, 0x04	; 4
     bf8:	b7 01       	movw	r22, r14
     bfa:	a6 01       	movw	r20, r12
     bfc:	2a ee       	ldi	r18, 0xEA	; 234
     bfe:	34 e0       	ldi	r19, 0x04	; 4
     c00:	0e 94 44 02 	call	0x488	; 0x488 <_ZN3EDB7readRecEmPh>
		Serial.print("ID: "); Serial.println(logEvent.id);
     c04:	86 e8       	ldi	r24, 0x86	; 134
     c06:	99 e0       	ldi	r25, 0x09	; 9
     c08:	65 e7       	ldi	r22, 0x75	; 117
     c0a:	74 e0       	ldi	r23, 0x04	; 4
     c0c:	0e 94 bf 21 	call	0x437e	; 0x437e <_ZN5Print5printEPKc>
     c10:	60 91 ea 04 	lds	r22, 0x04EA
     c14:	70 91 eb 04 	lds	r23, 0x04EB
     c18:	86 e8       	ldi	r24, 0x86	; 134
     c1a:	99 e0       	ldi	r25, 0x09	; 9
     c1c:	4a e0       	ldi	r20, 0x0A	; 10
     c1e:	50 e0       	ldi	r21, 0x00	; 0
     c20:	0e 94 a0 21 	call	0x4340	; 0x4340 <_ZN5Print7printlnEii>
		Serial.print("Temp: "); Serial.println(logEvent.temperature);
     c24:	86 e8       	ldi	r24, 0x86	; 134
     c26:	99 e0       	ldi	r25, 0x09	; 9
     c28:	6a e7       	ldi	r22, 0x7A	; 122
     c2a:	74 e0       	ldi	r23, 0x04	; 4
     c2c:	0e 94 bf 21 	call	0x437e	; 0x437e <_ZN5Print5printEPKc>
     c30:	60 91 ec 04 	lds	r22, 0x04EC
     c34:	70 91 ed 04 	lds	r23, 0x04ED
     c38:	86 e8       	ldi	r24, 0x86	; 134
     c3a:	99 e0       	ldi	r25, 0x09	; 9
     c3c:	4a e0       	ldi	r20, 0x0A	; 10
     c3e:	50 e0       	ldi	r21, 0x00	; 0
     c40:	0e 94 a0 21 	call	0x4340	; 0x4340 <_ZN5Print7printlnEii>
     c44:	75 01       	movw	r14, r10
     c46:	64 01       	movw	r12, r8
			
		}
	}
	
	Serial.print("Record Count: "); Serial.println(db.count());
	for (recno = 1; recno < db.count(); recno++)
     c48:	84 ed       	ldi	r24, 0xD4	; 212
     c4a:	94 e0       	ldi	r25, 0x04	; 4
     c4c:	0e 94 25 03 	call	0x64a	; 0x64a <_ZN3EDB5countEv>
     c50:	dc 01       	movw	r26, r24
     c52:	cb 01       	movw	r24, r22
     c54:	46 01       	movw	r8, r12
     c56:	57 01       	movw	r10, r14
     c58:	08 94       	sec
     c5a:	81 1c       	adc	r8, r1
     c5c:	91 1c       	adc	r9, r1
     c5e:	a1 1c       	adc	r10, r1
     c60:	b1 1c       	adc	r11, r1
     c62:	c8 16       	cp	r12, r24
     c64:	d9 06       	cpc	r13, r25
     c66:	ea 06       	cpc	r14, r26
     c68:	fb 06       	cpc	r15, r27
     c6a:	20 f2       	brcs	.-120    	; 0xbf4 <setup+0x1dc>
		db.readRec(recno, EDB_REC logEvent);
		Serial.print("ID: "); Serial.println(logEvent.id);
		Serial.print("Temp: "); Serial.println(logEvent.temperature);
		
	}
}
     c6c:	6b 96       	adiw	r28, 0x1b	; 27
     c6e:	0f b6       	in	r0, 0x3f	; 63
     c70:	f8 94       	cli
     c72:	de bf       	out	0x3e, r29	; 62
     c74:	0f be       	out	0x3f, r0	; 63
     c76:	cd bf       	out	0x3d, r28	; 61
     c78:	df 91       	pop	r29
     c7a:	cf 91       	pop	r28
     c7c:	1f 91       	pop	r17
     c7e:	0f 91       	pop	r16
     c80:	ff 90       	pop	r15
     c82:	ef 90       	pop	r14
     c84:	df 90       	pop	r13
     c86:	cf 90       	pop	r12
     c88:	bf 90       	pop	r11
     c8a:	af 90       	pop	r10
     c8c:	9f 90       	pop	r9
     c8e:	8f 90       	pop	r8
     c90:	08 95       	ret

00000c92 <loop>:


void loop()
{
	
     c92:	08 95       	ret

00000c94 <_GLOBAL__sub_I_dbFile>:
     c94:	81 e0       	ldi	r24, 0x01	; 1
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	0e 94 f5 04 	call	0x9ea	; 0x9ea <_Z41__static_initialization_and_destruction_0ii.constprop.3>
     c9c:	08 95       	ret

00000c9e <_GLOBAL__sub_D_dbFile>:
     c9e:	80 e0       	ldi	r24, 0x00	; 0
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	0e 94 f5 04 	call	0x9ea	; 0x9ea <_Z41__static_initialization_and_destruction_0ii.constprop.3>
     ca6:	08 95       	ret

00000ca8 <_ZN4File5writeEh>:
boolean File::isDirectory(void) {
  return (_file && _file->isDir());
}


size_t File::write(uint8_t val) {
     ca8:	cf 93       	push	r28
     caa:	df 93       	push	r29
     cac:	0f 92       	push	r0
     cae:	cd b7       	in	r28, 0x3d	; 61
     cb0:	de b7       	in	r29, 0x3e	; 62
     cb2:	69 83       	std	Y+1, r22	; 0x01
  return write(&val, 1);
     cb4:	dc 01       	movw	r26, r24
     cb6:	ed 91       	ld	r30, X+
     cb8:	fc 91       	ld	r31, X
     cba:	02 80       	ldd	r0, Z+2	; 0x02
     cbc:	f3 81       	ldd	r31, Z+3	; 0x03
     cbe:	e0 2d       	mov	r30, r0
     cc0:	be 01       	movw	r22, r28
     cc2:	6f 5f       	subi	r22, 0xFF	; 255
     cc4:	7f 4f       	sbci	r23, 0xFF	; 255
     cc6:	41 e0       	ldi	r20, 0x01	; 1
     cc8:	50 e0       	ldi	r21, 0x00	; 0
     cca:	19 95       	eicall
}
     ccc:	0f 90       	pop	r0
     cce:	df 91       	pop	r29
     cd0:	cf 91       	pop	r28
     cd2:	08 95       	ret

00000cd4 <_ZN4File5flushEv>:

  return n > 0X7FFF ? 0X7FFF : n;
}

void File::flush() {
  if (_file)
     cd4:	fc 01       	movw	r30, r24
     cd6:	81 8d       	ldd	r24, Z+25	; 0x19
     cd8:	92 8d       	ldd	r25, Z+26	; 0x1a
     cda:	00 97       	sbiw	r24, 0x00	; 0
     cdc:	11 f0       	breq	.+4      	; 0xce2 <_ZN4File5flushEv+0xe>
    _file->sync();
     cde:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <_ZN6SdFile4syncEv>
     ce2:	08 95       	ret

00000ce4 <_ZN4File5writeEPKhj>:

size_t File::write(uint8_t val) {
  return write(&val, 1);
}

size_t File::write(const uint8_t *buf, size_t size) {
     ce4:	cf 93       	push	r28
     ce6:	df 93       	push	r29
     ce8:	ec 01       	movw	r28, r24
  size_t t;
  if (!_file) {
     cea:	89 8d       	ldd	r24, Y+25	; 0x19
     cec:	9a 8d       	ldd	r25, Y+26	; 0x1a
     cee:	00 97       	sbiw	r24, 0x00	; 0
     cf0:	61 f0       	breq	.+24     	; 0xd0a <_ZN4File5writeEPKhj+0x26>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
     cf2:	fc 01       	movw	r30, r24
     cf4:	13 82       	std	Z+3, r1	; 0x03
     cf6:	12 82       	std	Z+2, r1	; 0x02
    setWriteError();
    return 0;
  }
  _file->clearWriteError();
  t = _file->write(buf, size);
     cf8:	0e 94 32 12 	call	0x2464	; 0x2464 <_ZN6SdFile5writeEPKvj>

File::operator bool() {
  if (_file) 
    return  _file->isOpen();
  return false;
}
     cfc:	e9 8d       	ldd	r30, Y+25	; 0x19
     cfe:	fa 8d       	ldd	r31, Y+26	; 0x1a
    setWriteError();
    return 0;
  }
  _file->clearWriteError();
  t = _file->write(buf, size);
  if (_file->getWriteError()) {
     d00:	22 81       	ldd	r18, Z+2	; 0x02
     d02:	33 81       	ldd	r19, Z+3	; 0x03
     d04:	21 15       	cp	r18, r1
     d06:	31 05       	cpc	r19, r1
     d08:	31 f0       	breq	.+12     	; 0xd16 <_ZN4File5writeEPKhj+0x32>
     d0a:	81 e0       	ldi	r24, 0x01	; 1
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	9b 83       	std	Y+3, r25	; 0x03
     d10:	8a 83       	std	Y+2, r24	; 0x02
    setWriteError();
    return 0;
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	90 e0       	ldi	r25, 0x00	; 0
  }
  return t;
}
     d16:	df 91       	pop	r29
     d18:	cf 91       	pop	r28
     d1a:	08 95       	ret

00000d1c <_ZN6SdFile4readEv>:
   * Read the next byte from a file.
   *
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int16_t read(void) {
     d1c:	cf 93       	push	r28
     d1e:	df 93       	push	r29
     d20:	0f 92       	push	r0
     d22:	cd b7       	in	r28, 0x3d	; 61
     d24:	de b7       	in	r29, 0x3e	; 62
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
     d26:	be 01       	movw	r22, r28
     d28:	6f 5f       	subi	r22, 0xFF	; 255
     d2a:	7f 4f       	sbci	r23, 0xFF	; 255
     d2c:	41 e0       	ldi	r20, 0x01	; 1
     d2e:	50 e0       	ldi	r21, 0x00	; 0
     d30:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <_ZN6SdFile4readEPvj>
     d34:	81 30       	cpi	r24, 0x01	; 1
     d36:	91 05       	cpc	r25, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <_ZN6SdFile4readEv+0x24>
     d3a:	89 81       	ldd	r24, Y+1	; 0x01
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	02 c0       	rjmp	.+4      	; 0xd44 <_ZN6SdFile4readEv+0x28>
     d40:	8f ef       	ldi	r24, 0xFF	; 255
     d42:	9f ef       	ldi	r25, 0xFF	; 255
  }
     d44:	0f 90       	pop	r0
     d46:	df 91       	pop	r29
     d48:	cf 91       	pop	r28
     d4a:	08 95       	ret

00000d4c <_ZN4File4readEv>:
  if (c != -1) _file->seekCur(-1);
  return c;
}

int File::read() {
  if (_file) 
     d4c:	fc 01       	movw	r30, r24
     d4e:	81 8d       	ldd	r24, Z+25	; 0x19
     d50:	92 8d       	ldd	r25, Z+26	; 0x1a
     d52:	00 97       	sbiw	r24, 0x00	; 0
     d54:	19 f0       	breq	.+6      	; 0xd5c <_ZN4File4readEv+0x10>
    return _file->read();
     d56:	0e 94 8e 06 	call	0xd1c	; 0xd1c <_ZN6SdFile4readEv>
     d5a:	08 95       	ret
  return -1;
     d5c:	8f ef       	ldi	r24, 0xFF	; 255
     d5e:	9f ef       	ldi	r25, 0xFF	; 255
}
     d60:	08 95       	ret

00000d62 <_ZN4File4peekEv>:
    return 0;
  }
  return t;
}

int File::peek() {
     d62:	0f 93       	push	r16
     d64:	1f 93       	push	r17
     d66:	cf 93       	push	r28
     d68:	df 93       	push	r29
     d6a:	ec 01       	movw	r28, r24
  if (! _file) 
     d6c:	89 8d       	ldd	r24, Y+25	; 0x19
     d6e:	9a 8d       	ldd	r25, Y+26	; 0x1a
     d70:	00 97       	sbiw	r24, 0x00	; 0
     d72:	a9 f0       	breq	.+42     	; 0xd9e <_ZN4File4peekEv+0x3c>
    return 0;

  int c = _file->read();
     d74:	0e 94 8e 06 	call	0xd1c	; 0xd1c <_ZN6SdFile4readEv>
     d78:	8c 01       	movw	r16, r24
  if (c != -1) _file->seekCur(-1);
     d7a:	8f ef       	ldi	r24, 0xFF	; 255
     d7c:	0f 3f       	cpi	r16, 0xFF	; 255
     d7e:	18 07       	cpc	r17, r24
     d80:	81 f0       	breq	.+32     	; 0xda2 <_ZN4File4peekEv+0x40>
     d82:	89 8d       	ldd	r24, Y+25	; 0x19
     d84:	9a 8d       	ldd	r25, Y+26	; 0x1a
  }
  uint8_t rmDir(void);
  uint8_t rmRfStar(void);
  /** Set the files position to current position + \a pos. See seekSet(). */
  uint8_t seekCur(uint32_t pos) {
    return seekSet(curPosition_ + pos);
     d86:	fc 01       	movw	r30, r24
     d88:	42 85       	ldd	r20, Z+10	; 0x0a
     d8a:	53 85       	ldd	r21, Z+11	; 0x0b
     d8c:	64 85       	ldd	r22, Z+12	; 0x0c
     d8e:	75 85       	ldd	r23, Z+13	; 0x0d
     d90:	41 50       	subi	r20, 0x01	; 1
     d92:	50 40       	sbci	r21, 0x00	; 0
     d94:	60 40       	sbci	r22, 0x00	; 0
     d96:	70 40       	sbci	r23, 0x00	; 0
     d98:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <_ZN6SdFile7seekSetEm>
     d9c:	02 c0       	rjmp	.+4      	; 0xda2 <_ZN4File4peekEv+0x40>
  return t;
}

int File::peek() {
  if (! _file) 
    return 0;
     d9e:	00 e0       	ldi	r16, 0x00	; 0
     da0:	10 e0       	ldi	r17, 0x00	; 0

  int c = _file->read();
  if (c != -1) _file->seekCur(-1);
  return c;
}
     da2:	c8 01       	movw	r24, r16
     da4:	df 91       	pop	r29
     da6:	cf 91       	pop	r28
     da8:	1f 91       	pop	r17
     daa:	0f 91       	pop	r16
     dac:	08 95       	ret

00000dae <_ZN4FileC1E6SdFilePKc>:

/* for debugging file open/close leaks
   uint8_t nfilecount=0;
*/

File::File(SdFile f, const char *n) {
     dae:	ef 92       	push	r14
     db0:	ff 92       	push	r15
     db2:	0f 93       	push	r16
     db4:	1f 93       	push	r17
     db6:	cf 93       	push	r28
     db8:	df 93       	push	r29
     dba:	0f 92       	push	r0
     dbc:	0f 92       	push	r0
     dbe:	cd b7       	in	r28, 0x3d	; 61
     dc0:	de b7       	in	r29, 0x3e	; 62
     dc2:	7c 01       	movw	r14, r24
     dc4:	8a 01       	movw	r16, r20
  public:
    Print() : write_error(0) {}
     dc6:	dc 01       	movw	r26, r24
     dc8:	13 96       	adiw	r26, 0x03	; 3
     dca:	1c 92       	st	X, r1
     dcc:	1e 92       	st	-X, r1
     dce:	12 97       	sbiw	r26, 0x02	; 2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
     dd0:	88 ee       	ldi	r24, 0xE8	; 232
     dd2:	93 e0       	ldi	r25, 0x03	; 3
     dd4:	a0 e0       	ldi	r26, 0x00	; 0
     dd6:	b0 e0       	ldi	r27, 0x00	; 0
     dd8:	f7 01       	movw	r30, r14
     dda:	84 83       	std	Z+4, r24	; 0x04
     ddc:	95 83       	std	Z+5, r25	; 0x05
     dde:	a6 83       	std	Z+6, r26	; 0x06
     de0:	b7 83       	std	Z+7, r27	; 0x07
     de2:	85 e8       	ldi	r24, 0x85	; 133
     de4:	94 e0       	ldi	r25, 0x04	; 4
     de6:	91 83       	std	Z+1, r25	; 0x01
     de8:	80 83       	st	Z, r24
  // oh man you are kidding me, new() doesnt exist? Ok we do it by hand!
  _file = (SdFile *)malloc(sizeof(SdFile)); 
     dea:	8d e1       	ldi	r24, 0x1D	; 29
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	69 83       	std	Y+1, r22	; 0x01
     df0:	7a 83       	std	Y+2, r23	; 0x02
     df2:	0e 94 c4 18 	call	0x3188	; 0x3188 <malloc>
     df6:	fc 01       	movw	r30, r24
     df8:	d7 01       	movw	r26, r14
     dfa:	5a 96       	adiw	r26, 0x1a	; 26
     dfc:	9c 93       	st	X, r25
     dfe:	8e 93       	st	-X, r24
     e00:	59 97       	sbiw	r26, 0x19	; 25
  if (_file) {
     e02:	69 81       	ldd	r22, Y+1	; 0x01
     e04:	7a 81       	ldd	r23, Y+2	; 0x02
     e06:	00 97       	sbiw	r24, 0x00	; 0
     e08:	79 f0       	breq	.+30     	; 0xe28 <_ZN4FileC1E6SdFilePKc+0x7a>
    memcpy(_file, &f, sizeof(SdFile));
     e0a:	db 01       	movw	r26, r22
     e0c:	8d e1       	ldi	r24, 0x1D	; 29
     e0e:	0d 90       	ld	r0, X+
     e10:	01 92       	st	Z+, r0
     e12:	81 50       	subi	r24, 0x01	; 1
     e14:	e1 f7       	brne	.-8      	; 0xe0e <_ZN4FileC1E6SdFilePKc+0x60>
    
    strncpy(_name, n, 12);
     e16:	c7 01       	movw	r24, r14
     e18:	0c 96       	adiw	r24, 0x0c	; 12
     e1a:	b8 01       	movw	r22, r16
     e1c:	4c e0       	ldi	r20, 0x0C	; 12
     e1e:	50 e0       	ldi	r21, 0x00	; 0
     e20:	0e 94 59 22 	call	0x44b2	; 0x44b2 <strncpy>
    _name[12] = 0;
     e24:	f7 01       	movw	r30, r14
     e26:	10 8e       	std	Z+24, r1	; 0x18
       Serial.print(n);
       Serial.print("\": ");
       Serial.println(nfilecount, DEC);
    */
  }
}
     e28:	0f 90       	pop	r0
     e2a:	0f 90       	pop	r0
     e2c:	df 91       	pop	r29
     e2e:	cf 91       	pop	r28
     e30:	1f 91       	pop	r17
     e32:	0f 91       	pop	r16
     e34:	ff 90       	pop	r15
     e36:	ef 90       	pop	r14
     e38:	08 95       	ret

00000e3a <_ZN4FileC1Ev>:

File::File(void) {
     e3a:	fc 01       	movw	r30, r24
     e3c:	13 82       	std	Z+3, r1	; 0x03
     e3e:	12 82       	std	Z+2, r1	; 0x02
     e40:	48 ee       	ldi	r20, 0xE8	; 232
     e42:	53 e0       	ldi	r21, 0x03	; 3
     e44:	60 e0       	ldi	r22, 0x00	; 0
     e46:	70 e0       	ldi	r23, 0x00	; 0
     e48:	44 83       	std	Z+4, r20	; 0x04
     e4a:	55 83       	std	Z+5, r21	; 0x05
     e4c:	66 83       	std	Z+6, r22	; 0x06
     e4e:	77 83       	std	Z+7, r23	; 0x07
     e50:	85 e8       	ldi	r24, 0x85	; 133
     e52:	94 e0       	ldi	r25, 0x04	; 4
     e54:	91 83       	std	Z+1, r25	; 0x01
     e56:	80 83       	st	Z, r24
  _file = 0;
     e58:	12 8e       	std	Z+26, r1	; 0x1a
     e5a:	11 8e       	std	Z+25, r1	; 0x19
  _name[0] = 0;
     e5c:	14 86       	std	Z+12, r1	; 0x0c
  //Serial.print("Created empty file object");
}
     e5e:	08 95       	ret

00000e60 <_ZN4FileD1Ev>:

File::~File(void) {
     e60:	25 e8       	ldi	r18, 0x85	; 133
     e62:	34 e0       	ldi	r19, 0x04	; 4
     e64:	fc 01       	movw	r30, r24
     e66:	31 83       	std	Z+1, r19	; 0x01
     e68:	20 83       	st	Z, r18
  //  Serial.print("Deleted file object");
}
     e6a:	08 95       	ret

00000e6c <_ZN4File4seekEm>:
  if (_file)
    _file->sync();
}

boolean File::seek(uint32_t pos) {
  if (! _file) return false;
     e6c:	fc 01       	movw	r30, r24
     e6e:	81 8d       	ldd	r24, Z+25	; 0x19
     e70:	92 8d       	ldd	r25, Z+26	; 0x1a
     e72:	00 97       	sbiw	r24, 0x00	; 0
     e74:	19 f0       	breq	.+6      	; 0xe7c <_ZN4File4seekEm+0x10>

  return _file->seekSet(pos);
     e76:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <_ZN6SdFile7seekSetEm>
     e7a:	08 95       	ret
  if (_file)
    _file->sync();
}

boolean File::seek(uint32_t pos) {
  if (! _file) return false;
     e7c:	80 e0       	ldi	r24, 0x00	; 0

  return _file->seekSet(pos);
}
     e7e:	08 95       	ret

00000e80 <_ZN4File8positionEv>:

uint32_t File::position() {
     e80:	0f 93       	push	r16
     e82:	1f 93       	push	r17
  if (! _file) return -1;
     e84:	dc 01       	movw	r26, r24
     e86:	59 96       	adiw	r26, 0x19	; 25
     e88:	ed 91       	ld	r30, X+
     e8a:	fc 91       	ld	r31, X
     e8c:	5a 97       	sbiw	r26, 0x1a	; 26
     e8e:	30 97       	sbiw	r30, 0x00	; 0
     e90:	29 f0       	breq	.+10     	; 0xe9c <_ZN4File8positionEv+0x1c>
  uint8_t createContiguous(SdFile* dirFile,
          const char* fileName, uint32_t size);
  /** \return The current cluster number for a file or directory. */
  uint32_t curCluster(void) const {return curCluster_;}
  /** \return The current position for a file or directory. */
  uint32_t curPosition(void) const {return curPosition_;}
     e92:	02 85       	ldd	r16, Z+10	; 0x0a
     e94:	13 85       	ldd	r17, Z+11	; 0x0b
     e96:	24 85       	ldd	r18, Z+12	; 0x0c
     e98:	35 85       	ldd	r19, Z+13	; 0x0d
  return _file->curPosition();
     e9a:	03 c0       	rjmp	.+6      	; 0xea2 <_ZN4File8positionEv+0x22>

  return _file->seekSet(pos);
}

uint32_t File::position() {
  if (! _file) return -1;
     e9c:	0f ef       	ldi	r16, 0xFF	; 255
     e9e:	1f ef       	ldi	r17, 0xFF	; 255
     ea0:	98 01       	movw	r18, r16
  return _file->curPosition();
}
     ea2:	b8 01       	movw	r22, r16
     ea4:	c9 01       	movw	r24, r18
     ea6:	1f 91       	pop	r17
     ea8:	0f 91       	pop	r16
     eaa:	08 95       	ret

00000eac <_ZN4File4sizeEv>:

uint32_t File::size() {
     eac:	0f 93       	push	r16
     eae:	1f 93       	push	r17
  if (! _file) return 0;
     eb0:	dc 01       	movw	r26, r24
     eb2:	59 96       	adiw	r26, 0x19	; 25
     eb4:	ed 91       	ld	r30, X+
     eb6:	fc 91       	ld	r31, X
     eb8:	5a 97       	sbiw	r26, 0x1a	; 26
     eba:	30 97       	sbiw	r30, 0x00	; 0
     ebc:	29 f0       	breq	.+10     	; 0xec8 <_ZN4File4sizeEv+0x1c>
  uint8_t dirEntry(dir_t* dir);
  /** \return Index of this file's directory in the block dirBlock. */
  uint8_t dirIndex(void) const {return dirIndex_;}
  static void dirName(const dir_t& dir, char* name);
  /** \return The total number of bytes in a file or directory. */
  uint32_t fileSize(void) const {return fileSize_;}
     ebe:	03 89       	ldd	r16, Z+19	; 0x13
     ec0:	14 89       	ldd	r17, Z+20	; 0x14
     ec2:	25 89       	ldd	r18, Z+21	; 0x15
     ec4:	36 89       	ldd	r19, Z+22	; 0x16
  return _file->fileSize();
     ec6:	03 c0       	rjmp	.+6      	; 0xece <_ZN4File4sizeEv+0x22>
  if (! _file) return -1;
  return _file->curPosition();
}

uint32_t File::size() {
  if (! _file) return 0;
     ec8:	00 e0       	ldi	r16, 0x00	; 0
     eca:	10 e0       	ldi	r17, 0x00	; 0
     ecc:	98 01       	movw	r18, r16
  return _file->fileSize();
}
     ece:	b8 01       	movw	r22, r16
     ed0:	c9 01       	movw	r24, r18
     ed2:	1f 91       	pop	r17
     ed4:	0f 91       	pop	r16
     ed6:	08 95       	ret

00000ed8 <_ZN4File9availableEv>:
  if (_file) 
    return _file->read(buf, nbyte);
  return 0;
}

int File::available() {
     ed8:	cf 92       	push	r12
     eda:	df 92       	push	r13
     edc:	ef 92       	push	r14
     ede:	ff 92       	push	r15
     ee0:	cf 93       	push	r28
     ee2:	df 93       	push	r29
     ee4:	ec 01       	movw	r28, r24
  if (! _file) return 0;
     ee6:	89 8d       	ldd	r24, Y+25	; 0x19
     ee8:	9a 8d       	ldd	r25, Y+26	; 0x1a
     eea:	00 97       	sbiw	r24, 0x00	; 0
     eec:	f9 f0       	breq	.+62     	; 0xf2c <_ZN4File9availableEv+0x54>

  uint32_t n = size() - position();
     eee:	ce 01       	movw	r24, r28
     ef0:	0e 94 56 07 	call	0xeac	; 0xeac <_ZN4File4sizeEv>
     ef4:	6b 01       	movw	r12, r22
     ef6:	7c 01       	movw	r14, r24
     ef8:	ce 01       	movw	r24, r28
     efa:	0e 94 40 07 	call	0xe80	; 0xe80 <_ZN4File8positionEv>
     efe:	dc 01       	movw	r26, r24
     f00:	cb 01       	movw	r24, r22
     f02:	c8 1a       	sub	r12, r24
     f04:	d9 0a       	sbc	r13, r25
     f06:	ea 0a       	sbc	r14, r26
     f08:	fb 0a       	sbc	r15, r27

  return n > 0X7FFF ? 0X7FFF : n;
     f0a:	80 e0       	ldi	r24, 0x00	; 0
     f0c:	c8 16       	cp	r12, r24
     f0e:	80 e8       	ldi	r24, 0x80	; 128
     f10:	d8 06       	cpc	r13, r24
     f12:	80 e0       	ldi	r24, 0x00	; 0
     f14:	e8 06       	cpc	r14, r24
     f16:	80 e0       	ldi	r24, 0x00	; 0
     f18:	f8 06       	cpc	r15, r24
     f1a:	30 f0       	brcs	.+12     	; 0xf28 <_ZN4File9availableEv+0x50>
     f1c:	8f ef       	ldi	r24, 0xFF	; 255
     f1e:	c8 2e       	mov	r12, r24
     f20:	8f e7       	ldi	r24, 0x7F	; 127
     f22:	d8 2e       	mov	r13, r24
     f24:	e1 2c       	mov	r14, r1
     f26:	f1 2c       	mov	r15, r1
     f28:	c6 01       	movw	r24, r12
     f2a:	02 c0       	rjmp	.+4      	; 0xf30 <_ZN4File9availableEv+0x58>
    return _file->read(buf, nbyte);
  return 0;
}

int File::available() {
  if (! _file) return 0;
     f2c:	80 e0       	ldi	r24, 0x00	; 0
     f2e:	90 e0       	ldi	r25, 0x00	; 0

  uint32_t n = size() - position();

  return n > 0X7FFF ? 0X7FFF : n;
}
     f30:	df 91       	pop	r29
     f32:	cf 91       	pop	r28
     f34:	ff 90       	pop	r15
     f36:	ef 90       	pop	r14
     f38:	df 90       	pop	r13
     f3a:	cf 90       	pop	r12
     f3c:	08 95       	ret

00000f3e <_ZN7SDClass5beginEh>:

/* Implementation of class used to create `SDCard` object. */



boolean SDClass::begin(uint8_t csPin) {
     f3e:	0f 93       	push	r16
     f40:	1f 93       	push	r17
     f42:	cf 93       	push	r28
     f44:	df 93       	push	r29
     f46:	8c 01       	movw	r16, r24
     f48:	46 2f       	mov	r20, r22
    Performs the initialisation required by the sdfatlib library.

    Return true if initialization succeeds, false otherwise.

   */
  return card.init(SPI_HALF_SPEED, csPin) &&
     f4a:	61 e0       	ldi	r22, 0x01	; 1
     f4c:	0e 94 27 0a 	call	0x144e	; 0x144e <_ZN7Sd2Card4initEhh>
         volume.init(card) &&
         root.openRoot(volume);
     f50:	88 23       	and	r24, r24
     f52:	c1 f0       	breq	.+48     	; 0xf84 <_ZN7SDClass5beginEh+0x46>

    Return true if initialization succeeds, false otherwise.

   */
  return card.init(SPI_HALF_SPEED, csPin) &&
         volume.init(card) &&
     f54:	e8 01       	movw	r28, r16
     f56:	2c 96       	adiw	r28, 0x0c	; 12
   * \return The value one, true, is returned for success and
   * the value zero, false, is returned for failure.  Reasons for
   * failure include not finding a valid partition, not finding a valid
   * FAT file system or an I/O error.
   */
  uint8_t init(Sd2Card* dev) { return init(dev, 1) ? true : init(dev, 0);}
     f58:	ce 01       	movw	r24, r28
     f5a:	b8 01       	movw	r22, r16
     f5c:	41 e0       	ldi	r20, 0x01	; 1
     f5e:	0e 94 98 17 	call	0x2f30	; 0x2f30 <_ZN8SdVolume4initEP7Sd2Cardh>
     f62:	88 23       	and	r24, r24
     f64:	39 f4       	brne	.+14     	; 0xf74 <_ZN7SDClass5beginEh+0x36>
     f66:	ce 01       	movw	r24, r28
     f68:	b8 01       	movw	r22, r16
     f6a:	40 e0       	ldi	r20, 0x00	; 0
     f6c:	0e 94 98 17 	call	0x2f30	; 0x2f30 <_ZN8SdVolume4initEP7Sd2Cardh>
         root.openRoot(volume);
     f70:	88 23       	and	r24, r24
     f72:	41 f0       	breq	.+16     	; 0xf84 <_ZN7SDClass5beginEh+0x46>
   */
  uint8_t open(SdFile& dirFile, uint16_t index, uint8_t oflag) {  // NOLINT
    return open(&dirFile, index, oflag);
  }
  /** \deprecated Use: uint8_t SdFile::openRoot(SdVolume* vol); */
  uint8_t openRoot(SdVolume& vol) {return openRoot(&vol);}  // NOLINT
     f74:	c8 01       	movw	r24, r16
     f76:	8a 96       	adiw	r24, 0x2a	; 42
     f78:	be 01       	movw	r22, r28
     f7a:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <_ZN6SdFile8openRootEP8SdVolume>

/* Implementation of class used to create `SDCard` object. */



boolean SDClass::begin(uint8_t csPin) {
     f7e:	91 e0       	ldi	r25, 0x01	; 1
     f80:	88 23       	and	r24, r24
     f82:	09 f4       	brne	.+2      	; 0xf86 <_ZN7SDClass5beginEh+0x48>
    Return true if initialization succeeds, false otherwise.

   */
  return card.init(SPI_HALF_SPEED, csPin) &&
         volume.init(card) &&
         root.openRoot(volume);
     f84:	90 e0       	ldi	r25, 0x00	; 0
}
     f86:	89 2f       	mov	r24, r25
     f88:	df 91       	pop	r29
     f8a:	cf 91       	pop	r28
     f8c:	1f 91       	pop	r17
     f8e:	0f 91       	pop	r16
     f90:	08 95       	ret

00000f92 <_ZN6SdFileC1ERKS_>:
//------------------------------------------------------------------------------
/**
 * \class SdFile
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
     f92:	fc 01       	movw	r30, r24
     f94:	db 01       	movw	r26, r22
void File::rewindDirectory(void) {  
  if (isDirectory())
    _file->rewind();
}

SDClass SD;
     f96:	12 96       	adiw	r26, 0x02	; 2
     f98:	8d 91       	ld	r24, X+
     f9a:	9c 91       	ld	r25, X
     f9c:	13 97       	sbiw	r26, 0x03	; 3
#define DEC 10
#define HEX 16
#define OCT 8
#define BIN 2

class Print
     f9e:	93 83       	std	Z+3, r25	; 0x03
     fa0:	82 83       	std	Z+2, r24	; 0x02
     fa2:	87 ea       	ldi	r24, 0xA7	; 167
     fa4:	94 e0       	ldi	r25, 0x04	; 4
     fa6:	91 83       	std	Z+1, r25	; 0x01
     fa8:	80 83       	st	Z, r24
     faa:	14 96       	adiw	r26, 0x04	; 4
     fac:	8c 91       	ld	r24, X
     fae:	14 97       	sbiw	r26, 0x04	; 4
     fb0:	84 83       	std	Z+4, r24	; 0x04
     fb2:	15 96       	adiw	r26, 0x05	; 5
     fb4:	8c 91       	ld	r24, X
     fb6:	15 97       	sbiw	r26, 0x05	; 5
     fb8:	85 83       	std	Z+5, r24	; 0x05
     fba:	16 96       	adiw	r26, 0x06	; 6
     fbc:	4d 91       	ld	r20, X+
     fbe:	5d 91       	ld	r21, X+
     fc0:	6d 91       	ld	r22, X+
     fc2:	7c 91       	ld	r23, X
     fc4:	19 97       	sbiw	r26, 0x09	; 9
     fc6:	46 83       	std	Z+6, r20	; 0x06
     fc8:	57 83       	std	Z+7, r21	; 0x07
     fca:	60 87       	std	Z+8, r22	; 0x08
     fcc:	71 87       	std	Z+9, r23	; 0x09
     fce:	1a 96       	adiw	r26, 0x0a	; 10
     fd0:	4d 91       	ld	r20, X+
     fd2:	5d 91       	ld	r21, X+
     fd4:	6d 91       	ld	r22, X+
     fd6:	7c 91       	ld	r23, X
     fd8:	1d 97       	sbiw	r26, 0x0d	; 13
     fda:	42 87       	std	Z+10, r20	; 0x0a
     fdc:	53 87       	std	Z+11, r21	; 0x0b
     fde:	64 87       	std	Z+12, r22	; 0x0c
     fe0:	75 87       	std	Z+13, r23	; 0x0d
     fe2:	1e 96       	adiw	r26, 0x0e	; 14
     fe4:	4d 91       	ld	r20, X+
     fe6:	5d 91       	ld	r21, X+
     fe8:	6d 91       	ld	r22, X+
     fea:	7c 91       	ld	r23, X
     fec:	51 97       	sbiw	r26, 0x11	; 17
     fee:	46 87       	std	Z+14, r20	; 0x0e
     ff0:	57 87       	std	Z+15, r21	; 0x0f
     ff2:	60 8b       	std	Z+16, r22	; 0x10
     ff4:	71 8b       	std	Z+17, r23	; 0x11
     ff6:	52 96       	adiw	r26, 0x12	; 18
     ff8:	8c 91       	ld	r24, X
     ffa:	52 97       	sbiw	r26, 0x12	; 18
     ffc:	82 8b       	std	Z+18, r24	; 0x12
     ffe:	53 96       	adiw	r26, 0x13	; 19
    1000:	4d 91       	ld	r20, X+
    1002:	5d 91       	ld	r21, X+
    1004:	6d 91       	ld	r22, X+
    1006:	7c 91       	ld	r23, X
    1008:	56 97       	sbiw	r26, 0x16	; 22
    100a:	43 8b       	std	Z+19, r20	; 0x13
    100c:	54 8b       	std	Z+20, r21	; 0x14
    100e:	65 8b       	std	Z+21, r22	; 0x15
    1010:	76 8b       	std	Z+22, r23	; 0x16
    1012:	57 96       	adiw	r26, 0x17	; 23
    1014:	4d 91       	ld	r20, X+
    1016:	5d 91       	ld	r21, X+
    1018:	6d 91       	ld	r22, X+
    101a:	7c 91       	ld	r23, X
    101c:	5a 97       	sbiw	r26, 0x1a	; 26
    101e:	47 8b       	std	Z+23, r20	; 0x17
    1020:	50 8f       	std	Z+24, r21	; 0x18
    1022:	61 8f       	std	Z+25, r22	; 0x19
    1024:	72 8f       	std	Z+26, r23	; 0x1a
    1026:	5b 96       	adiw	r26, 0x1b	; 27
    1028:	8d 91       	ld	r24, X+
    102a:	9c 91       	ld	r25, X
    102c:	5c 97       	sbiw	r26, 0x1c	; 28
    102e:	94 8f       	std	Z+28, r25	; 0x1c
    1030:	83 8f       	std	Z+27, r24	; 0x1b
    1032:	08 95       	ret

00001034 <_ZN7SDClass12getParentDirEPKcPi>:
}



// this little helper is used to traverse paths
SdFile SDClass::getParentDir(const char *filepath, int *index) {
    1034:	4f 92       	push	r4
    1036:	5f 92       	push	r5
    1038:	6f 92       	push	r6
    103a:	7f 92       	push	r7
    103c:	8f 92       	push	r8
    103e:	9f 92       	push	r9
    1040:	af 92       	push	r10
    1042:	bf 92       	push	r11
    1044:	cf 92       	push	r12
    1046:	df 92       	push	r13
    1048:	ef 92       	push	r14
    104a:	ff 92       	push	r15
    104c:	0f 93       	push	r16
    104e:	1f 93       	push	r17
    1050:	cf 93       	push	r28
    1052:	df 93       	push	r29
    1054:	cd b7       	in	r28, 0x3d	; 61
    1056:	de b7       	in	r29, 0x3e	; 62
    1058:	c7 54       	subi	r28, 0x47	; 71
    105a:	d0 40       	sbci	r29, 0x00	; 0
    105c:	0f b6       	in	r0, 0x3f	; 63
    105e:	f8 94       	cli
    1060:	de bf       	out	0x3e, r29	; 62
    1062:	0f be       	out	0x3f, r0	; 63
    1064:	cd bf       	out	0x3d, r28	; 61
    1066:	4c 01       	movw	r8, r24
    1068:	3a 01       	movw	r6, r20
    106a:	29 01       	movw	r4, r18
  // get parent directory
  SdFile d1 = root; // start with the mostparent, root!
    106c:	8e 01       	movw	r16, r28
    106e:	05 5d       	subi	r16, 0xD5	; 213
    1070:	1f 4f       	sbci	r17, 0xFF	; 255
    1072:	66 5d       	subi	r22, 0xD6	; 214
    1074:	7f 4f       	sbci	r23, 0xFF	; 255
    1076:	c8 01       	movw	r24, r16
    1078:	0e 94 c9 07 	call	0xf92	; 0xf92 <_ZN6SdFileC1ERKS_>
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    107c:	19 8a       	std	Y+17, r1	; 0x11
    107e:	18 8a       	std	Y+16, r1	; 0x10
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    1080:	87 ea       	ldi	r24, 0xA7	; 167
    1082:	94 e0       	ldi	r25, 0x04	; 4
    1084:	9f 87       	std	Y+15, r25	; 0x0f
    1086:	8e 87       	std	Y+14, r24	; 0x0e
    1088:	1b 8a       	std	Y+19, r1	; 0x13
  SdFile *parent = &d1;
  SdFile *subdir = &d2;
  
  const char *origpath = filepath;

  while (strchr(filepath, '/')) {
    108a:	73 01       	movw	r14, r6
  SdFile d1 = root; // start with the mostparent, root!
  SdFile d2;

  // we'll use the pointers to swap between the two objects
  SdFile *parent = &d1;
  SdFile *subdir = &d2;
    108c:	ae e0       	ldi	r26, 0x0E	; 14
    108e:	aa 2e       	mov	r10, r26
    1090:	b1 2c       	mov	r11, r1
    1092:	ac 0e       	add	r10, r28
    1094:	bd 1e       	adc	r11, r29
  // get parent directory
  SdFile d1 = root; // start with the mostparent, root!
  SdFile d2;

  // we'll use the pointers to swap between the two objects
  SdFile *parent = &d1;
    1096:	68 01       	movw	r12, r16
  SdFile *subdir = &d2;
  
  const char *origpath = filepath;

  while (strchr(filepath, '/')) {
    1098:	3b c0       	rjmp	.+118    	; 0x1110 <_ZN7SDClass12getParentDirEPKcPi+0xdc>

    // get rid of leading /'s
    if (filepath[0] == '/') {
    109a:	f7 01       	movw	r30, r14
    109c:	20 81       	ld	r18, Z
    109e:	2f 32       	cpi	r18, 0x2F	; 47
    10a0:	21 f4       	brne	.+8      	; 0x10aa <_ZN7SDClass12getParentDirEPKcPi+0x76>
      filepath++;
    10a2:	08 94       	sec
    10a4:	e1 1c       	adc	r14, r1
    10a6:	f1 1c       	adc	r15, r1
      continue;
    10a8:	33 c0       	rjmp	.+102    	; 0x1110 <_ZN7SDClass12getParentDirEPKcPi+0xdc>
      // it was in the root directory, so leave now
      break;
    }

    // extract just the name of the next subdirectory
    uint8_t idx = strchr(filepath, '/') - filepath;
    10aa:	8e 19       	sub	r24, r14
    10ac:	8d 30       	cpi	r24, 0x0D	; 13
    10ae:	08 f0       	brcs	.+2      	; 0x10b2 <_ZN7SDClass12getParentDirEPKcPi+0x7e>
    10b0:	8c e0       	ldi	r24, 0x0C	; 12
    if (idx > 12)
      idx = 12;    // dont let them specify long names
    char subdirname[13];
    strncpy(subdirname, filepath, idx);
    10b2:	08 2f       	mov	r16, r24
    10b4:	10 e0       	ldi	r17, 0x00	; 0
    10b6:	ce 01       	movw	r24, r28
    10b8:	01 96       	adiw	r24, 0x01	; 1
    10ba:	b7 01       	movw	r22, r14
    10bc:	a8 01       	movw	r20, r16
    10be:	0e 94 59 22 	call	0x44b2	; 0x44b2 <strncpy>
    subdirname[idx] = 0;
    10c2:	e1 e0       	ldi	r30, 0x01	; 1
    10c4:	f0 e0       	ldi	r31, 0x00	; 0
    10c6:	ec 0f       	add	r30, r28
    10c8:	fd 1f       	adc	r31, r29
    10ca:	e0 0f       	add	r30, r16
    10cc:	f1 1f       	adc	r31, r17
    10ce:	10 82       	st	Z, r1

    // close the subdir (we reuse them) if open
    subdir->close();
    10d0:	c5 01       	movw	r24, r10
    10d2:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <_ZN6SdFile5closeEv>
    if (! subdir->open(parent, subdirname, O_READ)) {
    10d6:	c5 01       	movw	r24, r10
    10d8:	b6 01       	movw	r22, r12
    10da:	ae 01       	movw	r20, r28
    10dc:	4f 5f       	subi	r20, 0xFF	; 255
    10de:	5f 4f       	sbci	r21, 0xFF	; 255
    10e0:	21 e0       	ldi	r18, 0x01	; 1
    10e2:	0e 94 3c 11 	call	0x2278	; 0x2278 <_ZN6SdFile4openEPS_PKch>
    10e6:	88 23       	and	r24, r24
    10e8:	49 f4       	brne	.+18     	; 0x10fc <_ZN7SDClass12getParentDirEPKcPi+0xc8>
    10ea:	f4 01       	movw	r30, r8
    10ec:	13 82       	std	Z+3, r1	; 0x03
    10ee:	12 82       	std	Z+2, r1	; 0x02
    10f0:	87 ea       	ldi	r24, 0xA7	; 167
    10f2:	94 e0       	ldi	r25, 0x04	; 4
    10f4:	91 83       	std	Z+1, r25	; 0x01
    10f6:	80 83       	st	Z, r24
    10f8:	15 82       	std	Z+5, r1	; 0x05
    10fa:	1b c0       	rjmp	.+54     	; 0x1132 <_ZN7SDClass12getParentDirEPKcPi+0xfe>
      // failed to open one of the subdirectories
      return SdFile();
    }
    // move forward to the next subdirectory
    filepath += idx;
    10fc:	e0 0e       	add	r14, r16
    10fe:	f1 1e       	adc	r15, r17

    // we reuse the objects, close it.
    parent->close();
    1100:	c6 01       	movw	r24, r12
    1102:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <_ZN6SdFile5closeEv>
    1106:	9c 2d       	mov	r25, r12
    1108:	8d 2d       	mov	r24, r13

    // swap the pointers
    SdFile *t = parent;
    parent = subdir;
    110a:	65 01       	movw	r12, r10
    }
    // move forward to the next subdirectory
    filepath += idx;

    // we reuse the objects, close it.
    parent->close();
    110c:	a9 2e       	mov	r10, r25
    110e:	b8 2e       	mov	r11, r24
  SdFile *parent = &d1;
  SdFile *subdir = &d2;
  
  const char *origpath = filepath;

  while (strchr(filepath, '/')) {
    1110:	c7 01       	movw	r24, r14
    1112:	6f e2       	ldi	r22, 0x2F	; 47
    1114:	70 e0       	ldi	r23, 0x00	; 0
    1116:	0e 94 4e 22 	call	0x449c	; 0x449c <strchr>
    111a:	00 97       	sbiw	r24, 0x00	; 0
    111c:	09 f0       	breq	.+2      	; 0x1120 <_ZN7SDClass12getParentDirEPKcPi+0xec>
    111e:	bd cf       	rjmp	.-134    	; 0x109a <_ZN7SDClass12getParentDirEPKcPi+0x66>
    SdFile *t = parent;
    parent = subdir;
    subdir = t;
  }

  *index = (int)(filepath - origpath);
    1120:	e6 18       	sub	r14, r6
    1122:	f7 08       	sbc	r15, r7
    1124:	f2 01       	movw	r30, r4
    1126:	f1 82       	std	Z+1, r15	; 0x01
    1128:	e0 82       	st	Z, r14
  // parent is now the parent diretory of the file!
  return *parent;
    112a:	c4 01       	movw	r24, r8
    112c:	b6 01       	movw	r22, r12
    112e:	0e 94 c9 07 	call	0xf92	; 0xf92 <_ZN6SdFileC1ERKS_>
}
    1132:	c4 01       	movw	r24, r8
    1134:	c9 5b       	subi	r28, 0xB9	; 185
    1136:	df 4f       	sbci	r29, 0xFF	; 255
    1138:	0f b6       	in	r0, 0x3f	; 63
    113a:	f8 94       	cli
    113c:	de bf       	out	0x3e, r29	; 62
    113e:	0f be       	out	0x3f, r0	; 63
    1140:	cd bf       	out	0x3d, r28	; 61
    1142:	df 91       	pop	r29
    1144:	cf 91       	pop	r28
    1146:	1f 91       	pop	r17
    1148:	0f 91       	pop	r16
    114a:	ff 90       	pop	r15
    114c:	ef 90       	pop	r14
    114e:	df 90       	pop	r13
    1150:	cf 90       	pop	r12
    1152:	bf 90       	pop	r11
    1154:	af 90       	pop	r10
    1156:	9f 90       	pop	r9
    1158:	8f 90       	pop	r8
    115a:	7f 90       	pop	r7
    115c:	6f 90       	pop	r6
    115e:	5f 90       	pop	r5
    1160:	4f 90       	pop	r4
    1162:	08 95       	ret

00001164 <_ZN7SDClass4openEPKch>:


File SDClass::open(const char *filepath, uint8_t mode) {
    1164:	af 92       	push	r10
    1166:	bf 92       	push	r11
    1168:	df 92       	push	r13
    116a:	ef 92       	push	r14
    116c:	ff 92       	push	r15
    116e:	0f 93       	push	r16
    1170:	1f 93       	push	r17
    1172:	cf 93       	push	r28
    1174:	df 93       	push	r29
    1176:	cd b7       	in	r28, 0x3d	; 61
    1178:	de b7       	in	r29, 0x3e	; 62
    117a:	c6 57       	subi	r28, 0x76	; 118
    117c:	d0 40       	sbci	r29, 0x00	; 0
    117e:	0f b6       	in	r0, 0x3f	; 63
    1180:	f8 94       	cli
    1182:	de bf       	out	0x3e, r29	; 62
    1184:	0f be       	out	0x3f, r0	; 63
    1186:	cd bf       	out	0x3d, r28	; 61
    1188:	7c 01       	movw	r14, r24
    118a:	5a 01       	movw	r10, r20
    118c:	d2 2e       	mov	r13, r18
   */

  int pathidx;

  // do the interative search
  SdFile parentdir = getParentDir(filepath, &pathidx);
    118e:	ce 01       	movw	r24, r28
    1190:	86 5a       	subi	r24, 0xA6	; 166
    1192:	9f 4f       	sbci	r25, 0xFF	; 255
    1194:	9e 01       	movw	r18, r28
    1196:	2f 5f       	subi	r18, 0xFF	; 255
    1198:	3f 4f       	sbci	r19, 0xFF	; 255
    119a:	0e 94 1a 08 	call	0x1034	; 0x1034 <_ZN7SDClass12getParentDirEPKcPi>
  // no more subdirs!

  filepath += pathidx;
    119e:	09 81       	ldd	r16, Y+1	; 0x01
    11a0:	1a 81       	ldd	r17, Y+2	; 0x02
    11a2:	0a 0d       	add	r16, r10
    11a4:	1b 1d       	adc	r17, r11

  if (! filepath[0]) {
    11a6:	f8 01       	movw	r30, r16
    11a8:	80 81       	ld	r24, Z
    11aa:	88 23       	and	r24, r24
    11ac:	71 f4       	brne	.+28     	; 0x11ca <_ZN7SDClass4openEPKch+0x66>
    // it was the directory itself!
    return File(parentdir, "/");
    11ae:	ce 01       	movw	r24, r28
    11b0:	cd 96       	adiw	r24, 0x3d	; 61
    11b2:	be 01       	movw	r22, r28
    11b4:	66 5a       	subi	r22, 0xA6	; 166
    11b6:	7f 4f       	sbci	r23, 0xFF	; 255
    11b8:	0e 94 c9 07 	call	0xf92	; 0xf92 <_ZN6SdFileC1ERKS_>
    11bc:	c7 01       	movw	r24, r14
    11be:	be 01       	movw	r22, r28
    11c0:	63 5c       	subi	r22, 0xC3	; 195
    11c2:	7f 4f       	sbci	r23, 0xFF	; 255
    11c4:	41 ea       	ldi	r20, 0xA1	; 161
    11c6:	54 e0       	ldi	r21, 0x04	; 4
    11c8:	45 c0       	rjmp	.+138    	; 0x1254 <_ZN7SDClass4openEPKch+0xf0>
    11ca:	1b a2       	lds	r17, 0x9b
    11cc:	1a a2       	lds	r17, 0x9a
    11ce:	87 ea       	ldi	r24, 0xA7	; 167
    11d0:	94 e0       	ldi	r25, 0x04	; 4
    11d2:	99 a3       	lds	r25, 0x59
    11d4:	88 a3       	lds	r24, 0x58
    11d6:	1d a2       	lds	r17, 0x9d

  // Open the file itself
  SdFile file;

  // failed to open a subdir!
  if (!parentdir.isOpen())
    11d8:	a0 96       	adiw	r28, 0x20	; 32
    11da:	8f ad       	sts	0x6f, r24
    11dc:	a0 97       	sbiw	r28, 0x20	; 32
    11de:	88 23       	and	r24, r24
    11e0:	c9 f0       	breq	.+50     	; 0x1214 <_ZN7SDClass4openEPKch+0xb0>
  uint8_t isOpen(void) const {return type_ != FAT_FILE_TYPE_CLOSED;}
  /** \return True if this is a SdFile for a subdirectory else false. */
  uint8_t isSubDir(void) const {return type_ == FAT_FILE_TYPE_SUBDIR;}
  /** \return True if this is a SdFile for the root directory. */
  uint8_t isRoot(void) const {
    return type_ == FAT_FILE_TYPE_ROOT16 || type_ == FAT_FILE_TYPE_ROOT32;
    11e2:	82 50       	subi	r24, 0x02	; 2
    return File();

  // there is a special case for the Root directory since its a static dir
  if (parentdir.isRoot()) {
    11e4:	82 30       	cpi	r24, 0x02	; 2
    11e6:	58 f4       	brcc	.+22     	; 0x11fe <_ZN7SDClass4openEPKch+0x9a>
  /** \deprecated Use:
   * uint8_t SdFile::open(SdFile* dirFile, const char* fileName, uint8_t oflag);
   */
  uint8_t open(SdFile& dirFile, // NOLINT
    const char* fileName, uint8_t oflag) {
    return open(&dirFile, fileName, oflag);
    11e8:	ce 01       	movw	r24, r28
    11ea:	80 96       	adiw	r24, 0x20	; 32
    11ec:	63 e3       	ldi	r22, 0x33	; 51
    11ee:	75 e0       	ldi	r23, 0x05	; 5
    11f0:	a8 01       	movw	r20, r16
    11f2:	2d 2d       	mov	r18, r13
    11f4:	0e 94 3c 11 	call	0x2278	; 0x2278 <_ZN6SdFile4openEPS_PKch>
    if ( ! file.open(SD.root, filepath, mode)) {
    11f8:	88 23       	and	r24, r24
    11fa:	a9 f4       	brne	.+42     	; 0x1226 <_ZN7SDClass4openEPKch+0xc2>
    11fc:	0b c0       	rjmp	.+22     	; 0x1214 <_ZN7SDClass4openEPKch+0xb0>
    11fe:	ce 01       	movw	r24, r28
    1200:	80 96       	adiw	r24, 0x20	; 32
    1202:	be 01       	movw	r22, r28
    1204:	66 5a       	subi	r22, 0xA6	; 166
    1206:	7f 4f       	sbci	r23, 0xFF	; 255
    1208:	a8 01       	movw	r20, r16
    120a:	2d 2d       	mov	r18, r13
    120c:	0e 94 3c 11 	call	0x2278	; 0x2278 <_ZN6SdFile4openEPS_PKch>
      // failed to open the file :(
      return File();
    }
    // dont close the root!
  } else {
    if ( ! file.open(parentdir, filepath, mode)) {
    1210:	88 23       	and	r24, r24
    1212:	21 f4       	brne	.+8      	; 0x121c <_ZN7SDClass4openEPKch+0xb8>
      return File();
    1214:	c7 01       	movw	r24, r14
    1216:	0e 94 1d 07 	call	0xe3a	; 0xe3a <_ZN4FileC1Ev>
    121a:	1e c0       	rjmp	.+60     	; 0x1258 <_ZN7SDClass4openEPKch+0xf4>
    }
    // close the parent
    parentdir.close();
    121c:	ce 01       	movw	r24, r28
    121e:	86 5a       	subi	r24, 0xA6	; 166
    1220:	9f 4f       	sbci	r25, 0xFF	; 255
    1222:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <_ZN6SdFile5closeEv>
  }

  if (mode & (O_APPEND | O_WRITE)) 
    1226:	8d 2d       	mov	r24, r13
    1228:	86 70       	andi	r24, 0x06	; 6
    122a:	41 f0       	breq	.+16     	; 0x123c <_ZN7SDClass4openEPKch+0xd8>
    file.seekSet(file.fileSize());
    122c:	4b a9       	sts	0x4b, r20
    122e:	5c a9       	sts	0x4c, r21
    1230:	6d a9       	sts	0x4d, r22
    1232:	7e a9       	sts	0x4e, r23
    1234:	ce 01       	movw	r24, r28
    1236:	80 96       	adiw	r24, 0x20	; 32
    1238:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <_ZN6SdFile7seekSetEm>
  return File(file, filepath);
    123c:	ce 01       	movw	r24, r28
    123e:	03 96       	adiw	r24, 0x03	; 3
    1240:	be 01       	movw	r22, r28
    1242:	60 5e       	subi	r22, 0xE0	; 224
    1244:	7f 4f       	sbci	r23, 0xFF	; 255
    1246:	0e 94 c9 07 	call	0xf92	; 0xf92 <_ZN6SdFileC1ERKS_>
    124a:	c7 01       	movw	r24, r14
    124c:	be 01       	movw	r22, r28
    124e:	6d 5f       	subi	r22, 0xFD	; 253
    1250:	7f 4f       	sbci	r23, 0xFF	; 255
    1252:	a8 01       	movw	r20, r16
    1254:	0e 94 d7 06 	call	0xdae	; 0xdae <_ZN4FileC1E6SdFilePKc>
}
    1258:	c7 01       	movw	r24, r14
    125a:	ca 58       	subi	r28, 0x8A	; 138
    125c:	df 4f       	sbci	r29, 0xFF	; 255
    125e:	0f b6       	in	r0, 0x3f	; 63
    1260:	f8 94       	cli
    1262:	de bf       	out	0x3e, r29	; 62
    1264:	0f be       	out	0x3f, r0	; 63
    1266:	cd bf       	out	0x3d, r28	; 61
    1268:	df 91       	pop	r29
    126a:	cf 91       	pop	r28
    126c:	1f 91       	pop	r17
    126e:	0f 91       	pop	r16
    1270:	ff 90       	pop	r15
    1272:	ef 90       	pop	r14
    1274:	df 90       	pop	r13
    1276:	bf 90       	pop	r11
    1278:	af 90       	pop	r10
    127a:	08 95       	ret

0000127c <_GLOBAL__sub_I__Z20getNextPathComponentPcPjS_>:
 * \brief Raw access to SD and SDHC flash memory cards.
 */
class Sd2Card {
 public:
  /** Construct an instance of Sd2Card. */
  Sd2Card(void) : errorCode_(0), inBlock_(0), partialBlockRead_(0), type_(0) {}
    127c:	10 92 0e 05 	sts	0x050E, r1
    1280:	10 92 0f 05 	sts	0x050F, r1
    1284:	10 92 12 05 	sts	0x0512, r1
    1288:	10 92 14 05 	sts	0x0514, r1
 * \brief Access FAT16 and FAT32 volumes on SD and SDHC cards.
 */
class SdVolume {
 public:
  /** Create an instance of SdVolume */
  SdVolume(void) :allocSearchStart_(2), fatType_(0) {}
    128c:	82 e0       	ldi	r24, 0x02	; 2
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	a0 e0       	ldi	r26, 0x00	; 0
    1292:	b0 e0       	ldi	r27, 0x00	; 0
    1294:	80 93 15 05 	sts	0x0515, r24
    1298:	90 93 16 05 	sts	0x0516, r25
    129c:	a0 93 17 05 	sts	0x0517, r26
    12a0:	b0 93 18 05 	sts	0x0518, r27
    12a4:	10 92 2c 05 	sts	0x052C, r1
    12a8:	10 92 36 05 	sts	0x0536, r1
    12ac:	10 92 35 05 	sts	0x0535, r1
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    12b0:	87 ea       	ldi	r24, 0xA7	; 167
    12b2:	94 e0       	ldi	r25, 0x04	; 4
    12b4:	90 93 34 05 	sts	0x0534, r25
    12b8:	80 93 33 05 	sts	0x0533, r24
    12bc:	10 92 38 05 	sts	0x0538, r1
void File::rewindDirectory(void) {  
  if (isDirectory())
    _file->rewind();
}

SDClass SD;
    12c0:	08 95       	ret

000012c2 <_ZL7spiSendh>:
//------------------------------------------------------------------------------
#ifndef SOFTWARE_SPI
// functions for hardware SPI
/** Send a byte to the card */
static void spiSend(uint8_t b) {
  SPDR = b;
    12c2:	8e bd       	out	0x2e, r24	; 46
  while (!(SPSR & (1 << SPIF)));
    12c4:	0d b4       	in	r0, 0x2d	; 45
    12c6:	07 fe       	sbrs	r0, 7
    12c8:	fd cf       	rjmp	.-6      	; 0x12c4 <_ZL7spiSendh+0x2>
}
    12ca:	08 95       	ret

000012cc <_ZL6spiRecv>:
/** Receive a byte from the card */
static  uint8_t spiRec(void) {
  spiSend(0XFF);
    12cc:	8f ef       	ldi	r24, 0xFF	; 255
    12ce:	0e 94 61 09 	call	0x12c2	; 0x12c2 <_ZL7spiSendh>
  return SPDR;
    12d2:	8e b5       	in	r24, 0x2e	; 46
}
    12d4:	08 95       	ret

000012d6 <_ZN7Sd2Card14chipSelectHighEv>:
    return 0;
  }
}
//------------------------------------------------------------------------------
void Sd2Card::chipSelectHigh(void) {
  digitalWrite(chipSelectPin_, HIGH);
    12d6:	fc 01       	movw	r30, r24
    12d8:	84 81       	ldd	r24, Z+4	; 0x04
    12da:	61 e0       	ldi	r22, 0x01	; 1
    12dc:	0e 94 6e 1b 	call	0x36dc	; 0x36dc <digitalWrite>
}
    12e0:	08 95       	ret

000012e2 <_ZN7Sd2Card13chipSelectLowEv>:
//------------------------------------------------------------------------------
void Sd2Card::chipSelectLow(void) {
  digitalWrite(chipSelectPin_, LOW);
    12e2:	fc 01       	movw	r30, r24
    12e4:	84 81       	ldd	r24, Z+4	; 0x04
    12e6:	60 e0       	ldi	r22, 0x00	; 0
    12e8:	0e 94 6e 1b 	call	0x36dc	; 0x36dc <digitalWrite>
}
    12ec:	08 95       	ret

000012ee <_ZN7Sd2Card7readEndEv>:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
/** Skip remaining data in a block when in partial block read mode. */
void Sd2Card::readEnd(void) {
    12ee:	cf 93       	push	r28
    12f0:	df 93       	push	r29
    12f2:	ec 01       	movw	r28, r24
  if (inBlock_) {
    12f4:	8e 81       	ldd	r24, Y+6	; 0x06
    12f6:	88 23       	and	r24, r24
    12f8:	d1 f0       	breq	.+52     	; 0x132e <_ZN7Sd2Card7readEndEv+0x40>
      // skip data and crc
#ifdef OPTIMIZE_HARDWARE_SPI
    // optimize skip for hardware
    SPDR = 0XFF;
    12fa:	8f ef       	ldi	r24, 0xFF	; 255
    12fc:	8e bd       	out	0x2e, r24	; 46
    while (offset_++ < 513) {
      while (!(SPSR & (1 << SPIF)));
      SPDR = 0XFF;
    12fe:	4f ef       	ldi	r20, 0xFF	; 255
    1300:	04 c0       	rjmp	.+8      	; 0x130a <_ZN7Sd2Card7readEndEv+0x1c>
      // skip data and crc
#ifdef OPTIMIZE_HARDWARE_SPI
    // optimize skip for hardware
    SPDR = 0XFF;
    while (offset_++ < 513) {
      while (!(SPSR & (1 << SPIF)));
    1302:	0d b4       	in	r0, 0x2d	; 45
    1304:	07 fe       	sbrs	r0, 7
    1306:	fd cf       	rjmp	.-6      	; 0x1302 <_ZN7Sd2Card7readEndEv+0x14>
      SPDR = 0XFF;
    1308:	4e bd       	out	0x2e, r20	; 46
  if (inBlock_) {
      // skip data and crc
#ifdef OPTIMIZE_HARDWARE_SPI
    // optimize skip for hardware
    SPDR = 0XFF;
    while (offset_++ < 513) {
    130a:	8f 81       	ldd	r24, Y+7	; 0x07
    130c:	98 85       	ldd	r25, Y+8	; 0x08
    130e:	9c 01       	movw	r18, r24
    1310:	2f 5f       	subi	r18, 0xFF	; 255
    1312:	3f 4f       	sbci	r19, 0xFF	; 255
    1314:	38 87       	std	Y+8, r19	; 0x08
    1316:	2f 83       	std	Y+7, r18	; 0x07
    1318:	22 e0       	ldi	r18, 0x02	; 2
    131a:	81 30       	cpi	r24, 0x01	; 1
    131c:	92 07       	cpc	r25, r18
    131e:	88 f3       	brcs	.-30     	; 0x1302 <_ZN7Sd2Card7readEndEv+0x14>
      while (!(SPSR & (1 << SPIF)));
      SPDR = 0XFF;
    }
    // wait for last crc byte
    while (!(SPSR & (1 << SPIF)));
    1320:	0d b4       	in	r0, 0x2d	; 45
    1322:	07 fe       	sbrs	r0, 7
    1324:	fd cf       	rjmp	.-6      	; 0x1320 <_ZN7Sd2Card7readEndEv+0x32>
#else  // OPTIMIZE_HARDWARE_SPI
    while (offset_++ < 514) spiRec();
#endif  // OPTIMIZE_HARDWARE_SPI
    chipSelectHigh();
    1326:	ce 01       	movw	r24, r28
    1328:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <_ZN7Sd2Card14chipSelectHighEv>
    inBlock_ = 0;
    132c:	1e 82       	std	Y+6, r1	; 0x06
  }
}
    132e:	df 91       	pop	r29
    1330:	cf 91       	pop	r28
    1332:	08 95       	ret

00001334 <_ZN7Sd2Card10setSckRateEh>:
 *
 * \return The value one, true, is returned for success and the value zero,
 * false, is returned for an invalid value of \a sckRateID.
 */
uint8_t Sd2Card::setSckRate(uint8_t sckRateID) {
  if (sckRateID > 6) {
    1334:	67 30       	cpi	r22, 0x07	; 7
    1336:	28 f0       	brcs	.+10     	; 0x1342 <_ZN7Sd2Card10setSckRateEh+0xe>
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    return cardCommand(cmd, arg);
  }
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  void error(uint8_t code) {errorCode_ = code;}
    1338:	26 e1       	ldi	r18, 0x16	; 22
    133a:	fc 01       	movw	r30, r24
    133c:	25 83       	std	Z+5, r18	; 0x05
    error(SD_CARD_ERROR_SCK_RATE);
    return false;
    133e:	80 e0       	ldi	r24, 0x00	; 0
    1340:	08 95       	ret
  }
  // see avr processor datasheet for SPI register bit definitions
  if ((sckRateID & 1) || sckRateID == 6) {
    1342:	96 2f       	mov	r25, r22
    SPSR &= ~(1 << SPI2X);
    1344:	8d b5       	in	r24, 0x2d	; 45
  if (sckRateID > 6) {
    error(SD_CARD_ERROR_SCK_RATE);
    return false;
  }
  // see avr processor datasheet for SPI register bit definitions
  if ((sckRateID & 1) || sckRateID == 6) {
    1346:	60 fd       	sbrc	r22, 0
    1348:	02 c0       	rjmp	.+4      	; 0x134e <_ZN7Sd2Card10setSckRateEh+0x1a>
    134a:	66 30       	cpi	r22, 0x06	; 6
    134c:	11 f4       	brne	.+4      	; 0x1352 <_ZN7Sd2Card10setSckRateEh+0x1e>
    SPSR &= ~(1 << SPI2X);
    134e:	8e 7f       	andi	r24, 0xFE	; 254
    1350:	01 c0       	rjmp	.+2      	; 0x1354 <_ZN7Sd2Card10setSckRateEh+0x20>
  } else {
    SPSR |= (1 << SPI2X);
    1352:	81 60       	ori	r24, 0x01	; 1
    1354:	8d bd       	out	0x2d, r24	; 45
  }
  SPCR &= ~((1 <<SPR1) | (1 << SPR0));
    1356:	8c b5       	in	r24, 0x2c	; 44
    1358:	8c 7f       	andi	r24, 0xFC	; 252
    135a:	8c bd       	out	0x2c, r24	; 44
  SPCR |= (sckRateID & 4 ? (1 << SPR1) : 0)
    | (sckRateID & 2 ? (1 << SPR0) : 0);
    135c:	3c b5       	in	r19, 0x2c	; 44
    135e:	92 ff       	sbrs	r25, 2
    1360:	02 c0       	rjmp	.+4      	; 0x1366 <_ZN7Sd2Card10setSckRateEh+0x32>
    1362:	22 e0       	ldi	r18, 0x02	; 2
    1364:	01 c0       	rjmp	.+2      	; 0x1368 <_ZN7Sd2Card10setSckRateEh+0x34>
    1366:	20 e0       	ldi	r18, 0x00	; 0
    1368:	81 e0       	ldi	r24, 0x01	; 1
    136a:	91 ff       	sbrs	r25, 1
    136c:	80 e0       	ldi	r24, 0x00	; 0
    136e:	83 2b       	or	r24, r19
    1370:	82 2b       	or	r24, r18
    1372:	8c bd       	out	0x2c, r24	; 44
  return true;
    1374:	81 e0       	ldi	r24, 0x01	; 1
}
    1376:	08 95       	ret

00001378 <_ZN7Sd2Card11waitNotBusyEj>:
//------------------------------------------------------------------------------
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(uint16_t timeoutMillis) {
    1378:	0f 93       	push	r16
    137a:	1f 93       	push	r17
    137c:	cf 93       	push	r28
    137e:	df 93       	push	r29
    1380:	eb 01       	movw	r28, r22
  uint16_t t0 = millis();
    1382:	0e 94 41 1a 	call	0x3482	; 0x3482 <millis>
    1386:	8b 01       	movw	r16, r22
    1388:	9c 01       	movw	r18, r24
  do {
    if (spiRec() == 0XFF) return true;
    138a:	0e 94 66 09 	call	0x12cc	; 0x12cc <_ZL6spiRecv>
    138e:	8f 3f       	cpi	r24, 0xFF	; 255
    1390:	49 f0       	breq	.+18     	; 0x13a4 <_ZN7Sd2Card11waitNotBusyEj+0x2c>
  }
  while (((uint16_t)millis() - t0) < timeoutMillis);
    1392:	0e 94 41 1a 	call	0x3482	; 0x3482 <millis>
}
//------------------------------------------------------------------------------
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(uint16_t timeoutMillis) {
  uint16_t t0 = millis();
  do {
    1396:	60 1b       	sub	r22, r16
    1398:	71 0b       	sbc	r23, r17
    139a:	6c 17       	cp	r22, r28
    139c:	7d 07       	cpc	r23, r29
    139e:	a8 f3       	brcs	.-22     	; 0x138a <_ZN7Sd2Card11waitNotBusyEj+0x12>
    if (spiRec() == 0XFF) return true;
  }
  while (((uint16_t)millis() - t0) < timeoutMillis);
  return false;
    13a0:	80 e0       	ldi	r24, 0x00	; 0
    13a2:	01 c0       	rjmp	.+2      	; 0x13a6 <_ZN7Sd2Card11waitNotBusyEj+0x2e>
//------------------------------------------------------------------------------
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(uint16_t timeoutMillis) {
  uint16_t t0 = millis();
  do {
    if (spiRec() == 0XFF) return true;
    13a4:	81 e0       	ldi	r24, 0x01	; 1
  }
  while (((uint16_t)millis() - t0) < timeoutMillis);
  return false;
}
    13a6:	df 91       	pop	r29
    13a8:	cf 91       	pop	r28
    13aa:	1f 91       	pop	r17
    13ac:	0f 91       	pop	r16
    13ae:	08 95       	ret

000013b0 <_ZN7Sd2Card11cardCommandEhm>:
  sei();
}
#endif  // SOFTWARE_SPI
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t Sd2Card::cardCommand(uint8_t cmd, uint32_t arg) {
    13b0:	8f 92       	push	r8
    13b2:	9f 92       	push	r9
    13b4:	af 92       	push	r10
    13b6:	bf 92       	push	r11
    13b8:	ff 92       	push	r15
    13ba:	0f 93       	push	r16
    13bc:	1f 93       	push	r17
    13be:	cf 93       	push	r28
    13c0:	df 93       	push	r29
    13c2:	8c 01       	movw	r16, r24
    13c4:	f6 2e       	mov	r15, r22
    13c6:	49 01       	movw	r8, r18
    13c8:	5a 01       	movw	r10, r20
  // end read if in partialBlockRead mode
  readEnd();
    13ca:	0e 94 77 09 	call	0x12ee	; 0x12ee <_ZN7Sd2Card7readEndEv>

  // select card
  chipSelectLow();
    13ce:	c8 01       	movw	r24, r16
    13d0:	0e 94 71 09 	call	0x12e2	; 0x12e2 <_ZN7Sd2Card13chipSelectLowEv>

  // wait up to 300 ms if busy
  waitNotBusy(300);
    13d4:	c8 01       	movw	r24, r16
    13d6:	6c e2       	ldi	r22, 0x2C	; 44
    13d8:	71 e0       	ldi	r23, 0x01	; 1
    13da:	0e 94 bc 09 	call	0x1378	; 0x1378 <_ZN7Sd2Card11waitNotBusyEj>

  // send command
  spiSend(cmd | 0x40);
    13de:	8f 2d       	mov	r24, r15
    13e0:	80 64       	ori	r24, 0x40	; 64
    13e2:	0e 94 61 09 	call	0x12c2	; 0x12c2 <_ZL7spiSendh>
    13e6:	c8 e1       	ldi	r28, 0x18	; 24
    13e8:	d0 e0       	ldi	r29, 0x00	; 0

  // send argument
  for (int8_t s = 24; s >= 0; s -= 8) spiSend(arg >> s);
    13ea:	d5 01       	movw	r26, r10
    13ec:	c4 01       	movw	r24, r8
    13ee:	0c 2e       	mov	r0, r28
    13f0:	04 c0       	rjmp	.+8      	; 0x13fa <_ZN7Sd2Card11cardCommandEhm+0x4a>
    13f2:	b6 95       	lsr	r27
    13f4:	a7 95       	ror	r26
    13f6:	97 95       	ror	r25
    13f8:	87 95       	ror	r24
    13fa:	0a 94       	dec	r0
    13fc:	d2 f7       	brpl	.-12     	; 0x13f2 <_ZN7Sd2Card11cardCommandEhm+0x42>
    13fe:	0e 94 61 09 	call	0x12c2	; 0x12c2 <_ZL7spiSendh>
    1402:	28 97       	sbiw	r28, 0x08	; 8
    1404:	8f ef       	ldi	r24, 0xFF	; 255
    1406:	c8 3f       	cpi	r28, 0xF8	; 248
    1408:	d8 07       	cpc	r29, r24
    140a:	79 f7       	brne	.-34     	; 0x13ea <_ZN7Sd2Card11cardCommandEhm+0x3a>

  // send CRC
  uint8_t crc = 0XFF;
  if (cmd == CMD0) crc = 0X95;  // correct crc for CMD0 with arg 0
    140c:	ff 20       	and	r15, r15
    140e:	29 f0       	breq	.+10     	; 0x141a <_ZN7Sd2Card11cardCommandEhm+0x6a>
  if (cmd == CMD8) crc = 0X87;  // correct crc for CMD8 with arg 0X1AA
    1410:	e8 e0       	ldi	r30, 0x08	; 8
    1412:	fe 16       	cp	r15, r30
    1414:	21 f0       	breq	.+8      	; 0x141e <_ZN7Sd2Card11cardCommandEhm+0x6e>

  // send argument
  for (int8_t s = 24; s >= 0; s -= 8) spiSend(arg >> s);

  // send CRC
  uint8_t crc = 0XFF;
    1416:	8f ef       	ldi	r24, 0xFF	; 255
    1418:	03 c0       	rjmp	.+6      	; 0x1420 <_ZN7Sd2Card11cardCommandEhm+0x70>
  if (cmd == CMD0) crc = 0X95;  // correct crc for CMD0 with arg 0
    141a:	85 e9       	ldi	r24, 0x95	; 149
    141c:	01 c0       	rjmp	.+2      	; 0x1420 <_ZN7Sd2Card11cardCommandEhm+0x70>
  if (cmd == CMD8) crc = 0X87;  // correct crc for CMD8 with arg 0X1AA
    141e:	87 e8       	ldi	r24, 0x87	; 135
  spiSend(crc);
    1420:	0e 94 61 09 	call	0x12c2	; 0x12c2 <_ZL7spiSendh>

  // wait for response
  for (uint8_t i = 0; ((status_ = spiRec()) & 0X80) && i != 0XFF; i++);
    1424:	c0 e0       	ldi	r28, 0x00	; 0
    1426:	0e 94 66 09 	call	0x12cc	; 0x12cc <_ZL6spiRecv>
    142a:	f8 01       	movw	r30, r16
    142c:	82 87       	std	Z+10, r24	; 0x0a
    142e:	87 ff       	sbrs	r24, 7
    1430:	04 c0       	rjmp	.+8      	; 0x143a <_ZN7Sd2Card11cardCommandEhm+0x8a>
    1432:	cf 3f       	cpi	r28, 0xFF	; 255
    1434:	11 f0       	breq	.+4      	; 0x143a <_ZN7Sd2Card11cardCommandEhm+0x8a>
    1436:	cf 5f       	subi	r28, 0xFF	; 255
    1438:	f6 cf       	rjmp	.-20     	; 0x1426 <_ZN7Sd2Card11cardCommandEhm+0x76>
  return status_;
}
    143a:	df 91       	pop	r29
    143c:	cf 91       	pop	r28
    143e:	1f 91       	pop	r17
    1440:	0f 91       	pop	r16
    1442:	ff 90       	pop	r15
    1444:	bf 90       	pop	r11
    1446:	af 90       	pop	r10
    1448:	9f 90       	pop	r9
    144a:	8f 90       	pop	r8
    144c:	08 95       	ret

0000144e <_ZN7Sd2Card4initEhh>:
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.  The reason for failure
 * can be determined by calling errorCode() and errorData().
 */
uint8_t Sd2Card::init(uint8_t sckRateID, uint8_t chipSelectPin) {
    144e:	af 92       	push	r10
    1450:	bf 92       	push	r11
    1452:	cf 92       	push	r12
    1454:	df 92       	push	r13
    1456:	ef 92       	push	r14
    1458:	ff 92       	push	r15
    145a:	0f 93       	push	r16
    145c:	1f 93       	push	r17
    145e:	cf 93       	push	r28
    1460:	df 93       	push	r29
    1462:	ec 01       	movw	r28, r24
    1464:	06 2f       	mov	r16, r22
  errorCode_ = inBlock_ = partialBlockRead_ = type_ = 0;
    1466:	1b 86       	std	Y+11, r1	; 0x0b
    1468:	19 86       	std	Y+9, r1	; 0x09
    146a:	1e 82       	std	Y+6, r1	; 0x06
    146c:	1d 82       	std	Y+5, r1	; 0x05
  chipSelectPin_ = chipSelectPin;
    146e:	4c 83       	std	Y+4, r20	; 0x04
  // 16-bit init start time allows over a minute
  uint16_t t0 = (uint16_t)millis();
    1470:	0e 94 41 1a 	call	0x3482	; 0x3482 <millis>
    1474:	dc 01       	movw	r26, r24
    1476:	cb 01       	movw	r24, r22
    1478:	5c 01       	movw	r10, r24
  uint32_t arg;

  // set pin modes
  pinMode(chipSelectPin_, OUTPUT);
    147a:	8c 81       	ldd	r24, Y+4	; 0x04
    147c:	61 e0       	ldi	r22, 0x01	; 1
    147e:	0e 94 bb 1a 	call	0x3576	; 0x3576 <pinMode>
  chipSelectHigh();
    1482:	ce 01       	movw	r24, r28
    1484:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <_ZN7Sd2Card14chipSelectHighEv>
  pinMode(SPI_MISO_PIN, INPUT);
    1488:	82 e3       	ldi	r24, 0x32	; 50
    148a:	60 e0       	ldi	r22, 0x00	; 0
    148c:	0e 94 bb 1a 	call	0x3576	; 0x3576 <pinMode>
  pinMode(SPI_MOSI_PIN, OUTPUT);
    1490:	83 e3       	ldi	r24, 0x33	; 51
    1492:	61 e0       	ldi	r22, 0x01	; 1
    1494:	0e 94 bb 1a 	call	0x3576	; 0x3576 <pinMode>
  pinMode(SPI_SCK_PIN, OUTPUT);
    1498:	84 e3       	ldi	r24, 0x34	; 52
    149a:	61 e0       	ldi	r22, 0x01	; 1
    149c:	0e 94 bb 1a 	call	0x3576	; 0x3576 <pinMode>

#ifndef SOFTWARE_SPI
  // SS must be in output mode even it is not chip select
  pinMode(SS_PIN, OUTPUT);
    14a0:	85 e3       	ldi	r24, 0x35	; 53
    14a2:	61 e0       	ldi	r22, 0x01	; 1
    14a4:	0e 94 bb 1a 	call	0x3576	; 0x3576 <pinMode>
  digitalWrite(SS_PIN, HIGH); // disable any SPI device using hardware SS pin
    14a8:	85 e3       	ldi	r24, 0x35	; 53
    14aa:	61 e0       	ldi	r22, 0x01	; 1
    14ac:	0e 94 6e 1b 	call	0x36dc	; 0x36dc <digitalWrite>
  // Enable SPI, Master, clock rate f_osc/128
  SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR1) | (1 << SPR0);
    14b0:	83 e5       	ldi	r24, 0x53	; 83
    14b2:	8c bd       	out	0x2c, r24	; 44
  // clear double speed
  SPSR &= ~(1 << SPI2X);
    14b4:	8d b5       	in	r24, 0x2d	; 45
    14b6:	8e 7f       	andi	r24, 0xFE	; 254
    14b8:	8d bd       	out	0x2d, r24	; 45
    14ba:	1a e0       	ldi	r17, 0x0A	; 10
#endif  // SOFTWARE_SPI

  // must supply min of 74 clock cycles with CS high.
  for (uint8_t i = 0; i < 10; i++) spiSend(0XFF);
    14bc:	8f ef       	ldi	r24, 0xFF	; 255
    14be:	0e 94 61 09 	call	0x12c2	; 0x12c2 <_ZL7spiSendh>
    14c2:	11 50       	subi	r17, 0x01	; 1
    14c4:	d9 f7       	brne	.-10     	; 0x14bc <_ZN7Sd2Card4initEhh+0x6e>

  chipSelectLow();
    14c6:	ce 01       	movw	r24, r28
    14c8:	0e 94 71 09 	call	0x12e2	; 0x12e2 <_ZN7Sd2Card13chipSelectLowEv>

  // command to go idle in SPI mode
  while ((status_ = cardCommand(CMD0, 0)) != R1_IDLE_STATE) {
    14cc:	0a c0       	rjmp	.+20     	; 0x14e2 <_ZN7Sd2Card4initEhh+0x94>
    if (((uint16_t)millis() - t0) > SD_INIT_TIMEOUT) {
    14ce:	0e 94 41 1a 	call	0x3482	; 0x3482 <millis>
    14d2:	6a 19       	sub	r22, r10
    14d4:	7b 09       	sbc	r23, r11
    14d6:	87 e0       	ldi	r24, 0x07	; 7
    14d8:	61 3d       	cpi	r22, 0xD1	; 209
    14da:	78 07       	cpc	r23, r24
    14dc:	10 f0       	brcs	.+4      	; 0x14e2 <_ZN7Sd2Card4initEhh+0x94>
    14de:	81 e0       	ldi	r24, 0x01	; 1
    14e0:	57 c0       	rjmp	.+174    	; 0x1590 <_ZN7Sd2Card4initEhh+0x142>
  for (uint8_t i = 0; i < 10; i++) spiSend(0XFF);

  chipSelectLow();

  // command to go idle in SPI mode
  while ((status_ = cardCommand(CMD0, 0)) != R1_IDLE_STATE) {
    14e2:	ce 01       	movw	r24, r28
    14e4:	60 e0       	ldi	r22, 0x00	; 0
    14e6:	20 e0       	ldi	r18, 0x00	; 0
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	a9 01       	movw	r20, r18
    14ec:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <_ZN7Sd2Card11cardCommandEhm>
    14f0:	18 2f       	mov	r17, r24
    14f2:	8a 87       	std	Y+10, r24	; 0x0a
    14f4:	81 30       	cpi	r24, 0x01	; 1
    14f6:	59 f7       	brne	.-42     	; 0x14ce <_ZN7Sd2Card4initEhh+0x80>
      error(SD_CARD_ERROR_CMD0);
      goto fail;
    }
  }
  // check SD version
  if ((cardCommand(CMD8, 0x1AA) & R1_ILLEGAL_COMMAND)) {
    14f8:	ce 01       	movw	r24, r28
    14fa:	68 e0       	ldi	r22, 0x08	; 8
    14fc:	2a ea       	ldi	r18, 0xAA	; 170
    14fe:	31 e0       	ldi	r19, 0x01	; 1
    1500:	40 e0       	ldi	r20, 0x00	; 0
    1502:	50 e0       	ldi	r21, 0x00	; 0
    1504:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <_ZN7Sd2Card11cardCommandEhm>
    1508:	82 ff       	sbrs	r24, 2
    150a:	02 c0       	rjmp	.+4      	; 0x1510 <_ZN7Sd2Card4initEhh+0xc2>
  uint8_t readRegister(uint8_t cmd, void* buf);
  uint8_t sendWriteCommand(uint32_t blockNumber, uint32_t eraseCount);
  void chipSelectHigh(void);
  void chipSelectLow(void);
  void type(uint8_t value) {type_ = value;}
    150c:	1b 87       	std	Y+11, r17	; 0x0b
    150e:	0c c0       	rjmp	.+24     	; 0x1528 <_ZN7Sd2Card4initEhh+0xda>
    1510:	14 e0       	ldi	r17, 0x04	; 4
    type(SD_CARD_TYPE_SD1);
  } else {
    // only need last byte of r7 response
    for (uint8_t i = 0; i < 4; i++) status_ = spiRec();
    1512:	0e 94 66 09 	call	0x12cc	; 0x12cc <_ZL6spiRecv>
    1516:	8a 87       	std	Y+10, r24	; 0x0a
    1518:	11 50       	subi	r17, 0x01	; 1
    151a:	d9 f7       	brne	.-10     	; 0x1512 <_ZN7Sd2Card4initEhh+0xc4>
    if (status_ != 0XAA) {
    151c:	8a 3a       	cpi	r24, 0xAA	; 170
    151e:	11 f0       	breq	.+4      	; 0x1524 <_ZN7Sd2Card4initEhh+0xd6>
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    return cardCommand(cmd, arg);
  }
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  void error(uint8_t code) {errorCode_ = code;}
    1520:	82 e0       	ldi	r24, 0x02	; 2
    1522:	36 c0       	rjmp	.+108    	; 0x1590 <_ZN7Sd2Card4initEhh+0x142>
  uint8_t readRegister(uint8_t cmd, void* buf);
  uint8_t sendWriteCommand(uint32_t blockNumber, uint32_t eraseCount);
  void chipSelectHigh(void);
  void chipSelectLow(void);
  void type(uint8_t value) {type_ = value;}
    1524:	82 e0       	ldi	r24, 0x02	; 2
    1526:	8b 87       	std	Y+11, r24	; 0x0b
      goto fail;
    }
    type(SD_CARD_TYPE_SD2);
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
    1528:	8b 85       	ldd	r24, Y+11	; 0x0b
    152a:	82 30       	cpi	r24, 0x02	; 2
    152c:	31 f4       	brne	.+12     	; 0x153a <_ZN7Sd2Card4initEhh+0xec>
    152e:	c1 2c       	mov	r12, r1
    1530:	d1 2c       	mov	r13, r1
    1532:	e1 2c       	mov	r14, r1
    1534:	80 e4       	ldi	r24, 0x40	; 64
    1536:	f8 2e       	mov	r15, r24
    1538:	0e c0       	rjmp	.+28     	; 0x1556 <_ZN7Sd2Card4initEhh+0x108>
    153a:	cc 24       	eor	r12, r12
    153c:	dd 24       	eor	r13, r13
    153e:	76 01       	movw	r14, r12

  while ((status_ = cardAcmd(ACMD41, arg)) != R1_READY_STATE) {
    1540:	0a c0       	rjmp	.+20     	; 0x1556 <_ZN7Sd2Card4initEhh+0x108>
    // check for timeout
    if (((uint16_t)millis() - t0) > SD_INIT_TIMEOUT) {
    1542:	0e 94 41 1a 	call	0x3482	; 0x3482 <millis>
    1546:	6a 19       	sub	r22, r10
    1548:	7b 09       	sbc	r23, r11
    154a:	87 e0       	ldi	r24, 0x07	; 7
    154c:	61 3d       	cpi	r22, 0xD1	; 209
    154e:	78 07       	cpc	r23, r24
    1550:	10 f0       	brcs	.+4      	; 0x1556 <_ZN7Sd2Card4initEhh+0x108>
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    return cardCommand(cmd, arg);
  }
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  void error(uint8_t code) {errorCode_ = code;}
    1552:	88 e0       	ldi	r24, 0x08	; 8
    1554:	1d c0       	rjmp	.+58     	; 0x1590 <_ZN7Sd2Card4initEhh+0x142>
  uint8_t partialBlockRead_;
  uint8_t status_;
  uint8_t type_;
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    1556:	ce 01       	movw	r24, r28
    1558:	67 e3       	ldi	r22, 0x37	; 55
    155a:	20 e0       	ldi	r18, 0x00	; 0
    155c:	30 e0       	ldi	r19, 0x00	; 0
    155e:	a9 01       	movw	r20, r18
    1560:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <_ZN7Sd2Card11cardCommandEhm>
    return cardCommand(cmd, arg);
    1564:	ce 01       	movw	r24, r28
    1566:	69 e2       	ldi	r22, 0x29	; 41
    1568:	a7 01       	movw	r20, r14
    156a:	96 01       	movw	r18, r12
    156c:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <_ZN7Sd2Card11cardCommandEhm>
    type(SD_CARD_TYPE_SD2);
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;

  while ((status_ = cardAcmd(ACMD41, arg)) != R1_READY_STATE) {
    1570:	8a 87       	std	Y+10, r24	; 0x0a
    1572:	88 23       	and	r24, r24
    1574:	31 f7       	brne	.-52     	; 0x1542 <_ZN7Sd2Card4initEhh+0xf4>
      error(SD_CARD_ERROR_ACMD41);
      goto fail;
    }
  }
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
    1576:	8b 85       	ldd	r24, Y+11	; 0x0b
    1578:	82 30       	cpi	r24, 0x02	; 2
    157a:	e9 f4       	brne	.+58     	; 0x15b6 <_ZN7Sd2Card4initEhh+0x168>
    if (cardCommand(CMD58, 0)) {
    157c:	ce 01       	movw	r24, r28
    157e:	6a e3       	ldi	r22, 0x3A	; 58
    1580:	20 e0       	ldi	r18, 0x00	; 0
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	a9 01       	movw	r20, r18
    1586:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <_ZN7Sd2Card11cardCommandEhm>
    158a:	88 23       	and	r24, r24
    158c:	39 f0       	breq	.+14     	; 0x159c <_ZN7Sd2Card4initEhh+0x14e>
  }
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  void error(uint8_t code) {errorCode_ = code;}
    158e:	86 e0       	ldi	r24, 0x06	; 6
    1590:	8d 83       	std	Y+5, r24	; 0x05
#else  // SOFTWARE_SPI
  return true;
#endif  // SOFTWARE_SPI

 fail:
  chipSelectHigh();
    1592:	ce 01       	movw	r24, r28
    1594:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <_ZN7Sd2Card14chipSelectHighEv>
  return false;
    1598:	80 e0       	ldi	r24, 0x00	; 0
    159a:	14 c0       	rjmp	.+40     	; 0x15c4 <_ZN7Sd2Card4initEhh+0x176>
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
      error(SD_CARD_ERROR_CMD58);
      goto fail;
    }
    if ((spiRec() & 0XC0) == 0XC0) type(SD_CARD_TYPE_SDHC);
    159c:	0e 94 66 09 	call	0x12cc	; 0x12cc <_ZL6spiRecv>
    15a0:	80 7c       	andi	r24, 0xC0	; 192
    15a2:	80 3c       	cpi	r24, 0xC0	; 192
    15a4:	11 f4       	brne	.+4      	; 0x15aa <_ZN7Sd2Card4initEhh+0x15c>
  uint8_t readRegister(uint8_t cmd, void* buf);
  uint8_t sendWriteCommand(uint32_t blockNumber, uint32_t eraseCount);
  void chipSelectHigh(void);
  void chipSelectLow(void);
  void type(uint8_t value) {type_ = value;}
    15a6:	83 e0       	ldi	r24, 0x03	; 3
    15a8:	8b 87       	std	Y+11, r24	; 0x0b
    // discard rest of ocr - contains allowed voltage range
    for (uint8_t i = 0; i < 3; i++) spiRec();
    15aa:	0e 94 66 09 	call	0x12cc	; 0x12cc <_ZL6spiRecv>
    15ae:	0e 94 66 09 	call	0x12cc	; 0x12cc <_ZL6spiRecv>
    15b2:	0e 94 66 09 	call	0x12cc	; 0x12cc <_ZL6spiRecv>
  }
  chipSelectHigh();
    15b6:	ce 01       	movw	r24, r28
    15b8:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <_ZN7Sd2Card14chipSelectHighEv>

#ifndef SOFTWARE_SPI
  return setSckRate(sckRateID);
    15bc:	ce 01       	movw	r24, r28
    15be:	60 2f       	mov	r22, r16
    15c0:	0e 94 9a 09 	call	0x1334	; 0x1334 <_ZN7Sd2Card10setSckRateEh>
#endif  // SOFTWARE_SPI

 fail:
  chipSelectHigh();
  return false;
}
    15c4:	df 91       	pop	r29
    15c6:	cf 91       	pop	r28
    15c8:	1f 91       	pop	r17
    15ca:	0f 91       	pop	r16
    15cc:	ff 90       	pop	r15
    15ce:	ef 90       	pop	r14
    15d0:	df 90       	pop	r13
    15d2:	cf 90       	pop	r12
    15d4:	bf 90       	pop	r11
    15d6:	af 90       	pop	r10
    15d8:	08 95       	ret

000015da <_ZN7Sd2Card14waitStartBlockEv>:
  while (((uint16_t)millis() - t0) < timeoutMillis);
  return false;
}
//------------------------------------------------------------------------------
/** Wait for start block token */
uint8_t Sd2Card::waitStartBlock(void) {
    15da:	0f 93       	push	r16
    15dc:	1f 93       	push	r17
    15de:	cf 93       	push	r28
    15e0:	df 93       	push	r29
    15e2:	ec 01       	movw	r28, r24
  uint16_t t0 = millis();
    15e4:	0e 94 41 1a 	call	0x3482	; 0x3482 <millis>
    15e8:	8b 01       	movw	r16, r22
    15ea:	9c 01       	movw	r18, r24
  while ((status_ = spiRec()) == 0XFF) {
    15ec:	0a c0       	rjmp	.+20     	; 0x1602 <_ZN7Sd2Card14waitStartBlockEv+0x28>
    if (((uint16_t)millis() - t0) > SD_READ_TIMEOUT) {
    15ee:	0e 94 41 1a 	call	0x3482	; 0x3482 <millis>
    15f2:	60 1b       	sub	r22, r16
    15f4:	71 0b       	sbc	r23, r17
    15f6:	81 e0       	ldi	r24, 0x01	; 1
    15f8:	6d 32       	cpi	r22, 0x2D	; 45
    15fa:	78 07       	cpc	r23, r24
    15fc:	10 f0       	brcs	.+4      	; 0x1602 <_ZN7Sd2Card14waitStartBlockEv+0x28>
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    return cardCommand(cmd, arg);
  }
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  void error(uint8_t code) {errorCode_ = code;}
    15fe:	8f e0       	ldi	r24, 0x0F	; 15
    1600:	08 c0       	rjmp	.+16     	; 0x1612 <_ZN7Sd2Card14waitStartBlockEv+0x38>
}
//------------------------------------------------------------------------------
/** Wait for start block token */
uint8_t Sd2Card::waitStartBlock(void) {
  uint16_t t0 = millis();
  while ((status_ = spiRec()) == 0XFF) {
    1602:	0e 94 66 09 	call	0x12cc	; 0x12cc <_ZL6spiRecv>
    1606:	8a 87       	std	Y+10, r24	; 0x0a
    1608:	8f 3f       	cpi	r24, 0xFF	; 255
    160a:	89 f3       	breq	.-30     	; 0x15ee <_ZN7Sd2Card14waitStartBlockEv+0x14>
    if (((uint16_t)millis() - t0) > SD_READ_TIMEOUT) {
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  if (status_ != DATA_START_BLOCK) {
    160c:	8e 3f       	cpi	r24, 0xFE	; 254
    160e:	39 f0       	breq	.+14     	; 0x161e <_ZN7Sd2Card14waitStartBlockEv+0x44>
    1610:	8d e0       	ldi	r24, 0x0D	; 13
    1612:	8d 83       	std	Y+5, r24	; 0x05
    goto fail;
  }
  return true;

 fail:
  chipSelectHigh();
    1614:	ce 01       	movw	r24, r28
    1616:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <_ZN7Sd2Card14chipSelectHighEv>
  return false;
    161a:	80 e0       	ldi	r24, 0x00	; 0
    161c:	01 c0       	rjmp	.+2      	; 0x1620 <_ZN7Sd2Card14waitStartBlockEv+0x46>
  }
  if (status_ != DATA_START_BLOCK) {
    error(SD_CARD_ERROR_READ);
    goto fail;
  }
  return true;
    161e:	81 e0       	ldi	r24, 0x01	; 1

 fail:
  chipSelectHigh();
  return false;
}
    1620:	df 91       	pop	r29
    1622:	cf 91       	pop	r28
    1624:	1f 91       	pop	r17
    1626:	0f 91       	pop	r16
    1628:	08 95       	ret

0000162a <_ZN7Sd2Card8readDataEmjjPh>:
 * \param[in] count Number of bytes to read
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::readData(uint32_t block,
        uint16_t offset, uint16_t count, uint8_t* dst) {
    162a:	8f 92       	push	r8
    162c:	9f 92       	push	r9
    162e:	af 92       	push	r10
    1630:	bf 92       	push	r11
    1632:	cf 92       	push	r12
    1634:	df 92       	push	r13
    1636:	ef 92       	push	r14
    1638:	ff 92       	push	r15
    163a:	0f 93       	push	r16
    163c:	1f 93       	push	r17
    163e:	cf 93       	push	r28
    1640:	df 93       	push	r29
    1642:	ec 01       	movw	r28, r24
    1644:	4a 01       	movw	r8, r20
    1646:	5b 01       	movw	r10, r22
    1648:	69 01       	movw	r12, r18
  uint16_t n;
  if (count == 0) return true;
    164a:	01 15       	cp	r16, r1
    164c:	11 05       	cpc	r17, r1
    164e:	09 f4       	brne	.+2      	; 0x1652 <_ZN7Sd2Card8readDataEmjjPh+0x28>
    1650:	7e c0       	rjmp	.+252    	; 0x174e <_ZN7Sd2Card8readDataEmjjPh+0x124>
  if ((count + offset) > 512) {
    1652:	c8 01       	movw	r24, r16
    1654:	82 0f       	add	r24, r18
    1656:	93 1f       	adc	r25, r19
    1658:	22 e0       	ldi	r18, 0x02	; 2
    165a:	81 30       	cpi	r24, 0x01	; 1
    165c:	92 07       	cpc	r25, r18
    165e:	08 f0       	brcs	.+2      	; 0x1662 <_ZN7Sd2Card8readDataEmjjPh+0x38>
    1660:	71 c0       	rjmp	.+226    	; 0x1744 <_ZN7Sd2Card8readDataEmjjPh+0x11a>
    goto fail;
  }
  if (!inBlock_ || block != block_ || offset < offset_) {
    1662:	8e 81       	ldd	r24, Y+6	; 0x06
    1664:	88 23       	and	r24, r24
    1666:	71 f0       	breq	.+28     	; 0x1684 <_ZN7Sd2Card8readDataEmjjPh+0x5a>
    1668:	88 81       	ld	r24, Y
    166a:	99 81       	ldd	r25, Y+1	; 0x01
    166c:	aa 81       	ldd	r26, Y+2	; 0x02
    166e:	bb 81       	ldd	r27, Y+3	; 0x03
    1670:	48 17       	cp	r20, r24
    1672:	59 07       	cpc	r21, r25
    1674:	6a 07       	cpc	r22, r26
    1676:	7b 07       	cpc	r23, r27
    1678:	29 f4       	brne	.+10     	; 0x1684 <_ZN7Sd2Card8readDataEmjjPh+0x5a>
    167a:	8f 81       	ldd	r24, Y+7	; 0x07
    167c:	98 85       	ldd	r25, Y+8	; 0x08
    167e:	c8 16       	cp	r12, r24
    1680:	d9 06       	cpc	r13, r25
    1682:	18 f5       	brcc	.+70     	; 0x16ca <_ZN7Sd2Card8readDataEmjjPh+0xa0>
    block_ = block;
    1684:	88 82       	st	Y, r8
    1686:	99 82       	std	Y+1, r9	; 0x01
    1688:	aa 82       	std	Y+2, r10	; 0x02
    168a:	bb 82       	std	Y+3, r11	; 0x03
    // use address if not SDHC card
    if (type()!= SD_CARD_TYPE_SDHC) block <<= 9;
    168c:	8b 85       	ldd	r24, Y+11	; 0x0b
    168e:	83 30       	cpi	r24, 0x03	; 3
    1690:	39 f0       	breq	.+14     	; 0x16a0 <_ZN7Sd2Card8readDataEmjjPh+0x76>
    1692:	79 e0       	ldi	r23, 0x09	; 9
    1694:	88 0c       	add	r8, r8
    1696:	99 1c       	adc	r9, r9
    1698:	aa 1c       	adc	r10, r10
    169a:	bb 1c       	adc	r11, r11
    169c:	7a 95       	dec	r23
    169e:	d1 f7       	brne	.-12     	; 0x1694 <_ZN7Sd2Card8readDataEmjjPh+0x6a>
    if (cardCommand(CMD17, block)) {
    16a0:	ce 01       	movw	r24, r28
    16a2:	61 e1       	ldi	r22, 0x11	; 17
    16a4:	a5 01       	movw	r20, r10
    16a6:	94 01       	movw	r18, r8
    16a8:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <_ZN7Sd2Card11cardCommandEhm>
    16ac:	88 23       	and	r24, r24
    16ae:	19 f0       	breq	.+6      	; 0x16b6 <_ZN7Sd2Card8readDataEmjjPh+0x8c>
    16b0:	83 e0       	ldi	r24, 0x03	; 3
    16b2:	8d 83       	std	Y+5, r24	; 0x05
    16b4:	47 c0       	rjmp	.+142    	; 0x1744 <_ZN7Sd2Card8readDataEmjjPh+0x11a>
      error(SD_CARD_ERROR_CMD17);
      goto fail;
    }
    if (!waitStartBlock()) {
    16b6:	ce 01       	movw	r24, r28
    16b8:	0e 94 ed 0a 	call	0x15da	; 0x15da <_ZN7Sd2Card14waitStartBlockEv>
    16bc:	88 23       	and	r24, r24
    16be:	09 f4       	brne	.+2      	; 0x16c2 <_ZN7Sd2Card8readDataEmjjPh+0x98>
    16c0:	41 c0       	rjmp	.+130    	; 0x1744 <_ZN7Sd2Card8readDataEmjjPh+0x11a>
      goto fail;
    }
    offset_ = 0;
    16c2:	18 86       	std	Y+8, r1	; 0x08
    16c4:	1f 82       	std	Y+7, r1	; 0x07
    inBlock_ = 1;
    16c6:	81 e0       	ldi	r24, 0x01	; 1
    16c8:	8e 83       	std	Y+6, r24	; 0x06
  }

#ifdef OPTIMIZE_HARDWARE_SPI
  // start first spi transfer
  SPDR = 0XFF;
    16ca:	8f ef       	ldi	r24, 0xFF	; 255
    16cc:	8e bd       	out	0x2e, r24	; 46

  // skip data before offset
  for (;offset_ < offset; offset_++) {
    while (!(SPSR & (1 << SPIF)));
    SPDR = 0XFF;
    16ce:	2f ef       	ldi	r18, 0xFF	; 255
#ifdef OPTIMIZE_HARDWARE_SPI
  // start first spi transfer
  SPDR = 0XFF;

  // skip data before offset
  for (;offset_ < offset; offset_++) {
    16d0:	09 c0       	rjmp	.+18     	; 0x16e4 <_ZN7Sd2Card8readDataEmjjPh+0xba>
    while (!(SPSR & (1 << SPIF)));
    16d2:	0d b4       	in	r0, 0x2d	; 45
    16d4:	07 fe       	sbrs	r0, 7
    16d6:	fd cf       	rjmp	.-6      	; 0x16d2 <_ZN7Sd2Card8readDataEmjjPh+0xa8>
    SPDR = 0XFF;
    16d8:	2e bd       	out	0x2e, r18	; 46
#ifdef OPTIMIZE_HARDWARE_SPI
  // start first spi transfer
  SPDR = 0XFF;

  // skip data before offset
  for (;offset_ < offset; offset_++) {
    16da:	8f 81       	ldd	r24, Y+7	; 0x07
    16dc:	98 85       	ldd	r25, Y+8	; 0x08
    16de:	01 96       	adiw	r24, 0x01	; 1
    16e0:	98 87       	std	Y+8, r25	; 0x08
    16e2:	8f 83       	std	Y+7, r24	; 0x07
    16e4:	8f 81       	ldd	r24, Y+7	; 0x07
    16e6:	98 85       	ldd	r25, Y+8	; 0x08
    16e8:	8c 15       	cp	r24, r12
    16ea:	9d 05       	cpc	r25, r13
    16ec:	90 f3       	brcs	.-28     	; 0x16d2 <_ZN7Sd2Card8readDataEmjjPh+0xa8>
    while (!(SPSR & (1 << SPIF)));
    SPDR = 0XFF;
  }
  // transfer data
  n = count - 1;
    16ee:	98 01       	movw	r18, r16
    16f0:	21 50       	subi	r18, 0x01	; 1
    16f2:	30 40       	sbci	r19, 0x00	; 0
    16f4:	f7 01       	movw	r30, r14
  for (uint16_t i = 0; i < n; i++) {
    16f6:	80 e0       	ldi	r24, 0x00	; 0
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    while (!(SPSR & (1 << SPIF)));
    dst[i] = SPDR;
    SPDR = 0XFF;
    16fa:	4f ef       	ldi	r20, 0xFF	; 255
    while (!(SPSR & (1 << SPIF)));
    SPDR = 0XFF;
  }
  // transfer data
  n = count - 1;
  for (uint16_t i = 0; i < n; i++) {
    16fc:	07 c0       	rjmp	.+14     	; 0x170c <_ZN7Sd2Card8readDataEmjjPh+0xe2>
    while (!(SPSR & (1 << SPIF)));
    16fe:	0d b4       	in	r0, 0x2d	; 45
    1700:	07 fe       	sbrs	r0, 7
    1702:	fd cf       	rjmp	.-6      	; 0x16fe <_ZN7Sd2Card8readDataEmjjPh+0xd4>
    dst[i] = SPDR;
    1704:	5e b5       	in	r21, 0x2e	; 46
    1706:	51 93       	st	Z+, r21
    SPDR = 0XFF;
    1708:	4e bd       	out	0x2e, r20	; 46
    while (!(SPSR & (1 << SPIF)));
    SPDR = 0XFF;
  }
  // transfer data
  n = count - 1;
  for (uint16_t i = 0; i < n; i++) {
    170a:	01 96       	adiw	r24, 0x01	; 1
    170c:	82 17       	cp	r24, r18
    170e:	93 07       	cpc	r25, r19
    1710:	b0 f3       	brcs	.-20     	; 0x16fe <_ZN7Sd2Card8readDataEmjjPh+0xd4>
    while (!(SPSR & (1 << SPIF)));
    dst[i] = SPDR;
    SPDR = 0XFF;
  }
  // wait for last byte
  while (!(SPSR & (1 << SPIF)));
    1712:	0d b4       	in	r0, 0x2d	; 45
    1714:	07 fe       	sbrs	r0, 7
    1716:	fd cf       	rjmp	.-6      	; 0x1712 <_ZN7Sd2Card8readDataEmjjPh+0xe8>
  dst[n] = SPDR;
    1718:	8e b5       	in	r24, 0x2e	; 46
    171a:	2e 0d       	add	r18, r14
    171c:	3f 1d       	adc	r19, r15
    171e:	f9 01       	movw	r30, r18
    1720:	80 83       	st	Z, r24
  for (uint16_t i = 0; i < count; i++) {
    dst[i] = spiRec();
  }
#endif  // OPTIMIZE_HARDWARE_SPI

  offset_ += count;
    1722:	8f 81       	ldd	r24, Y+7	; 0x07
    1724:	98 85       	ldd	r25, Y+8	; 0x08
    1726:	80 0f       	add	r24, r16
    1728:	91 1f       	adc	r25, r17
    172a:	98 87       	std	Y+8, r25	; 0x08
    172c:	8f 83       	std	Y+7, r24	; 0x07
  if (!partialBlockRead_ || offset_ >= 512) {
    172e:	29 85       	ldd	r18, Y+9	; 0x09
    1730:	22 23       	and	r18, r18
    1732:	21 f0       	breq	.+8      	; 0x173c <_ZN7Sd2Card8readDataEmjjPh+0x112>
    1734:	f2 e0       	ldi	r31, 0x02	; 2
    1736:	80 30       	cpi	r24, 0x00	; 0
    1738:	9f 07       	cpc	r25, r31
    173a:	48 f0       	brcs	.+18     	; 0x174e <_ZN7Sd2Card8readDataEmjjPh+0x124>
    // read rest of data, checksum and set chip select high
    readEnd();
    173c:	ce 01       	movw	r24, r28
    173e:	0e 94 77 09 	call	0x12ee	; 0x12ee <_ZN7Sd2Card7readEndEv>
    1742:	05 c0       	rjmp	.+10     	; 0x174e <_ZN7Sd2Card8readDataEmjjPh+0x124>
  }
  return true;

 fail:
  chipSelectHigh();
    1744:	ce 01       	movw	r24, r28
    1746:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <_ZN7Sd2Card14chipSelectHighEv>
  return false;
    174a:	80 e0       	ldi	r24, 0x00	; 0
    174c:	01 c0       	rjmp	.+2      	; 0x1750 <_ZN7Sd2Card8readDataEmjjPh+0x126>
  offset_ += count;
  if (!partialBlockRead_ || offset_ >= 512) {
    // read rest of data, checksum and set chip select high
    readEnd();
  }
  return true;
    174e:	81 e0       	ldi	r24, 0x01	; 1

 fail:
  chipSelectHigh();
  return false;
}
    1750:	df 91       	pop	r29
    1752:	cf 91       	pop	r28
    1754:	1f 91       	pop	r17
    1756:	0f 91       	pop	r16
    1758:	ff 90       	pop	r15
    175a:	ef 90       	pop	r14
    175c:	df 90       	pop	r13
    175e:	cf 90       	pop	r12
    1760:	bf 90       	pop	r11
    1762:	af 90       	pop	r10
    1764:	9f 90       	pop	r9
    1766:	8f 90       	pop	r8
    1768:	08 95       	ret

0000176a <_ZN7Sd2Card9readBlockEmPh>:
 * \param[out] dst Pointer to the location that will receive the data.

 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::readBlock(uint32_t block, uint8_t* dst) {
    176a:	ef 92       	push	r14
    176c:	ff 92       	push	r15
    176e:	0f 93       	push	r16
    1770:	1f 93       	push	r17
    1772:	79 01       	movw	r14, r18
  return readData(block, 0, 512, dst);
    1774:	20 e0       	ldi	r18, 0x00	; 0
    1776:	30 e0       	ldi	r19, 0x00	; 0
    1778:	00 e0       	ldi	r16, 0x00	; 0
    177a:	12 e0       	ldi	r17, 0x02	; 2
    177c:	0e 94 15 0b 	call	0x162a	; 0x162a <_ZN7Sd2Card8readDataEmjjPh>
}
    1780:	1f 91       	pop	r17
    1782:	0f 91       	pop	r16
    1784:	ff 90       	pop	r15
    1786:	ef 90       	pop	r14
    1788:	08 95       	ret

0000178a <_ZN7Sd2Card9writeDataEhPKh>:
  }
  return writeData(WRITE_MULTIPLE_TOKEN, src);
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
uint8_t Sd2Card::writeData(uint8_t token, const uint8_t* src) {
    178a:	cf 93       	push	r28
    178c:	df 93       	push	r29
    178e:	ec 01       	movw	r28, r24
#ifdef OPTIMIZE_HARDWARE_SPI

  // send data - optimized loop
  SPDR = token;
    1790:	6e bd       	out	0x2e, r22	; 46
    1792:	fa 01       	movw	r30, r20

  // send two byte per iteration
  for (uint16_t i = 0; i < 512; i += 2) {
    1794:	80 e0       	ldi	r24, 0x00	; 0
    1796:	90 e0       	ldi	r25, 0x00	; 0
    while (!(SPSR & (1 << SPIF)));
    1798:	0d b4       	in	r0, 0x2d	; 45
    179a:	07 fe       	sbrs	r0, 7
    179c:	fd cf       	rjmp	.-6      	; 0x1798 <_ZN7Sd2Card9writeDataEhPKh+0xe>
    SPDR = src[i];
    179e:	20 81       	ld	r18, Z
    17a0:	2e bd       	out	0x2e, r18	; 46
    while (!(SPSR & (1 << SPIF)));
    17a2:	0d b4       	in	r0, 0x2d	; 45
    17a4:	07 fe       	sbrs	r0, 7
    17a6:	fd cf       	rjmp	.-6      	; 0x17a2 <_ZN7Sd2Card9writeDataEhPKh+0x18>
    SPDR = src[i+1];
    17a8:	21 81       	ldd	r18, Z+1	; 0x01
    17aa:	2e bd       	out	0x2e, r18	; 46

  // send data - optimized loop
  SPDR = token;

  // send two byte per iteration
  for (uint16_t i = 0; i < 512; i += 2) {
    17ac:	02 96       	adiw	r24, 0x02	; 2
    17ae:	32 96       	adiw	r30, 0x02	; 2
    17b0:	22 e0       	ldi	r18, 0x02	; 2
    17b2:	80 30       	cpi	r24, 0x00	; 0
    17b4:	92 07       	cpc	r25, r18
    17b6:	81 f7       	brne	.-32     	; 0x1798 <_ZN7Sd2Card9writeDataEhPKh+0xe>
    while (!(SPSR & (1 << SPIF)));
    SPDR = src[i+1];
  }

  // wait for last data byte
  while (!(SPSR & (1 << SPIF)));
    17b8:	0d b4       	in	r0, 0x2d	; 45
    17ba:	07 fe       	sbrs	r0, 7
    17bc:	fd cf       	rjmp	.-6      	; 0x17b8 <_ZN7Sd2Card9writeDataEhPKh+0x2e>
  spiSend(token);
  for (uint16_t i = 0; i < 512; i++) {
    spiSend(src[i]);
  }
#endif  // OPTIMIZE_HARDWARE_SPI
  spiSend(0xff);  // dummy crc
    17be:	8f ef       	ldi	r24, 0xFF	; 255
    17c0:	0e 94 61 09 	call	0x12c2	; 0x12c2 <_ZL7spiSendh>
  spiSend(0xff);  // dummy crc
    17c4:	8f ef       	ldi	r24, 0xFF	; 255
    17c6:	0e 94 61 09 	call	0x12c2	; 0x12c2 <_ZL7spiSendh>

  status_ = spiRec();
    17ca:	0e 94 66 09 	call	0x12cc	; 0x12cc <_ZL6spiRecv>
    17ce:	8a 87       	std	Y+10, r24	; 0x0a
  if ((status_ & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    17d0:	8f 71       	andi	r24, 0x1F	; 31
    17d2:	85 30       	cpi	r24, 0x05	; 5
    17d4:	39 f0       	breq	.+14     	; 0x17e4 <_ZN7Sd2Card9writeDataEhPKh+0x5a>
    17d6:	81 e1       	ldi	r24, 0x11	; 17
    17d8:	8d 83       	std	Y+5, r24	; 0x05
    error(SD_CARD_ERROR_WRITE);
    chipSelectHigh();
    17da:	ce 01       	movw	r24, r28
    17dc:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <_ZN7Sd2Card14chipSelectHighEv>
    return false;
    17e0:	80 e0       	ldi	r24, 0x00	; 0
    17e2:	01 c0       	rjmp	.+2      	; 0x17e6 <_ZN7Sd2Card9writeDataEhPKh+0x5c>
  }
  return true;
    17e4:	81 e0       	ldi	r24, 0x01	; 1
}
    17e6:	df 91       	pop	r29
    17e8:	cf 91       	pop	r28
    17ea:	08 95       	ret

000017ec <_ZN7Sd2Card10writeBlockEmPKh>:
 * \param[in] blockNumber Logical block to be written.
 * \param[in] src Pointer to the location of the data to be written.
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::writeBlock(uint32_t blockNumber, const uint8_t* src) {
    17ec:	cf 92       	push	r12
    17ee:	df 92       	push	r13
    17f0:	ef 92       	push	r14
    17f2:	ff 92       	push	r15
    17f4:	0f 93       	push	r16
    17f6:	1f 93       	push	r17
    17f8:	cf 93       	push	r28
    17fa:	df 93       	push	r29
    17fc:	ec 01       	movw	r28, r24
    17fe:	6a 01       	movw	r12, r20
    1800:	7b 01       	movw	r14, r22
    1802:	89 01       	movw	r16, r18
#if SD_PROTECT_BLOCK_ZERO
  // don't allow write to first block
  if (blockNumber == 0) {
    1804:	41 15       	cp	r20, r1
    1806:	51 05       	cpc	r21, r1
    1808:	61 05       	cpc	r22, r1
    180a:	71 05       	cpc	r23, r1
    180c:	11 f4       	brne	.+4      	; 0x1812 <_ZN7Sd2Card10writeBlockEmPKh+0x26>
    180e:	82 e1       	ldi	r24, 0x12	; 18
    1810:	32 c0       	rjmp	.+100    	; 0x1876 <_ZN7Sd2Card10writeBlockEmPKh+0x8a>
    goto fail;
  }
#endif  // SD_PROTECT_BLOCK_ZERO

  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) blockNumber <<= 9;
    1812:	8b 85       	ldd	r24, Y+11	; 0x0b
    1814:	83 30       	cpi	r24, 0x03	; 3
    1816:	39 f0       	breq	.+14     	; 0x1826 <_ZN7Sd2Card10writeBlockEmPKh+0x3a>
    1818:	e9 e0       	ldi	r30, 0x09	; 9
    181a:	cc 0c       	add	r12, r12
    181c:	dd 1c       	adc	r13, r13
    181e:	ee 1c       	adc	r14, r14
    1820:	ff 1c       	adc	r15, r15
    1822:	ea 95       	dec	r30
    1824:	d1 f7       	brne	.-12     	; 0x181a <_ZN7Sd2Card10writeBlockEmPKh+0x2e>
  if (cardCommand(CMD24, blockNumber)) {
    1826:	ce 01       	movw	r24, r28
    1828:	68 e1       	ldi	r22, 0x18	; 24
    182a:	a7 01       	movw	r20, r14
    182c:	96 01       	movw	r18, r12
    182e:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <_ZN7Sd2Card11cardCommandEhm>
    1832:	88 23       	and	r24, r24
    1834:	11 f0       	breq	.+4      	; 0x183a <_ZN7Sd2Card10writeBlockEmPKh+0x4e>
    1836:	84 e0       	ldi	r24, 0x04	; 4
    1838:	1e c0       	rjmp	.+60     	; 0x1876 <_ZN7Sd2Card10writeBlockEmPKh+0x8a>
    error(SD_CARD_ERROR_CMD24);
    goto fail;
  }
  if (!writeData(DATA_START_BLOCK, src)) goto fail;
    183a:	ce 01       	movw	r24, r28
    183c:	6e ef       	ldi	r22, 0xFE	; 254
    183e:	a8 01       	movw	r20, r16
    1840:	0e 94 c5 0b 	call	0x178a	; 0x178a <_ZN7Sd2Card9writeDataEhPKh>
    1844:	88 23       	and	r24, r24
    1846:	c1 f0       	breq	.+48     	; 0x1878 <_ZN7Sd2Card10writeBlockEmPKh+0x8c>

  // wait for flash programming to complete
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    1848:	ce 01       	movw	r24, r28
    184a:	68 e5       	ldi	r22, 0x58	; 88
    184c:	72 e0       	ldi	r23, 0x02	; 2
    184e:	0e 94 bc 09 	call	0x1378	; 0x1378 <_ZN7Sd2Card11waitNotBusyEj>
    1852:	88 23       	and	r24, r24
    1854:	11 f4       	brne	.+4      	; 0x185a <_ZN7Sd2Card10writeBlockEmPKh+0x6e>
    1856:	85 e1       	ldi	r24, 0x15	; 21
    1858:	0e c0       	rjmp	.+28     	; 0x1876 <_ZN7Sd2Card10writeBlockEmPKh+0x8a>
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiRec()) {
    185a:	ce 01       	movw	r24, r28
    185c:	6d e0       	ldi	r22, 0x0D	; 13
    185e:	20 e0       	ldi	r18, 0x00	; 0
    1860:	30 e0       	ldi	r19, 0x00	; 0
    1862:	a9 01       	movw	r20, r18
    1864:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <_ZN7Sd2Card11cardCommandEhm>
    1868:	88 23       	and	r24, r24
    186a:	21 f4       	brne	.+8      	; 0x1874 <_ZN7Sd2Card10writeBlockEmPKh+0x88>
    186c:	0e 94 66 09 	call	0x12cc	; 0x12cc <_ZL6spiRecv>
    1870:	88 23       	and	r24, r24
    1872:	79 f0       	breq	.+30     	; 0x1892 <_ZN7Sd2Card10writeBlockEmPKh+0xa6>
    1874:	84 e1       	ldi	r24, 0x14	; 20
    1876:	8d 83       	std	Y+5, r24	; 0x05
  }
  chipSelectHigh();
  return true;

 fail:
  chipSelectHigh();
    1878:	ce 01       	movw	r24, r28
    187a:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <_ZN7Sd2Card14chipSelectHighEv>
  return false;
    187e:	80 e0       	ldi	r24, 0x00	; 0
}
    1880:	df 91       	pop	r29
    1882:	cf 91       	pop	r28
    1884:	1f 91       	pop	r17
    1886:	0f 91       	pop	r16
    1888:	ff 90       	pop	r15
    188a:	ef 90       	pop	r14
    188c:	df 90       	pop	r13
    188e:	cf 90       	pop	r12
    1890:	08 95       	ret
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiRec()) {
    error(SD_CARD_ERROR_WRITE_PROGRAMMING);
    goto fail;
  }
  chipSelectHigh();
    1892:	ce 01       	movw	r24, r28
    1894:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <_ZN7Sd2Card14chipSelectHighEv>
  return true;
    1898:	81 e0       	ldi	r24, 0x01	; 1
    189a:	f2 cf       	rjmp	.-28     	; 0x1880 <_ZN7Sd2Card10writeBlockEmPKh+0x94>

0000189c <_ZN6SdFile10addClusterEv>:
// suppress cpplint warnings with NOLINT comment
void (*SdFile::oldDateTime_)(uint16_t& date, uint16_t& time) = NULL;  // NOLINT
#endif  // ALLOW_DEPRECATED_FUNCTIONS
//------------------------------------------------------------------------------
// add a cluster to a file
uint8_t SdFile::addCluster() {
    189c:	cf 93       	push	r28
    189e:	df 93       	push	r29
    18a0:	ec 01       	movw	r28, r24
  if (!vol_->allocContiguous(1, &curCluster_)) return false;
    18a2:	9c 01       	movw	r18, r24
    18a4:	2a 5f       	subi	r18, 0xFA	; 250
    18a6:	3f 4f       	sbci	r19, 0xFF	; 255
    18a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18aa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18ac:	41 e0       	ldi	r20, 0x01	; 1
    18ae:	50 e0       	ldi	r21, 0x00	; 0
    18b0:	60 e0       	ldi	r22, 0x00	; 0
    18b2:	70 e0       	ldi	r23, 0x00	; 0
    18b4:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <_ZN8SdVolume15allocContiguousEmPm>
    18b8:	88 23       	and	r24, r24
    18ba:	a1 f0       	breq	.+40     	; 0x18e4 <_ZN6SdFile10addClusterEv+0x48>

  // if first cluster of file link to directory entry
  if (firstCluster_ == 0) {
    18bc:	8f 89       	ldd	r24, Y+23	; 0x17
    18be:	98 8d       	ldd	r25, Y+24	; 0x18
    18c0:	a9 8d       	ldd	r26, Y+25	; 0x19
    18c2:	ba 8d       	ldd	r27, Y+26	; 0x1a
    18c4:	00 97       	sbiw	r24, 0x00	; 0
    18c6:	a1 05       	cpc	r26, r1
    18c8:	b1 05       	cpc	r27, r1
    18ca:	71 f4       	brne	.+28     	; 0x18e8 <_ZN6SdFile10addClusterEv+0x4c>
    firstCluster_ = curCluster_;
    18cc:	8e 81       	ldd	r24, Y+6	; 0x06
    18ce:	9f 81       	ldd	r25, Y+7	; 0x07
    18d0:	a8 85       	ldd	r26, Y+8	; 0x08
    18d2:	b9 85       	ldd	r27, Y+9	; 0x09
    18d4:	8f 8b       	std	Y+23, r24	; 0x17
    18d6:	98 8f       	std	Y+24, r25	; 0x18
    18d8:	a9 8f       	std	Y+25, r26	; 0x19
    18da:	ba 8f       	std	Y+26, r27	; 0x1a
    flags_ |= F_FILE_DIR_DIRTY;
    18dc:	8c 81       	ldd	r24, Y+4	; 0x04
    18de:	80 68       	ori	r24, 0x80	; 128
    18e0:	8c 83       	std	Y+4, r24	; 0x04
    18e2:	02 c0       	rjmp	.+4      	; 0x18e8 <_ZN6SdFile10addClusterEv+0x4c>
void (*SdFile::oldDateTime_)(uint16_t& date, uint16_t& time) = NULL;  // NOLINT
#endif  // ALLOW_DEPRECATED_FUNCTIONS
//------------------------------------------------------------------------------
// add a cluster to a file
uint8_t SdFile::addCluster() {
  if (!vol_->allocContiguous(1, &curCluster_)) return false;
    18e4:	80 e0       	ldi	r24, 0x00	; 0
    18e6:	01 c0       	rjmp	.+2      	; 0x18ea <_ZN6SdFile10addClusterEv+0x4e>
  // if first cluster of file link to directory entry
  if (firstCluster_ == 0) {
    firstCluster_ = curCluster_;
    flags_ |= F_FILE_DIR_DIRTY;
  }
  return true;
    18e8:	81 e0       	ldi	r24, 0x01	; 1
}
    18ea:	df 91       	pop	r29
    18ec:	cf 91       	pop	r28
    18ee:	08 95       	ret

000018f0 <_ZN6SdFile13addDirClusterEv>:
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// return with first block of cluster in the cache
uint8_t SdFile::addDirCluster(void) {
    18f0:	cf 92       	push	r12
    18f2:	df 92       	push	r13
    18f4:	ef 92       	push	r14
    18f6:	ff 92       	push	r15
    18f8:	1f 93       	push	r17
    18fa:	cf 93       	push	r28
    18fc:	df 93       	push	r29
    18fe:	ec 01       	movw	r28, r24
  if (!addCluster()) return false;
    1900:	0e 94 4e 0c 	call	0x189c	; 0x189c <_ZN6SdFile10addClusterEv>
    1904:	88 23       	and	r24, r24
    1906:	09 f4       	brne	.+2      	; 0x190a <_ZN6SdFile13addDirClusterEv+0x1a>
    1908:	4e c0       	rjmp	.+156    	; 0x19a6 <_ZN6SdFile13addDirClusterEv+0xb6>

  // zero data in cluster insure first cluster is in cache
  uint32_t block = vol_->clusterStartBlock(curCluster_);
    190a:	eb 8d       	ldd	r30, Y+27	; 0x1b
    190c:	fc 8d       	ldd	r31, Y+28	; 0x1c
  //----------------------------------------------------------------------------
  uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
          return (position >> 9) & (blocksPerCluster_ - 1);}
  uint32_t clusterStartBlock(uint32_t cluster) const {
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
    190e:	ce 80       	ldd	r12, Y+6	; 0x06
    1910:	df 80       	ldd	r13, Y+7	; 0x07
    1912:	e8 84       	ldd	r14, Y+8	; 0x08
    1914:	f9 84       	ldd	r15, Y+9	; 0x09
    1916:	8e ef       	ldi	r24, 0xFE	; 254
    1918:	9f ef       	ldi	r25, 0xFF	; 255
    191a:	af ef       	ldi	r26, 0xFF	; 255
    191c:	bf ef       	ldi	r27, 0xFF	; 255
    191e:	c8 0e       	add	r12, r24
    1920:	d9 1e       	adc	r13, r25
    1922:	ea 1e       	adc	r14, r26
    1924:	fb 1e       	adc	r15, r27
    1926:	05 84       	ldd	r0, Z+13	; 0x0d
    1928:	04 c0       	rjmp	.+8      	; 0x1932 <_ZN6SdFile13addDirClusterEv+0x42>
    192a:	cc 0c       	add	r12, r12
    192c:	dd 1c       	adc	r13, r13
    192e:	ee 1c       	adc	r14, r14
    1930:	ff 1c       	adc	r15, r15
    1932:	0a 94       	dec	r0
    1934:	d2 f7       	brpl	.-12     	; 0x192a <_ZN6SdFile13addDirClusterEv+0x3a>
    1936:	86 85       	ldd	r24, Z+14	; 0x0e
    1938:	97 85       	ldd	r25, Z+15	; 0x0f
    193a:	a0 89       	ldd	r26, Z+16	; 0x10
    193c:	b1 89       	ldd	r27, Z+17	; 0x11
    193e:	c8 0e       	add	r12, r24
    1940:	d9 1e       	adc	r13, r25
    1942:	ea 1e       	adc	r14, r26
    1944:	fb 1e       	adc	r15, r27
  for (uint8_t i = vol_->blocksPerCluster_; i != 0; i--) {
    1946:	14 81       	ldd	r17, Z+4	; 0x04
    if (!SdVolume::cacheZeroBlock(block + i - 1)) return false;
    1948:	08 94       	sec
    194a:	c1 08       	sbc	r12, r1
    194c:	d1 08       	sbc	r13, r1
    194e:	e1 08       	sbc	r14, r1
    1950:	f1 08       	sbc	r15, r1
uint8_t SdFile::addDirCluster(void) {
  if (!addCluster()) return false;

  // zero data in cluster insure first cluster is in cache
  uint32_t block = vol_->clusterStartBlock(curCluster_);
  for (uint8_t i = vol_->blocksPerCluster_; i != 0; i--) {
    1952:	0b c0       	rjmp	.+22     	; 0x196a <_ZN6SdFile13addDirClusterEv+0x7a>
    if (!SdVolume::cacheZeroBlock(block + i - 1)) return false;
    1954:	c7 01       	movw	r24, r14
    1956:	b6 01       	movw	r22, r12
    1958:	61 0f       	add	r22, r17
    195a:	71 1d       	adc	r23, r1
    195c:	81 1d       	adc	r24, r1
    195e:	91 1d       	adc	r25, r1
    1960:	0e 94 69 14 	call	0x28d2	; 0x28d2 <_ZN8SdVolume14cacheZeroBlockEm>
    1964:	88 23       	and	r24, r24
    1966:	f9 f0       	breq	.+62     	; 0x19a6 <_ZN6SdFile13addDirClusterEv+0xb6>
uint8_t SdFile::addDirCluster(void) {
  if (!addCluster()) return false;

  // zero data in cluster insure first cluster is in cache
  uint32_t block = vol_->clusterStartBlock(curCluster_);
  for (uint8_t i = vol_->blocksPerCluster_; i != 0; i--) {
    1968:	11 50       	subi	r17, 0x01	; 1
    196a:	11 23       	and	r17, r17
    196c:	99 f7       	brne	.-26     	; 0x1954 <_ZN6SdFile13addDirClusterEv+0x64>
    if (!SdVolume::cacheZeroBlock(block + i - 1)) return false;
  }
  // Increase directory file size by cluster size
  fileSize_ += 512UL << vol_->clusterSizeShift_;
    196e:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1970:	fc 8d       	ldd	r31, Y+28	; 0x1c
    1972:	80 e0       	ldi	r24, 0x00	; 0
    1974:	92 e0       	ldi	r25, 0x02	; 2
    1976:	a0 e0       	ldi	r26, 0x00	; 0
    1978:	b0 e0       	ldi	r27, 0x00	; 0
    197a:	05 84       	ldd	r0, Z+13	; 0x0d
    197c:	04 c0       	rjmp	.+8      	; 0x1986 <_ZN6SdFile13addDirClusterEv+0x96>
    197e:	88 0f       	add	r24, r24
    1980:	99 1f       	adc	r25, r25
    1982:	aa 1f       	adc	r26, r26
    1984:	bb 1f       	adc	r27, r27
    1986:	0a 94       	dec	r0
    1988:	d2 f7       	brpl	.-12     	; 0x197e <_ZN6SdFile13addDirClusterEv+0x8e>
    198a:	4b 89       	ldd	r20, Y+19	; 0x13
    198c:	5c 89       	ldd	r21, Y+20	; 0x14
    198e:	6d 89       	ldd	r22, Y+21	; 0x15
    1990:	7e 89       	ldd	r23, Y+22	; 0x16
    1992:	48 0f       	add	r20, r24
    1994:	59 1f       	adc	r21, r25
    1996:	6a 1f       	adc	r22, r26
    1998:	7b 1f       	adc	r23, r27
    199a:	4b 8b       	std	Y+19, r20	; 0x13
    199c:	5c 8b       	std	Y+20, r21	; 0x14
    199e:	6d 8b       	std	Y+21, r22	; 0x15
    19a0:	7e 8b       	std	Y+22, r23	; 0x16
    19a2:	81 e0       	ldi	r24, 0x01	; 1
    19a4:	01 c0       	rjmp	.+2      	; 0x19a8 <_ZN6SdFile13addDirClusterEv+0xb8>
  if (!addCluster()) return false;

  // zero data in cluster insure first cluster is in cache
  uint32_t block = vol_->clusterStartBlock(curCluster_);
  for (uint8_t i = vol_->blocksPerCluster_; i != 0; i--) {
    if (!SdVolume::cacheZeroBlock(block + i - 1)) return false;
    19a6:	80 e0       	ldi	r24, 0x00	; 0
  }
  // Increase directory file size by cluster size
  fileSize_ += 512UL << vol_->clusterSizeShift_;
  return true;
}
    19a8:	df 91       	pop	r29
    19aa:	cf 91       	pop	r28
    19ac:	1f 91       	pop	r17
    19ae:	ff 90       	pop	r15
    19b0:	ef 90       	pop	r14
    19b2:	df 90       	pop	r13
    19b4:	cf 90       	pop	r12
    19b6:	08 95       	ret

000019b8 <_ZN6SdFile13cacheDirEntryEh>:
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* SdFile::cacheDirEntry(uint8_t action) {
    19b8:	cf 93       	push	r28
    19ba:	df 93       	push	r29
    19bc:	ec 01       	movw	r28, r24
    19be:	46 2f       	mov	r20, r22
  if (!SdVolume::cacheRawBlock(dirBlock_, action)) return NULL;
    19c0:	8e 85       	ldd	r24, Y+14	; 0x0e
    19c2:	9f 85       	ldd	r25, Y+15	; 0x0f
    19c4:	a8 89       	ldd	r26, Y+16	; 0x10
    19c6:	b9 89       	ldd	r27, Y+17	; 0x11
    19c8:	bc 01       	movw	r22, r24
    19ca:	cd 01       	movw	r24, r26
    19cc:	0e 94 2e 14 	call	0x285c	; 0x285c <_ZN8SdVolume13cacheRawBlockEmh>
    19d0:	88 23       	and	r24, r24
    19d2:	51 f0       	breq	.+20     	; 0x19e8 <_ZN6SdFile13cacheDirEntryEh+0x30>
  return SdVolume::cacheBuffer_.dir + dirIndex_;
    19d4:	8a 89       	ldd	r24, Y+18	; 0x12
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	25 e0       	ldi	r18, 0x05	; 5
    19da:	88 0f       	add	r24, r24
    19dc:	99 1f       	adc	r25, r25
    19de:	2a 95       	dec	r18
    19e0:	e1 f7       	brne	.-8      	; 0x19da <_ZN6SdFile13cacheDirEntryEh+0x22>
    19e2:	83 5a       	subi	r24, 0xA3	; 163
    19e4:	9a 4f       	sbci	r25, 0xFA	; 250
    19e6:	02 c0       	rjmp	.+4      	; 0x19ec <_ZN6SdFile13cacheDirEntryEh+0x34>
}
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* SdFile::cacheDirEntry(uint8_t action) {
  if (!SdVolume::cacheRawBlock(dirBlock_, action)) return NULL;
    19e8:	80 e0       	ldi	r24, 0x00	; 0
    19ea:	90 e0       	ldi	r25, 0x00	; 0
  return SdVolume::cacheBuffer_.dir + dirIndex_;
}
    19ec:	df 91       	pop	r29
    19ee:	cf 91       	pop	r28
    19f0:	08 95       	ret

000019f2 <_ZN6SdFile10make83NameEPKcPh>:
    }
  }
}
//------------------------------------------------------------------------------
// format directory name field from a 8.3 name string
uint8_t SdFile::make83Name(const char* str, uint8_t* name) {
    19f2:	dc 01       	movw	r26, r24
      // illegal FAT characters
      PGM_P p = PSTR("|<>^+=?/[];,*\"\\");
      uint8_t b;
      while ((b = pgm_read_byte(p++))) if (b == c) return false;
      // check size and only allow ASCII printable characters
      if (i > n || c < 0X21 || c > 0X7E)return false;
    19f4:	fb 01       	movw	r30, r22
    }
  }
}
//------------------------------------------------------------------------------
// format directory name field from a 8.3 name string
uint8_t SdFile::make83Name(const char* str, uint8_t* name) {
    19f6:	8b e0       	ldi	r24, 0x0B	; 11
  uint8_t c;
  uint8_t n = 7;  // max index for part before dot
  uint8_t i = 0;
  // blank fill name and extension
  while (i < 11) name[i++] = ' ';
    19f8:	90 e2       	ldi	r25, 0x20	; 32
    19fa:	91 93       	st	Z+, r25
    19fc:	81 50       	subi	r24, 0x01	; 1
    19fe:	e9 f7       	brne	.-6      	; 0x19fa <_ZN6SdFile10make83NameEPKcPh+0x8>
    1a00:	30 e0       	ldi	r19, 0x00	; 0
    1a02:	47 e0       	ldi	r20, 0x07	; 7
    1a04:	21 c0       	rjmp	.+66     	; 0x1a48 <_ZN6SdFile10make83NameEPKcPh+0x56>
  i = 0;
  while ((c = *str++) != '\0') {
    if (c == '.') {
    1a06:	2e 32       	cpi	r18, 0x2E	; 46
    1a08:	41 f4       	brne	.+16     	; 0x1a1a <_ZN6SdFile10make83NameEPKcPh+0x28>
      if (n == 10) return false;  // only one dot allowed
    1a0a:	4a 30       	cpi	r20, 0x0A	; 10
    1a0c:	29 f1       	breq	.+74     	; 0x1a58 <_ZN6SdFile10make83NameEPKcPh+0x66>
      n = 10;  // max index for full 8.3 name
      i = 8;   // place for extension
    1a0e:	38 e0       	ldi	r19, 0x08	; 8
  while (i < 11) name[i++] = ' ';
  i = 0;
  while ((c = *str++) != '\0') {
    if (c == '.') {
      if (n == 10) return false;  // only one dot allowed
      n = 10;  // max index for full 8.3 name
    1a10:	4a e0       	ldi	r20, 0x0A	; 10
    1a12:	1a c0       	rjmp	.+52     	; 0x1a48 <_ZN6SdFile10make83NameEPKcPh+0x56>
      i = 8;   // place for extension
    } else {
      // illegal FAT characters
      PGM_P p = PSTR("|<>^+=?/[];,*\"\\");
      uint8_t b;
      while ((b = pgm_read_byte(p++))) if (b == c) return false;
    1a14:	e2 17       	cp	r30, r18
    1a16:	19 f4       	brne	.+6      	; 0x1a1e <_ZN6SdFile10make83NameEPKcPh+0x2c>
    1a18:	1f c0       	rjmp	.+62     	; 0x1a58 <_ZN6SdFile10make83NameEPKcPh+0x66>
  uint8_t i = 0;
  // blank fill name and extension
  while (i < 11) name[i++] = ' ';
  i = 0;
  while ((c = *str++) != '\0') {
    if (c == '.') {
    1a1a:	84 ee       	ldi	r24, 0xE4	; 228
    1a1c:	90 e0       	ldi	r25, 0x00	; 0
      i = 8;   // place for extension
    } else {
      // illegal FAT characters
      PGM_P p = PSTR("|<>^+=?/[];,*\"\\");
      uint8_t b;
      while ((b = pgm_read_byte(p++))) if (b == c) return false;
    1a1e:	fc 01       	movw	r30, r24
    1a20:	01 96       	adiw	r24, 0x01	; 1
    1a22:	e4 91       	lpm	r30, Z
    1a24:	ee 23       	and	r30, r30
    1a26:	b1 f7       	brne	.-20     	; 0x1a14 <_ZN6SdFile10make83NameEPKcPh+0x22>
      // check size and only allow ASCII printable characters
      if (i > n || c < 0X21 || c > 0X7E)return false;
    1a28:	43 17       	cp	r20, r19
    1a2a:	b0 f0       	brcs	.+44     	; 0x1a58 <_ZN6SdFile10make83NameEPKcPh+0x66>
    1a2c:	21 32       	cpi	r18, 0x21	; 33
    1a2e:	a0 f0       	brcs	.+40     	; 0x1a58 <_ZN6SdFile10make83NameEPKcPh+0x66>
    1a30:	2f 37       	cpi	r18, 0x7F	; 127
    1a32:	a0 f4       	brcc	.+40     	; 0x1a5c <_ZN6SdFile10make83NameEPKcPh+0x6a>
      // only upper case allowed in 8.3 names - convert lower to upper
      name[i++] = c < 'a' || c > 'z' ?  c : c + ('A' - 'a');
    1a34:	fb 01       	movw	r30, r22
    1a36:	e3 0f       	add	r30, r19
    1a38:	f1 1d       	adc	r31, r1
    1a3a:	82 2f       	mov	r24, r18
    1a3c:	81 56       	subi	r24, 0x61	; 97
    1a3e:	8a 31       	cpi	r24, 0x1A	; 26
    1a40:	08 f4       	brcc	.+2      	; 0x1a44 <_ZN6SdFile10make83NameEPKcPh+0x52>
    1a42:	20 52       	subi	r18, 0x20	; 32
    1a44:	20 83       	st	Z, r18
    1a46:	3f 5f       	subi	r19, 0xFF	; 255
  uint8_t n = 7;  // max index for part before dot
  uint8_t i = 0;
  // blank fill name and extension
  while (i < 11) name[i++] = ' ';
  i = 0;
  while ((c = *str++) != '\0') {
    1a48:	2d 91       	ld	r18, X+
    1a4a:	22 23       	and	r18, r18
    1a4c:	e1 f6       	brne	.-72     	; 0x1a06 <_ZN6SdFile10make83NameEPKcPh+0x14>
      // only upper case allowed in 8.3 names - convert lower to upper
      name[i++] = c < 'a' || c > 'z' ?  c : c + ('A' - 'a');
    }
  }
  // must have a file name, extension is optional
  return name[0] != ' ';
    1a4e:	81 e0       	ldi	r24, 0x01	; 1
    1a50:	fb 01       	movw	r30, r22
    1a52:	90 81       	ld	r25, Z
    1a54:	90 32       	cpi	r25, 0x20	; 32
    1a56:	19 f4       	brne	.+6      	; 0x1a5e <_ZN6SdFile10make83NameEPKcPh+0x6c>
      // illegal FAT characters
      PGM_P p = PSTR("|<>^+=?/[];,*\"\\");
      uint8_t b;
      while ((b = pgm_read_byte(p++))) if (b == c) return false;
      // check size and only allow ASCII printable characters
      if (i > n || c < 0X21 || c > 0X7E)return false;
    1a58:	80 e0       	ldi	r24, 0x00	; 0
    1a5a:	08 95       	ret
    1a5c:	80 e0       	ldi	r24, 0x00	; 0
      name[i++] = c < 'a' || c > 'z' ?  c : c + ('A' - 'a');
    }
  }
  // must have a file name, extension is optional
  return name[0] != ' ';
}
    1a5e:	08 95       	ret

00001a60 <_ZN6SdFile8openRootEP8SdVolume>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include the FAT volume has not been initialized
 * or it a FAT12 volume.
 */
uint8_t SdFile::openRoot(SdVolume* vol) {
    1a60:	0f 93       	push	r16
    1a62:	1f 93       	push	r17
    1a64:	cf 93       	push	r28
    1a66:	df 93       	push	r29
    1a68:	ec 01       	movw	r28, r24
    1a6a:	8b 01       	movw	r16, r22
  // error if file is already open
  if (isOpen()) return false;
    1a6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a6e:	88 23       	and	r24, r24
    1a70:	09 f0       	breq	.+2      	; 0x1a74 <_ZN6SdFile8openRootEP8SdVolume+0x14>
    1a72:	41 c0       	rjmp	.+130    	; 0x1af6 <_ZN6SdFile8openRootEP8SdVolume+0x96>
 * Use SdFile::writeError to check for errors.
 */
void SdFile::writeln_P(PGM_P str) {
  write_P(str);
  println();
}
    1a74:	fb 01       	movw	r30, r22
    1a76:	87 89       	ldd	r24, Z+23	; 0x17
 */
uint8_t SdFile::openRoot(SdVolume* vol) {
  // error if file is already open
  if (isOpen()) return false;

  if (vol->fatType() == 16) {
    1a78:	80 31       	cpi	r24, 0x10	; 16
    1a7a:	b1 f4       	brne	.+44     	; 0x1aa8 <_ZN6SdFile8openRootEP8SdVolume+0x48>
    type_ = FAT_FILE_TYPE_ROOT16;
    1a7c:	82 e0       	ldi	r24, 0x02	; 2
    1a7e:	8d 83       	std	Y+5, r24	; 0x05
    firstCluster_ = 0;
    1a80:	1f 8a       	std	Y+23, r1	; 0x17
    1a82:	18 8e       	std	Y+24, r1	; 0x18
    1a84:	19 8e       	std	Y+25, r1	; 0x19
    1a86:	1a 8e       	std	Y+26, r1	; 0x1a
  /** \return The logical block number for the start of the first FAT. */
  uint32_t fatStartBlock(void) const {return fatStartBlock_;}
  /** \return The FAT type of the volume. Values are 12, 16 or 32. */
  uint8_t fatType(void) const {return fatType_;}
  /** \return The number of entries in the root directory for FAT16 volumes. */
  uint32_t rootDirEntryCount(void) const {return rootDirEntryCount_;}
    1a88:	80 8d       	ldd	r24, Z+24	; 0x18
    1a8a:	91 8d       	ldd	r25, Z+25	; 0x19
    1a8c:	a0 e0       	ldi	r26, 0x00	; 0
    1a8e:	b0 e0       	ldi	r27, 0x00	; 0
    fileSize_ = 32 * vol->rootDirEntryCount();
    1a90:	35 e0       	ldi	r19, 0x05	; 5
    1a92:	88 0f       	add	r24, r24
    1a94:	99 1f       	adc	r25, r25
    1a96:	aa 1f       	adc	r26, r26
    1a98:	bb 1f       	adc	r27, r27
    1a9a:	3a 95       	dec	r19
    1a9c:	d1 f7       	brne	.-12     	; 0x1a92 <_ZN6SdFile8openRootEP8SdVolume+0x32>
    1a9e:	8b 8b       	std	Y+19, r24	; 0x13
    1aa0:	9c 8b       	std	Y+20, r25	; 0x14
    1aa2:	ad 8b       	std	Y+21, r26	; 0x15
    1aa4:	be 8b       	std	Y+22, r27	; 0x16
    1aa6:	15 c0       	rjmp	.+42     	; 0x1ad2 <_ZN6SdFile8openRootEP8SdVolume+0x72>
  } else if (vol->fatType() == 32) {
    1aa8:	80 32       	cpi	r24, 0x20	; 32
    1aaa:	29 f5       	brne	.+74     	; 0x1af6 <_ZN6SdFile8openRootEP8SdVolume+0x96>
    type_ = FAT_FILE_TYPE_ROOT32;
    1aac:	83 e0       	ldi	r24, 0x03	; 3
    1aae:	8d 83       	std	Y+5, r24	; 0x05
  /** \return The logical block number for the start of the root directory
       on FAT16 volumes or the first cluster number on FAT32 volumes. */
  uint32_t rootDirStart(void) const {return rootDirStart_;}
    1ab0:	fb 01       	movw	r30, r22
    1ab2:	42 8d       	ldd	r20, Z+26	; 0x1a
    1ab4:	53 8d       	ldd	r21, Z+27	; 0x1b
    1ab6:	64 8d       	ldd	r22, Z+28	; 0x1c
    1ab8:	75 8d       	ldd	r23, Z+29	; 0x1d
    firstCluster_ = vol->rootDirStart();
    1aba:	4f 8b       	std	Y+23, r20	; 0x17
    1abc:	58 8f       	std	Y+24, r21	; 0x18
    1abe:	69 8f       	std	Y+25, r22	; 0x19
    1ac0:	7a 8f       	std	Y+26, r23	; 0x1a
    if (!vol->chainSize(firstCluster_, &fileSize_)) return false;
    1ac2:	9e 01       	movw	r18, r28
    1ac4:	2d 5e       	subi	r18, 0xED	; 237
    1ac6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ac8:	c8 01       	movw	r24, r16
    1aca:	0e 94 18 15 	call	0x2a30	; 0x2a30 <_ZNK8SdVolume9chainSizeEmPm>
    1ace:	88 23       	and	r24, r24
    1ad0:	91 f0       	breq	.+36     	; 0x1af6 <_ZN6SdFile8openRootEP8SdVolume+0x96>
  } else {
    // volume is not initialized or FAT12
    return false;
  }
  vol_ = vol;
    1ad2:	1c 8f       	std	Y+28, r17	; 0x1c
    1ad4:	0b 8f       	std	Y+27, r16	; 0x1b
  // read only
  flags_ = O_READ;
    1ad6:	81 e0       	ldi	r24, 0x01	; 1
    1ad8:	8c 83       	std	Y+4, r24	; 0x04

  // set to start of file
  curCluster_ = 0;
    1ada:	1e 82       	std	Y+6, r1	; 0x06
    1adc:	1f 82       	std	Y+7, r1	; 0x07
    1ade:	18 86       	std	Y+8, r1	; 0x08
    1ae0:	19 86       	std	Y+9, r1	; 0x09
  curPosition_ = 0;
    1ae2:	1a 86       	std	Y+10, r1	; 0x0a
    1ae4:	1b 86       	std	Y+11, r1	; 0x0b
    1ae6:	1c 86       	std	Y+12, r1	; 0x0c
    1ae8:	1d 86       	std	Y+13, r1	; 0x0d

  // root has no directory entry
  dirBlock_ = 0;
    1aea:	1e 86       	std	Y+14, r1	; 0x0e
    1aec:	1f 86       	std	Y+15, r1	; 0x0f
    1aee:	18 8a       	std	Y+16, r1	; 0x10
    1af0:	19 8a       	std	Y+17, r1	; 0x11
  dirIndex_ = 0;
    1af2:	1a 8a       	std	Y+18, r1	; 0x12
  return true;
    1af4:	01 c0       	rjmp	.+2      	; 0x1af8 <_ZN6SdFile8openRootEP8SdVolume+0x98>
    firstCluster_ = 0;
    fileSize_ = 32 * vol->rootDirEntryCount();
  } else if (vol->fatType() == 32) {
    type_ = FAT_FILE_TYPE_ROOT32;
    firstCluster_ = vol->rootDirStart();
    if (!vol->chainSize(firstCluster_, &fileSize_)) return false;
    1af6:	80 e0       	ldi	r24, 0x00	; 0

  // root has no directory entry
  dirBlock_ = 0;
  dirIndex_ = 0;
  return true;
}
    1af8:	df 91       	pop	r29
    1afa:	cf 91       	pop	r28
    1afc:	1f 91       	pop	r17
    1afe:	0f 91       	pop	r16
    1b00:	08 95       	ret

00001b02 <_ZN6SdFile4readEPvj>:
 * if end of file is reached.
 * If an error occurs, read() returns -1.  Possible errors include
 * read() called before a file has been opened, corrupt file system
 * or an I/O error occurred.
 */
int16_t SdFile::read(void* buf, uint16_t nbyte) {
    1b02:	2f 92       	push	r2
    1b04:	3f 92       	push	r3
    1b06:	4f 92       	push	r4
    1b08:	5f 92       	push	r5
    1b0a:	6f 92       	push	r6
    1b0c:	7f 92       	push	r7
    1b0e:	8f 92       	push	r8
    1b10:	9f 92       	push	r9
    1b12:	af 92       	push	r10
    1b14:	bf 92       	push	r11
    1b16:	cf 92       	push	r12
    1b18:	df 92       	push	r13
    1b1a:	ef 92       	push	r14
    1b1c:	ff 92       	push	r15
    1b1e:	0f 93       	push	r16
    1b20:	1f 93       	push	r17
    1b22:	cf 93       	push	r28
    1b24:	df 93       	push	r29
    1b26:	00 d0       	rcall	.+0      	; 0x1b28 <_ZN6SdFile4readEPvj+0x26>
    1b28:	00 d0       	rcall	.+0      	; 0x1b2a <_ZN6SdFile4readEPvj+0x28>
    1b2a:	cd b7       	in	r28, 0x3d	; 61
    1b2c:	de b7       	in	r29, 0x3e	; 62
    1b2e:	9c 83       	std	Y+4, r25	; 0x04
    1b30:	8b 83       	std	Y+3, r24	; 0x03
    1b32:	86 2e       	mov	r8, r22
    1b34:	27 2e       	mov	r2, r23
    1b36:	2a 01       	movw	r4, r20
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);

  // error if not open or write only
  if (!isOpen() || !(flags_ & O_READ)) return -1;
    1b38:	dc 01       	movw	r26, r24
    1b3a:	15 96       	adiw	r26, 0x05	; 5
    1b3c:	8c 91       	ld	r24, X
    1b3e:	15 97       	sbiw	r26, 0x05	; 5
    1b40:	88 23       	and	r24, r24
    1b42:	09 f4       	brne	.+2      	; 0x1b46 <_ZN6SdFile4readEPvj+0x44>
    1b44:	e5 c0       	rjmp	.+458    	; 0x1d10 <_ZN6SdFile4readEPvj+0x20e>
    1b46:	14 96       	adiw	r26, 0x04	; 4
    1b48:	8c 91       	ld	r24, X
    1b4a:	14 97       	sbiw	r26, 0x04	; 4
    1b4c:	80 ff       	sbrs	r24, 0
    1b4e:	e0 c0       	rjmp	.+448    	; 0x1d10 <_ZN6SdFile4readEPvj+0x20e>
    1b50:	fa c0       	rjmp	.+500    	; 0x1d46 <_ZN6SdFile4readEPvj+0x244>

  // max bytes left in file
  if (nbyte > (fileSize_ - curPosition_)) nbyte = fileSize_ - curPosition_;
    1b52:	2a 01       	movw	r4, r20
    1b54:	48 1a       	sub	r4, r24
    1b56:	59 0a       	sbc	r5, r25

  // amount left to read
  uint16_t toRead = nbyte;
    1b58:	32 01       	movw	r6, r4
 * If an error occurs, read() returns -1.  Possible errors include
 * read() called before a file has been opened, corrupt file system
 * or an I/O error occurred.
 */
int16_t SdFile::read(void* buf, uint16_t nbyte) {
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
    1b5a:	a8 2c       	mov	r10, r8
    1b5c:	b2 2c       	mov	r11, r2
        if (curPosition_ == 0) {
          // use first cluster in file
          curCluster_ = firstCluster_;
        } else {
          // get next cluster from FAT
          if (!vol_->fatGet(curCluster_, &curCluster_)) return -1;
    1b5e:	eb 81       	ldd	r30, Y+3	; 0x03
    1b60:	fc 81       	ldd	r31, Y+4	; 0x04
    1b62:	36 96       	adiw	r30, 0x06	; 6
    1b64:	fa 83       	std	Y+2, r31	; 0x02
    1b66:	e9 83       	std	Y+1, r30	; 0x01
      block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    }
    uint16_t n = toRead;

    // amount to be read from current block
    if (n > (512 - offset)) n = 512 - offset;
    1b68:	21 2c       	mov	r2, r1
    1b6a:	02 e0       	ldi	r16, 0x02	; 2
    1b6c:	30 2e       	mov	r3, r16
  // max bytes left in file
  if (nbyte > (fileSize_ - curPosition_)) nbyte = fileSize_ - curPosition_;

  // amount left to read
  uint16_t toRead = nbyte;
  while (toRead > 0) {
    1b6e:	ca c0       	rjmp	.+404    	; 0x1d04 <_ZN6SdFile4readEPvj+0x202>
    uint32_t block;  // raw device block number
    uint16_t offset = curPosition_ & 0X1FF;  // offset in block
    1b70:	eb 81       	ldd	r30, Y+3	; 0x03
    1b72:	fc 81       	ldd	r31, Y+4	; 0x04
    1b74:	82 85       	ldd	r24, Z+10	; 0x0a
    1b76:	93 85       	ldd	r25, Z+11	; 0x0b
    1b78:	a4 85       	ldd	r26, Z+12	; 0x0c
    1b7a:	b5 85       	ldd	r27, Z+13	; 0x0d
    1b7c:	7f ef       	ldi	r23, 0xFF	; 255
    1b7e:	87 2e       	mov	r8, r23
    1b80:	71 e0       	ldi	r23, 0x01	; 1
    1b82:	97 2e       	mov	r9, r23
    1b84:	88 22       	and	r8, r24
    1b86:	99 22       	and	r9, r25
    if (type_ == FAT_FILE_TYPE_ROOT16) {
    1b88:	25 81       	ldd	r18, Z+5	; 0x05
    1b8a:	6c 01       	movw	r12, r24
    1b8c:	7d 01       	movw	r14, r26
    1b8e:	19 e0       	ldi	r17, 0x09	; 9
    1b90:	f6 94       	lsr	r15
    1b92:	e7 94       	ror	r14
    1b94:	d7 94       	ror	r13
    1b96:	c7 94       	ror	r12
    1b98:	1a 95       	dec	r17
    1b9a:	d1 f7       	brne	.-12     	; 0x1b90 <_ZN6SdFile4readEPvj+0x8e>
    1b9c:	43 8d       	ldd	r20, Z+27	; 0x1b
    1b9e:	54 8d       	ldd	r21, Z+28	; 0x1c
    1ba0:	5e 83       	std	Y+6, r21	; 0x06
    1ba2:	4d 83       	std	Y+5, r20	; 0x05
    1ba4:	22 30       	cpi	r18, 0x02	; 2
    1ba6:	61 f4       	brne	.+24     	; 0x1bc0 <_ZN6SdFile4readEPvj+0xbe>
      block = vol_->rootDirStart() + (curPosition_ >> 9);
    1ba8:	da 01       	movw	r26, r20
    1baa:	5a 96       	adiw	r26, 0x1a	; 26
    1bac:	4d 91       	ld	r20, X+
    1bae:	5d 91       	ld	r21, X+
    1bb0:	6d 91       	ld	r22, X+
    1bb2:	7c 91       	ld	r23, X
    1bb4:	5d 97       	sbiw	r26, 0x1d	; 29
    1bb6:	4c 0d       	add	r20, r12
    1bb8:	5d 1d       	adc	r21, r13
    1bba:	6e 1d       	adc	r22, r14
    1bbc:	7f 1d       	adc	r23, r15
    1bbe:	4e c0       	rjmp	.+156    	; 0x1c5c <_ZN6SdFile4readEPvj+0x15a>
  uint16_t rootDirEntryCount_;  // number of entries in FAT16 root dir
  uint32_t rootDirStart_;       // root start block for FAT16, cluster for FAT32
  //----------------------------------------------------------------------------
  uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
          return (position >> 9) & (blocksPerCluster_ - 1);}
    1bc0:	ed 81       	ldd	r30, Y+5	; 0x05
    1bc2:	fe 81       	ldd	r31, Y+6	; 0x06
    1bc4:	04 81       	ldd	r16, Z+4	; 0x04
    1bc6:	01 50       	subi	r16, 0x01	; 1
    1bc8:	0c 21       	and	r16, r12
    } else {
      uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
      if (offset == 0 && blockOfCluster == 0) {
    1bca:	81 14       	cp	r8, r1
    1bcc:	91 04       	cpc	r9, r1
    1bce:	11 f5       	brne	.+68     	; 0x1c14 <_ZN6SdFile4readEPvj+0x112>
    1bd0:	00 23       	and	r16, r16
    1bd2:	01 f5       	brne	.+64     	; 0x1c14 <_ZN6SdFile4readEPvj+0x112>
        // start of new cluster
        if (curPosition_ == 0) {
    1bd4:	00 97       	sbiw	r24, 0x00	; 0
    1bd6:	a1 05       	cpc	r26, r1
    1bd8:	b1 05       	cpc	r27, r1
    1bda:	59 f4       	brne	.+22     	; 0x1bf2 <_ZN6SdFile4readEPvj+0xf0>
          // use first cluster in file
          curCluster_ = firstCluster_;
    1bdc:	eb 81       	ldd	r30, Y+3	; 0x03
    1bde:	fc 81       	ldd	r31, Y+4	; 0x04
    1be0:	87 89       	ldd	r24, Z+23	; 0x17
    1be2:	90 8d       	ldd	r25, Z+24	; 0x18
    1be4:	a1 8d       	ldd	r26, Z+25	; 0x19
    1be6:	b2 8d       	ldd	r27, Z+26	; 0x1a
    1be8:	86 83       	std	Z+6, r24	; 0x06
    1bea:	97 83       	std	Z+7, r25	; 0x07
    1bec:	a0 87       	std	Z+8, r26	; 0x08
    1bee:	b1 87       	std	Z+9, r27	; 0x09
    1bf0:	11 c0       	rjmp	.+34     	; 0x1c14 <_ZN6SdFile4readEPvj+0x112>
        } else {
          // get next cluster from FAT
          if (!vol_->fatGet(curCluster_, &curCluster_)) return -1;
    1bf2:	ab 81       	ldd	r26, Y+3	; 0x03
    1bf4:	bc 81       	ldd	r27, Y+4	; 0x04
    1bf6:	16 96       	adiw	r26, 0x06	; 6
    1bf8:	4d 91       	ld	r20, X+
    1bfa:	5d 91       	ld	r21, X+
    1bfc:	6d 91       	ld	r22, X+
    1bfe:	7c 91       	ld	r23, X
    1c00:	19 97       	sbiw	r26, 0x09	; 9
    1c02:	8d 81       	ldd	r24, Y+5	; 0x05
    1c04:	9e 81       	ldd	r25, Y+6	; 0x06
    1c06:	29 81       	ldd	r18, Y+1	; 0x01
    1c08:	3a 81       	ldd	r19, Y+2	; 0x02
    1c0a:	0e 94 92 14 	call	0x2924	; 0x2924 <_ZNK8SdVolume6fatGetEmPm>
    1c0e:	88 23       	and	r24, r24
    1c10:	09 f4       	brne	.+2      	; 0x1c14 <_ZN6SdFile4readEPvj+0x112>
    1c12:	7e c0       	rjmp	.+252    	; 0x1d10 <_ZN6SdFile4readEPvj+0x20e>
        }
      }
      block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    1c14:	ab 81       	ldd	r26, Y+3	; 0x03
    1c16:	bc 81       	ldd	r27, Y+4	; 0x04
    1c18:	5b 96       	adiw	r26, 0x1b	; 27
    1c1a:	ed 91       	ld	r30, X+
    1c1c:	fc 91       	ld	r31, X
    1c1e:	5c 97       	sbiw	r26, 0x1c	; 28
  uint32_t clusterStartBlock(uint32_t cluster) const {
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
    1c20:	16 96       	adiw	r26, 0x06	; 6
    1c22:	4d 91       	ld	r20, X+
    1c24:	5d 91       	ld	r21, X+
    1c26:	6d 91       	ld	r22, X+
    1c28:	7c 91       	ld	r23, X
    1c2a:	19 97       	sbiw	r26, 0x09	; 9
    1c2c:	42 50       	subi	r20, 0x02	; 2
    1c2e:	50 40       	sbci	r21, 0x00	; 0
    1c30:	60 40       	sbci	r22, 0x00	; 0
    1c32:	70 40       	sbci	r23, 0x00	; 0
    1c34:	05 84       	ldd	r0, Z+13	; 0x0d
    1c36:	04 c0       	rjmp	.+8      	; 0x1c40 <_ZN6SdFile4readEPvj+0x13e>
    1c38:	44 0f       	add	r20, r20
    1c3a:	55 1f       	adc	r21, r21
    1c3c:	66 1f       	adc	r22, r22
    1c3e:	77 1f       	adc	r23, r23
    1c40:	0a 94       	dec	r0
    1c42:	d2 f7       	brpl	.-12     	; 0x1c38 <_ZN6SdFile4readEPvj+0x136>
    1c44:	86 85       	ldd	r24, Z+14	; 0x0e
    1c46:	97 85       	ldd	r25, Z+15	; 0x0f
    1c48:	a0 89       	ldd	r26, Z+16	; 0x10
    1c4a:	b1 89       	ldd	r27, Z+17	; 0x11
    1c4c:	48 0f       	add	r20, r24
    1c4e:	59 1f       	adc	r21, r25
    1c50:	6a 1f       	adc	r22, r26
    1c52:	7b 1f       	adc	r23, r27
    1c54:	40 0f       	add	r20, r16
    1c56:	51 1d       	adc	r21, r1
    1c58:	61 1d       	adc	r22, r1
    1c5a:	71 1d       	adc	r23, r1
    }
    uint16_t n = toRead;

    // amount to be read from current block
    if (n > (512 - offset)) n = 512 - offset;
    1c5c:	c1 01       	movw	r24, r2
    1c5e:	88 19       	sub	r24, r8
    1c60:	99 09       	sbc	r25, r9
        } else {
          // get next cluster from FAT
          if (!vol_->fatGet(curCluster_, &curCluster_)) return -1;
        }
      }
      block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    1c62:	63 01       	movw	r12, r6
    1c64:	86 15       	cp	r24, r6
    1c66:	97 05       	cpc	r25, r7
    1c68:	08 f4       	brcc	.+2      	; 0x1c6c <_ZN6SdFile4readEPvj+0x16a>
    1c6a:	6c 01       	movw	r12, r24
   */
  uint8_t type(void) const {return type_;}
  uint8_t truncate(uint32_t size);
  /** \return Unbuffered read flag. */
  uint8_t unbufferedRead(void) const {
    return flags_ & F_FILE_UNBUFFERED_READ;
    1c6c:	eb 81       	ldd	r30, Y+3	; 0x03
    1c6e:	fc 81       	ldd	r31, Y+4	; 0x04
    1c70:	84 81       	ldd	r24, Z+4	; 0x04

    // amount to be read from current block
    if (n > (512 - offset)) n = 512 - offset;

    // no buffering needed if n == 512 or user requests no buffering
    if ((unbufferedRead() || n == 512) &&
    1c72:	86 fd       	sbrc	r24, 6
    1c74:	06 c0       	rjmp	.+12     	; 0x1c82 <_ZN6SdFile4readEPvj+0x180>
    1c76:	f0 e0       	ldi	r31, 0x00	; 0
    1c78:	cf 16       	cp	r12, r31
    1c7a:	f2 e0       	ldi	r31, 0x02	; 2
    1c7c:	df 06       	cpc	r13, r31
    1c7e:	09 f0       	breq	.+2      	; 0x1c82 <_ZN6SdFile4readEPvj+0x180>
    1c80:	80 c0       	rjmp	.+256    	; 0x1d82 <_ZN6SdFile4readEPvj+0x280>
    1c82:	80 91 ab 04 	lds	r24, 0x04AB
    1c86:	90 91 ac 04 	lds	r25, 0x04AC
    1c8a:	a0 91 ad 04 	lds	r26, 0x04AD
    1c8e:	b0 91 ae 04 	lds	r27, 0x04AE
    1c92:	48 17       	cp	r20, r24
    1c94:	59 07       	cpc	r21, r25
    1c96:	6a 07       	cpc	r22, r26
    1c98:	7b 07       	cpc	r23, r27
    1c9a:	09 f4       	brne	.+2      	; 0x1c9e <_ZN6SdFile4readEPvj+0x19c>
    1c9c:	72 c0       	rjmp	.+228    	; 0x1d82 <_ZN6SdFile4readEPvj+0x280>
  }
  uint8_t readBlock(uint32_t block, uint8_t* dst) {
    return sdCard_->readBlock(block, dst);}
  uint8_t readData(uint32_t block, uint16_t offset,
    uint16_t count, uint8_t* dst) {
      return sdCard_->readData(block, offset, count, dst);
    1c9e:	80 91 5b 05 	lds	r24, 0x055B
    1ca2:	90 91 5c 05 	lds	r25, 0x055C
    1ca6:	94 01       	movw	r18, r8
    1ca8:	86 01       	movw	r16, r12
    1caa:	75 01       	movw	r14, r10
    1cac:	0e 94 15 0b 	call	0x162a	; 0x162a <_ZN7Sd2Card8readDataEmjjPh>
      block != SdVolume::cacheBlockNumber_) {
      if (!vol_->readData(block, offset, n, dst)) return -1;
    1cb0:	88 23       	and	r24, r24
    1cb2:	71 f1       	breq	.+92     	; 0x1d10 <_ZN6SdFile4readEPvj+0x20e>
      dst += n;
    1cb4:	ac 0c       	add	r10, r12
    1cb6:	bd 1c       	adc	r11, r13
    1cb8:	12 c0       	rjmp	.+36     	; 0x1cde <_ZN6SdFile4readEPvj+0x1dc>
    } else {
      // read block to cache and copy data to caller
      if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_READ)) return -1;
      uint8_t* src = SdVolume::cacheBuffer_.data + offset;
    1cba:	94 01       	movw	r18, r8
    1cbc:	23 5a       	subi	r18, 0xA3	; 163
    1cbe:	3a 4f       	sbci	r19, 0xFA	; 250
      uint8_t* end = src + n;
    1cc0:	c9 01       	movw	r24, r18
    1cc2:	8c 0d       	add	r24, r12
    1cc4:	9d 1d       	adc	r25, r13
      while (src != end) *dst++ = *src++;
    1cc6:	f9 01       	movw	r30, r18
    1cc8:	d5 01       	movw	r26, r10
    1cca:	02 c0       	rjmp	.+4      	; 0x1cd0 <_ZN6SdFile4readEPvj+0x1ce>
    1ccc:	41 91       	ld	r20, Z+
    1cce:	4d 93       	st	X+, r20
    1cd0:	e8 17       	cp	r30, r24
    1cd2:	f9 07       	cpc	r31, r25
    1cd4:	d9 f7       	brne	.-10     	; 0x1ccc <_ZN6SdFile4readEPvj+0x1ca>
 * if end of file is reached.
 * If an error occurs, read() returns -1.  Possible errors include
 * read() called before a file has been opened, corrupt file system
 * or an I/O error occurred.
 */
int16_t SdFile::read(void* buf, uint16_t nbyte) {
    1cd6:	e2 1b       	sub	r30, r18
    1cd8:	f3 0b       	sbc	r31, r19
    } else {
      // read block to cache and copy data to caller
      if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_READ)) return -1;
      uint8_t* src = SdVolume::cacheBuffer_.data + offset;
      uint8_t* end = src + n;
      while (src != end) *dst++ = *src++;
    1cda:	ae 0e       	add	r10, r30
    1cdc:	bf 1e       	adc	r11, r31
    }
    curPosition_ += n;
    1cde:	a6 01       	movw	r20, r12
    1ce0:	60 e0       	ldi	r22, 0x00	; 0
    1ce2:	70 e0       	ldi	r23, 0x00	; 0
    1ce4:	eb 81       	ldd	r30, Y+3	; 0x03
    1ce6:	fc 81       	ldd	r31, Y+4	; 0x04
    1ce8:	82 85       	ldd	r24, Z+10	; 0x0a
    1cea:	93 85       	ldd	r25, Z+11	; 0x0b
    1cec:	a4 85       	ldd	r26, Z+12	; 0x0c
    1cee:	b5 85       	ldd	r27, Z+13	; 0x0d
    1cf0:	84 0f       	add	r24, r20
    1cf2:	95 1f       	adc	r25, r21
    1cf4:	a6 1f       	adc	r26, r22
    1cf6:	b7 1f       	adc	r27, r23
    1cf8:	82 87       	std	Z+10, r24	; 0x0a
    1cfa:	93 87       	std	Z+11, r25	; 0x0b
    1cfc:	a4 87       	std	Z+12, r26	; 0x0c
    1cfe:	b5 87       	std	Z+13, r27	; 0x0d
    toRead -= n;
    1d00:	6c 18       	sub	r6, r12
    1d02:	7d 08       	sbc	r7, r13
  // max bytes left in file
  if (nbyte > (fileSize_ - curPosition_)) nbyte = fileSize_ - curPosition_;

  // amount left to read
  uint16_t toRead = nbyte;
  while (toRead > 0) {
    1d04:	61 14       	cp	r6, r1
    1d06:	71 04       	cpc	r7, r1
    1d08:	09 f0       	breq	.+2      	; 0x1d0c <_ZN6SdFile4readEPvj+0x20a>
    1d0a:	32 cf       	rjmp	.-412    	; 0x1b70 <_ZN6SdFile4readEPvj+0x6e>
      while (src != end) *dst++ = *src++;
    }
    curPosition_ += n;
    toRead -= n;
  }
  return nbyte;
    1d0c:	c2 01       	movw	r24, r4
    1d0e:	02 c0       	rjmp	.+4      	; 0x1d14 <_ZN6SdFile4readEPvj+0x212>
      block != SdVolume::cacheBlockNumber_) {
      if (!vol_->readData(block, offset, n, dst)) return -1;
      dst += n;
    } else {
      // read block to cache and copy data to caller
      if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_READ)) return -1;
    1d10:	8f ef       	ldi	r24, 0xFF	; 255
    1d12:	9f ef       	ldi	r25, 0xFF	; 255
    }
    curPosition_ += n;
    toRead -= n;
  }
  return nbyte;
}
    1d14:	26 96       	adiw	r28, 0x06	; 6
    1d16:	0f b6       	in	r0, 0x3f	; 63
    1d18:	f8 94       	cli
    1d1a:	de bf       	out	0x3e, r29	; 62
    1d1c:	0f be       	out	0x3f, r0	; 63
    1d1e:	cd bf       	out	0x3d, r28	; 61
    1d20:	df 91       	pop	r29
    1d22:	cf 91       	pop	r28
    1d24:	1f 91       	pop	r17
    1d26:	0f 91       	pop	r16
    1d28:	ff 90       	pop	r15
    1d2a:	ef 90       	pop	r14
    1d2c:	df 90       	pop	r13
    1d2e:	cf 90       	pop	r12
    1d30:	bf 90       	pop	r11
    1d32:	af 90       	pop	r10
    1d34:	9f 90       	pop	r9
    1d36:	8f 90       	pop	r8
    1d38:	7f 90       	pop	r7
    1d3a:	6f 90       	pop	r6
    1d3c:	5f 90       	pop	r5
    1d3e:	4f 90       	pop	r4
    1d40:	3f 90       	pop	r3
    1d42:	2f 90       	pop	r2
    1d44:	08 95       	ret

  // error if not open or write only
  if (!isOpen() || !(flags_ & O_READ)) return -1;

  // max bytes left in file
  if (nbyte > (fileSize_ - curPosition_)) nbyte = fileSize_ - curPosition_;
    1d46:	ab 81       	ldd	r26, Y+3	; 0x03
    1d48:	bc 81       	ldd	r27, Y+4	; 0x04
    1d4a:	53 96       	adiw	r26, 0x13	; 19
    1d4c:	4d 91       	ld	r20, X+
    1d4e:	5d 91       	ld	r21, X+
    1d50:	6d 91       	ld	r22, X+
    1d52:	7c 91       	ld	r23, X
    1d54:	56 97       	sbiw	r26, 0x16	; 22
    1d56:	1a 96       	adiw	r26, 0x0a	; 10
    1d58:	8d 91       	ld	r24, X+
    1d5a:	9d 91       	ld	r25, X+
    1d5c:	0d 90       	ld	r0, X+
    1d5e:	bc 91       	ld	r27, X
    1d60:	a0 2d       	mov	r26, r0
    1d62:	82 01       	movw	r16, r4
    1d64:	20 e0       	ldi	r18, 0x00	; 0
    1d66:	30 e0       	ldi	r19, 0x00	; 0
    1d68:	6a 01       	movw	r12, r20
    1d6a:	7b 01       	movw	r14, r22
    1d6c:	c8 1a       	sub	r12, r24
    1d6e:	d9 0a       	sbc	r13, r25
    1d70:	ea 0a       	sbc	r14, r26
    1d72:	fb 0a       	sbc	r15, r27
    1d74:	c0 16       	cp	r12, r16
    1d76:	d1 06       	cpc	r13, r17
    1d78:	e2 06       	cpc	r14, r18
    1d7a:	f3 06       	cpc	r15, r19
    1d7c:	08 f4       	brcc	.+2      	; 0x1d80 <_ZN6SdFile4readEPvj+0x27e>
    1d7e:	e9 ce       	rjmp	.-558    	; 0x1b52 <_ZN6SdFile4readEPvj+0x50>
    1d80:	eb ce       	rjmp	.-554    	; 0x1b58 <_ZN6SdFile4readEPvj+0x56>
      block != SdVolume::cacheBlockNumber_) {
      if (!vol_->readData(block, offset, n, dst)) return -1;
      dst += n;
    } else {
      // read block to cache and copy data to caller
      if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_READ)) return -1;
    1d82:	cb 01       	movw	r24, r22
    1d84:	ba 01       	movw	r22, r20
    1d86:	40 e0       	ldi	r20, 0x00	; 0
    1d88:	0e 94 2e 14 	call	0x285c	; 0x285c <_ZN8SdVolume13cacheRawBlockEmh>
    1d8c:	88 23       	and	r24, r24
    1d8e:	09 f0       	breq	.+2      	; 0x1d92 <_ZN6SdFile4readEPvj+0x290>
    1d90:	94 cf       	rjmp	.-216    	; 0x1cba <_ZN6SdFile4readEPvj+0x1b8>
    1d92:	be cf       	rjmp	.-132    	; 0x1d10 <_ZN6SdFile4readEPvj+0x20e>

00001d94 <_ZN6SdFile12readDirCacheEv>:
  return n < 0 ? -1 : 0;
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* SdFile::readDirCache(void) {
    1d94:	cf 92       	push	r12
    1d96:	df 92       	push	r13
    1d98:	ef 92       	push	r14
    1d9a:	ff 92       	push	r15
    1d9c:	0f 93       	push	r16
    1d9e:	1f 93       	push	r17
    1da0:	cf 93       	push	r28
    1da2:	df 93       	push	r29
    1da4:	0f 92       	push	r0
    1da6:	cd b7       	in	r28, 0x3d	; 61
    1da8:	de b7       	in	r29, 0x3e	; 62
    1daa:	8c 01       	movw	r16, r24
  // error if not directory
  if (!isDir()) return NULL;
    1dac:	fc 01       	movw	r30, r24
    1dae:	85 81       	ldd	r24, Z+5	; 0x05
    1db0:	82 30       	cpi	r24, 0x02	; 2
    1db2:	78 f0       	brcs	.+30     	; 0x1dd2 <_ZN6SdFile12readDirCacheEv+0x3e>

  // index of entry in cache
  uint8_t i = (curPosition_ >> 5) & 0XF;
    1db4:	c2 84       	ldd	r12, Z+10	; 0x0a
    1db6:	d3 84       	ldd	r13, Z+11	; 0x0b
    1db8:	e4 84       	ldd	r14, Z+12	; 0x0c
    1dba:	f5 84       	ldd	r15, Z+13	; 0x0d
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int16_t read(void) {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    1dbc:	c8 01       	movw	r24, r16
    1dbe:	be 01       	movw	r22, r28
    1dc0:	6f 5f       	subi	r22, 0xFF	; 255
    1dc2:	7f 4f       	sbci	r23, 0xFF	; 255
    1dc4:	41 e0       	ldi	r20, 0x01	; 1
    1dc6:	50 e0       	ldi	r21, 0x00	; 0
    1dc8:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <_ZN6SdFile4readEPvj>
    1dcc:	81 30       	cpi	r24, 0x01	; 1
    1dce:	91 05       	cpc	r25, r1
    1dd0:	61 f0       	breq	.+24     	; 0x1dea <_ZN6SdFile12readDirCacheEv+0x56>
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* SdFile::readDirCache(void) {
  // error if not directory
  if (!isDir()) return NULL;
    1dd2:	80 e0       	ldi	r24, 0x00	; 0
    1dd4:	90 e0       	ldi	r25, 0x00	; 0
  // advance to next entry
  curPosition_ += 31;

  // return pointer to entry
  return (SdVolume::cacheBuffer_.dir + i);
}
    1dd6:	0f 90       	pop	r0
    1dd8:	df 91       	pop	r29
    1dda:	cf 91       	pop	r28
    1ddc:	1f 91       	pop	r17
    1dde:	0f 91       	pop	r16
    1de0:	ff 90       	pop	r15
    1de2:	ef 90       	pop	r14
    1de4:	df 90       	pop	r13
    1de6:	cf 90       	pop	r12
    1de8:	08 95       	ret

  // use read to locate and cache block
  if (read() < 0) return NULL;

  // advance to next entry
  curPosition_ += 31;
    1dea:	f8 01       	movw	r30, r16
    1dec:	82 85       	ldd	r24, Z+10	; 0x0a
    1dee:	93 85       	ldd	r25, Z+11	; 0x0b
    1df0:	a4 85       	ldd	r26, Z+12	; 0x0c
    1df2:	b5 85       	ldd	r27, Z+13	; 0x0d
    1df4:	4f 96       	adiw	r24, 0x1f	; 31
    1df6:	a1 1d       	adc	r26, r1
    1df8:	b1 1d       	adc	r27, r1
    1dfa:	82 87       	std	Z+10, r24	; 0x0a
    1dfc:	93 87       	std	Z+11, r25	; 0x0b
    1dfe:	a4 87       	std	Z+12, r26	; 0x0c
    1e00:	b5 87       	std	Z+13, r27	; 0x0d
dir_t* SdFile::readDirCache(void) {
  // error if not directory
  if (!isDir()) return NULL;

  // index of entry in cache
  uint8_t i = (curPosition_ >> 5) & 0XF;
    1e02:	d7 01       	movw	r26, r14
    1e04:	c6 01       	movw	r24, r12
    1e06:	25 e0       	ldi	r18, 0x05	; 5
    1e08:	b6 95       	lsr	r27
    1e0a:	a7 95       	ror	r26
    1e0c:	97 95       	ror	r25
    1e0e:	87 95       	ror	r24
    1e10:	2a 95       	dec	r18
    1e12:	d1 f7       	brne	.-12     	; 0x1e08 <_ZN6SdFile12readDirCacheEv+0x74>
    1e14:	8f 70       	andi	r24, 0x0F	; 15

  // advance to next entry
  curPosition_ += 31;

  // return pointer to entry
  return (SdVolume::cacheBuffer_.dir + i);
    1e16:	90 e0       	ldi	r25, 0x00	; 0
    1e18:	35 e0       	ldi	r19, 0x05	; 5
    1e1a:	88 0f       	add	r24, r24
    1e1c:	99 1f       	adc	r25, r25
    1e1e:	3a 95       	dec	r19
    1e20:	e1 f7       	brne	.-8      	; 0x1e1a <_ZN6SdFile12readDirCacheEv+0x86>
    1e22:	83 5a       	subi	r24, 0xA3	; 163
    1e24:	9a 4f       	sbci	r25, 0xFA	; 250
    1e26:	d7 cf       	rjmp	.-82     	; 0x1dd6 <_ZN6SdFile12readDirCacheEv+0x42>

00001e28 <_ZN6SdFile7seekSetEm>:
 * \param[in] pos The new position in bytes from the beginning of the file.
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t SdFile::seekSet(uint32_t pos) {
    1e28:	8f 92       	push	r8
    1e2a:	9f 92       	push	r9
    1e2c:	af 92       	push	r10
    1e2e:	bf 92       	push	r11
    1e30:	cf 92       	push	r12
    1e32:	df 92       	push	r13
    1e34:	ef 92       	push	r14
    1e36:	ff 92       	push	r15
    1e38:	0f 93       	push	r16
    1e3a:	1f 93       	push	r17
    1e3c:	cf 93       	push	r28
    1e3e:	df 93       	push	r29
    1e40:	ec 01       	movw	r28, r24
    1e42:	4a 01       	movw	r8, r20
    1e44:	5b 01       	movw	r10, r22
 * Use SdFile::writeError to check for errors.
 */
void SdFile::writeln_P(PGM_P str) {
  write_P(str);
  println();
}
    1e46:	2d 81       	ldd	r18, Y+5	; 0x05
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t SdFile::seekSet(uint32_t pos) {
  // error if file not open or seek past end of file
  if (!isOpen() || pos > fileSize_) return false;
    1e48:	22 23       	and	r18, r18
    1e4a:	09 f4       	brne	.+2      	; 0x1e4e <_ZN6SdFile7seekSetEm+0x26>
    1e4c:	75 c0       	rjmp	.+234    	; 0x1f38 <_ZN6SdFile7seekSetEm+0x110>
    1e4e:	8b 89       	ldd	r24, Y+19	; 0x13
    1e50:	9c 89       	ldd	r25, Y+20	; 0x14
    1e52:	ad 89       	ldd	r26, Y+21	; 0x15
    1e54:	be 89       	ldd	r27, Y+22	; 0x16
    1e56:	84 17       	cp	r24, r20
    1e58:	95 07       	cpc	r25, r21
    1e5a:	a6 07       	cpc	r26, r22
    1e5c:	b7 07       	cpc	r27, r23
    1e5e:	08 f4       	brcc	.+2      	; 0x1e62 <_ZN6SdFile7seekSetEm+0x3a>
    1e60:	6b c0       	rjmp	.+214    	; 0x1f38 <_ZN6SdFile7seekSetEm+0x110>
    1e62:	78 c0       	rjmp	.+240    	; 0x1f54 <_ZN6SdFile7seekSetEm+0x12c>

  if (type_ == FAT_FILE_TYPE_ROOT16) {
    curPosition_ = pos;
    return true;
  }
  if (pos == 0) {
    1e64:	81 14       	cp	r8, r1
    1e66:	91 04       	cpc	r9, r1
    1e68:	a1 04       	cpc	r10, r1
    1e6a:	b1 04       	cpc	r11, r1
    1e6c:	49 f4       	brne	.+18     	; 0x1e80 <_ZN6SdFile7seekSetEm+0x58>
    // set position to start of file
    curCluster_ = 0;
    1e6e:	1e 82       	std	Y+6, r1	; 0x06
    1e70:	1f 82       	std	Y+7, r1	; 0x07
    1e72:	18 86       	std	Y+8, r1	; 0x08
    1e74:	19 86       	std	Y+9, r1	; 0x09
    curPosition_ = 0;
    1e76:	1a 86       	std	Y+10, r1	; 0x0a
    1e78:	1b 86       	std	Y+11, r1	; 0x0b
    1e7a:	1c 86       	std	Y+12, r1	; 0x0c
    1e7c:	1d 86       	std	Y+13, r1	; 0x0d
    1e7e:	5a c0       	rjmp	.+180    	; 0x1f34 <_ZN6SdFile7seekSetEm+0x10c>
    return true;
  }
  // calculate cluster index for cur and new position
  uint32_t nCur = (curPosition_ - 1) >> (vol_->clusterSizeShift_ + 9);
    1e80:	4a 85       	ldd	r20, Y+10	; 0x0a
    1e82:	5b 85       	ldd	r21, Y+11	; 0x0b
    1e84:	6c 85       	ldd	r22, Y+12	; 0x0c
    1e86:	7d 85       	ldd	r23, Y+13	; 0x0d
    1e88:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1e8a:	fc 8d       	ldd	r31, Y+28	; 0x1c
    1e8c:	25 85       	ldd	r18, Z+13	; 0x0d
    1e8e:	30 e0       	ldi	r19, 0x00	; 0
    1e90:	27 5f       	subi	r18, 0xF7	; 247
    1e92:	3f 4f       	sbci	r19, 0xFF	; 255
    1e94:	db 01       	movw	r26, r22
    1e96:	ca 01       	movw	r24, r20
    1e98:	01 97       	sbiw	r24, 0x01	; 1
    1e9a:	a1 09       	sbc	r26, r1
    1e9c:	b1 09       	sbc	r27, r1
    1e9e:	02 2e       	mov	r0, r18
    1ea0:	04 c0       	rjmp	.+8      	; 0x1eaa <_ZN6SdFile7seekSetEm+0x82>
    1ea2:	b6 95       	lsr	r27
    1ea4:	a7 95       	ror	r26
    1ea6:	97 95       	ror	r25
    1ea8:	87 95       	ror	r24
    1eaa:	0a 94       	dec	r0
    1eac:	d2 f7       	brpl	.-12     	; 0x1ea2 <_ZN6SdFile7seekSetEm+0x7a>
  uint32_t nNew = (pos - 1) >> (vol_->clusterSizeShift_ + 9);
    1eae:	75 01       	movw	r14, r10
    1eb0:	64 01       	movw	r12, r8
    1eb2:	08 94       	sec
    1eb4:	c1 08       	sbc	r12, r1
    1eb6:	d1 08       	sbc	r13, r1
    1eb8:	e1 08       	sbc	r14, r1
    1eba:	f1 08       	sbc	r15, r1
    1ebc:	04 c0       	rjmp	.+8      	; 0x1ec6 <_ZN6SdFile7seekSetEm+0x9e>
    1ebe:	f6 94       	lsr	r15
    1ec0:	e7 94       	ror	r14
    1ec2:	d7 94       	ror	r13
    1ec4:	c7 94       	ror	r12
    1ec6:	2a 95       	dec	r18
    1ec8:	d2 f7       	brpl	.-12     	; 0x1ebe <_ZN6SdFile7seekSetEm+0x96>

  if (nNew < nCur || curPosition_ == 0) {
    1eca:	c8 16       	cp	r12, r24
    1ecc:	d9 06       	cpc	r13, r25
    1ece:	ea 06       	cpc	r14, r26
    1ed0:	fb 06       	cpc	r15, r27
    1ed2:	28 f0       	brcs	.+10     	; 0x1ede <_ZN6SdFile7seekSetEm+0xb6>
    1ed4:	41 15       	cp	r20, r1
    1ed6:	51 05       	cpc	r21, r1
    1ed8:	61 05       	cpc	r22, r1
    1eda:	71 05       	cpc	r23, r1
    1edc:	49 f4       	brne	.+18     	; 0x1ef0 <_ZN6SdFile7seekSetEm+0xc8>
    // must follow chain from first cluster
    curCluster_ = firstCluster_;
    1ede:	8f 89       	ldd	r24, Y+23	; 0x17
    1ee0:	98 8d       	ldd	r25, Y+24	; 0x18
    1ee2:	a9 8d       	ldd	r26, Y+25	; 0x19
    1ee4:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1ee6:	8e 83       	std	Y+6, r24	; 0x06
    1ee8:	9f 83       	std	Y+7, r25	; 0x07
    1eea:	a8 87       	std	Y+8, r26	; 0x08
    1eec:	b9 87       	std	Y+9, r27	; 0x09
    1eee:	16 c0       	rjmp	.+44     	; 0x1f1c <_ZN6SdFile7seekSetEm+0xf4>
  } else {
    // advance from curPosition
    nNew -= nCur;
    1ef0:	c8 1a       	sub	r12, r24
    1ef2:	d9 0a       	sbc	r13, r25
    1ef4:	ea 0a       	sbc	r14, r26
    1ef6:	fb 0a       	sbc	r15, r27
    1ef8:	11 c0       	rjmp	.+34     	; 0x1f1c <_ZN6SdFile7seekSetEm+0xf4>
  }
  while (nNew--) {
    if (!vol_->fatGet(curCluster_, &curCluster_)) return false;
    1efa:	4e 81       	ldd	r20, Y+6	; 0x06
    1efc:	5f 81       	ldd	r21, Y+7	; 0x07
    1efe:	68 85       	ldd	r22, Y+8	; 0x08
    1f00:	79 85       	ldd	r23, Y+9	; 0x09
    1f02:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f04:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f06:	98 01       	movw	r18, r16
    1f08:	0e 94 92 14 	call	0x2924	; 0x2924 <_ZNK8SdVolume6fatGetEmPm>
    1f0c:	08 94       	sec
    1f0e:	c1 08       	sbc	r12, r1
    1f10:	d1 08       	sbc	r13, r1
    1f12:	e1 08       	sbc	r14, r1
    1f14:	f1 08       	sbc	r15, r1
    1f16:	88 23       	and	r24, r24
    1f18:	21 f4       	brne	.+8      	; 0x1f22 <_ZN6SdFile7seekSetEm+0xfa>
    1f1a:	0e c0       	rjmp	.+28     	; 0x1f38 <_ZN6SdFile7seekSetEm+0x110>
    1f1c:	8e 01       	movw	r16, r28
    1f1e:	0a 5f       	subi	r16, 0xFA	; 250
    1f20:	1f 4f       	sbci	r17, 0xFF	; 255
    curCluster_ = firstCluster_;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    1f22:	c1 14       	cp	r12, r1
    1f24:	d1 04       	cpc	r13, r1
    1f26:	e1 04       	cpc	r14, r1
    1f28:	f1 04       	cpc	r15, r1
    1f2a:	39 f7       	brne	.-50     	; 0x1efa <_ZN6SdFile7seekSetEm+0xd2>
    if (!vol_->fatGet(curCluster_, &curCluster_)) return false;
  }
  curPosition_ = pos;
    1f2c:	8a 86       	std	Y+10, r8	; 0x0a
    1f2e:	9b 86       	std	Y+11, r9	; 0x0b
    1f30:	ac 86       	std	Y+12, r10	; 0x0c
    1f32:	bd 86       	std	Y+13, r11	; 0x0d
  return true;
    1f34:	81 e0       	ldi	r24, 0x01	; 1
    1f36:	01 c0       	rjmp	.+2      	; 0x1f3a <_ZN6SdFile7seekSetEm+0x112>
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t SdFile::seekSet(uint32_t pos) {
  // error if file not open or seek past end of file
  if (!isOpen() || pos > fileSize_) return false;
    1f38:	80 e0       	ldi	r24, 0x00	; 0
  while (nNew--) {
    if (!vol_->fatGet(curCluster_, &curCluster_)) return false;
  }
  curPosition_ = pos;
  return true;
}
    1f3a:	df 91       	pop	r29
    1f3c:	cf 91       	pop	r28
    1f3e:	1f 91       	pop	r17
    1f40:	0f 91       	pop	r16
    1f42:	ff 90       	pop	r15
    1f44:	ef 90       	pop	r14
    1f46:	df 90       	pop	r13
    1f48:	cf 90       	pop	r12
    1f4a:	bf 90       	pop	r11
    1f4c:	af 90       	pop	r10
    1f4e:	9f 90       	pop	r9
    1f50:	8f 90       	pop	r8
    1f52:	08 95       	ret
 */
uint8_t SdFile::seekSet(uint32_t pos) {
  // error if file not open or seek past end of file
  if (!isOpen() || pos > fileSize_) return false;

  if (type_ == FAT_FILE_TYPE_ROOT16) {
    1f54:	22 30       	cpi	r18, 0x02	; 2
    1f56:	09 f0       	breq	.+2      	; 0x1f5a <_ZN6SdFile7seekSetEm+0x132>
    1f58:	85 cf       	rjmp	.-246    	; 0x1e64 <_ZN6SdFile7seekSetEm+0x3c>
    1f5a:	e8 cf       	rjmp	.-48     	; 0x1f2c <_ZN6SdFile7seekSetEm+0x104>

00001f5c <_ZN6SdFile4syncEv>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
    1f5c:	0f 93       	push	r16
    1f5e:	1f 93       	push	r17
    1f60:	cf 93       	push	r28
    1f62:	df 93       	push	r29
    1f64:	8c 01       	movw	r16, r24
  // only allow open files and directories
  if (!isOpen()) return false;
    1f66:	fc 01       	movw	r30, r24
    1f68:	85 81       	ldd	r24, Z+5	; 0x05
    1f6a:	88 23       	and	r24, r24
    1f6c:	b1 f1       	breq	.+108    	; 0x1fda <_ZN6SdFile4syncEv+0x7e>

  if (flags_ & F_FILE_DIR_DIRTY) {
    1f6e:	84 81       	ldd	r24, Z+4	; 0x04
    1f70:	87 ff       	sbrs	r24, 7
    1f72:	30 c0       	rjmp	.+96     	; 0x1fd4 <_ZN6SdFile4syncEv+0x78>
    dir_t* d = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    1f74:	c8 01       	movw	r24, r16
    1f76:	61 e0       	ldi	r22, 0x01	; 1
    1f78:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <_ZN6SdFile13cacheDirEntryEh>
    1f7c:	ec 01       	movw	r28, r24
    if (!d) return false;
    1f7e:	00 97       	sbiw	r24, 0x00	; 0
    1f80:	61 f1       	breq	.+88     	; 0x1fda <_ZN6SdFile4syncEv+0x7e>

    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;
    1f82:	f8 01       	movw	r30, r16
    1f84:	85 81       	ldd	r24, Z+5	; 0x05
    1f86:	82 30       	cpi	r24, 0x02	; 2
    1f88:	40 f4       	brcc	.+16     	; 0x1f9a <_ZN6SdFile4syncEv+0x3e>
    1f8a:	83 89       	ldd	r24, Z+19	; 0x13
    1f8c:	94 89       	ldd	r25, Z+20	; 0x14
    1f8e:	a5 89       	ldd	r26, Z+21	; 0x15
    1f90:	b6 89       	ldd	r27, Z+22	; 0x16
    1f92:	8c 8f       	std	Y+28, r24	; 0x1c
    1f94:	9d 8f       	std	Y+29, r25	; 0x1d
    1f96:	ae 8f       	std	Y+30, r26	; 0x1e
    1f98:	bf 8f       	std	Y+31, r27	; 0x1f

    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    1f9a:	f8 01       	movw	r30, r16
    1f9c:	87 89       	ldd	r24, Z+23	; 0x17
    1f9e:	90 8d       	ldd	r25, Z+24	; 0x18
    1fa0:	a1 8d       	ldd	r26, Z+25	; 0x19
    1fa2:	b2 8d       	ldd	r27, Z+26	; 0x1a
    1fa4:	9b 8f       	std	Y+27, r25	; 0x1b
    1fa6:	8a 8f       	std	Y+26, r24	; 0x1a
    d->firstClusterHigh = firstCluster_ >> 16;
    1fa8:	bd 8b       	std	Y+21, r27	; 0x15
    1faa:	ac 8b       	std	Y+20, r26	; 0x14

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
    1fac:	e0 91 54 05 	lds	r30, 0x0554
    1fb0:	f0 91 55 05 	lds	r31, 0x0555
    1fb4:	30 97       	sbiw	r30, 0x00	; 0
    1fb6:	51 f0       	breq	.+20     	; 0x1fcc <_ZN6SdFile4syncEv+0x70>
      dateTime_(&d->lastWriteDate, &d->lastWriteTime);
    1fb8:	be 01       	movw	r22, r28
    1fba:	6a 5e       	subi	r22, 0xEA	; 234
    1fbc:	7f 4f       	sbci	r23, 0xFF	; 255
    1fbe:	ce 01       	movw	r24, r28
    1fc0:	48 96       	adiw	r24, 0x18	; 24
    1fc2:	19 95       	eicall
      d->lastAccessDate = d->lastWriteDate;
    1fc4:	88 8d       	ldd	r24, Y+24	; 0x18
    1fc6:	99 8d       	ldd	r25, Y+25	; 0x19
    1fc8:	9b 8b       	std	Y+19, r25	; 0x13
    1fca:	8a 8b       	std	Y+18, r24	; 0x12
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
    1fcc:	f8 01       	movw	r30, r16
    1fce:	84 81       	ldd	r24, Z+4	; 0x04
    1fd0:	8f 77       	andi	r24, 0x7F	; 127
    1fd2:	84 83       	std	Z+4, r24	; 0x04
  }
  return SdVolume::cacheFlush();
    1fd4:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <_ZN8SdVolume10cacheFlushEv>
    1fd8:	01 c0       	rjmp	.+2      	; 0x1fdc <_ZN6SdFile4syncEv+0x80>
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
  // only allow open files and directories
  if (!isOpen()) return false;
    1fda:	80 e0       	ldi	r24, 0x00	; 0
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
  }
  return SdVolume::cacheFlush();
}
    1fdc:	df 91       	pop	r29
    1fde:	cf 91       	pop	r28
    1fe0:	1f 91       	pop	r17
    1fe2:	0f 91       	pop	r16
    1fe4:	08 95       	ret

00001fe6 <_ZN6SdFile5closeEv>:
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include no file is open or an I/O error.
 */
uint8_t SdFile::close(void) {
    1fe6:	cf 93       	push	r28
    1fe8:	df 93       	push	r29
    1fea:	ec 01       	movw	r28, r24
  if (!sync())return false;
    1fec:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <_ZN6SdFile4syncEv>
    1ff0:	88 23       	and	r24, r24
    1ff2:	19 f0       	breq	.+6      	; 0x1ffa <_ZN6SdFile5closeEv+0x14>
  type_ = FAT_FILE_TYPE_CLOSED;
    1ff4:	1d 82       	std	Y+5, r1	; 0x05
  return true;
    1ff6:	81 e0       	ldi	r24, 0x01	; 1
    1ff8:	01 c0       	rjmp	.+2      	; 0x1ffc <_ZN6SdFile5closeEv+0x16>
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include no file is open or an I/O error.
 */
uint8_t SdFile::close(void) {
  if (!sync())return false;
    1ffa:	80 e0       	ldi	r24, 0x00	; 0
  type_ = FAT_FILE_TYPE_CLOSED;
  return true;
}
    1ffc:	df 91       	pop	r29
    1ffe:	cf 91       	pop	r28
    2000:	08 95       	ret

00002002 <_ZN6SdFile8truncateEm>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include file is read only, file is a directory,
 * \a length is greater than the current file size or an I/O error occurs.
 */
uint8_t SdFile::truncate(uint32_t length) {
    2002:	4f 92       	push	r4
    2004:	5f 92       	push	r5
    2006:	6f 92       	push	r6
    2008:	7f 92       	push	r7
    200a:	8f 92       	push	r8
    200c:	9f 92       	push	r9
    200e:	af 92       	push	r10
    2010:	bf 92       	push	r11
    2012:	ef 92       	push	r14
    2014:	ff 92       	push	r15
    2016:	0f 93       	push	r16
    2018:	1f 93       	push	r17
    201a:	cf 93       	push	r28
    201c:	df 93       	push	r29
    201e:	00 d0       	rcall	.+0      	; 0x2020 <_ZN6SdFile8truncateEm+0x1e>
    2020:	0f 92       	push	r0
    2022:	cd b7       	in	r28, 0x3d	; 61
    2024:	de b7       	in	r29, 0x3e	; 62
    2026:	7c 01       	movw	r14, r24
    2028:	4a 01       	movw	r8, r20
    202a:	5b 01       	movw	r10, r22
// error if not a normal file or read-only
  if (!isFile() || !(flags_ & O_WRITE)) return false;
    202c:	dc 01       	movw	r26, r24
    202e:	15 96       	adiw	r26, 0x05	; 5
    2030:	8c 91       	ld	r24, X
    2032:	15 97       	sbiw	r26, 0x05	; 5
    2034:	81 30       	cpi	r24, 0x01	; 1
    2036:	09 f0       	breq	.+2      	; 0x203a <_ZN6SdFile8truncateEm+0x38>
    2038:	91 c0       	rjmp	.+290    	; 0x215c <_ZN6SdFile8truncateEm+0x15a>
    203a:	14 96       	adiw	r26, 0x04	; 4
    203c:	8c 91       	ld	r24, X
    203e:	14 97       	sbiw	r26, 0x04	; 4
    2040:	81 ff       	sbrs	r24, 1
    2042:	8c c0       	rjmp	.+280    	; 0x215c <_ZN6SdFile8truncateEm+0x15a>
    2044:	9f c0       	rjmp	.+318    	; 0x2184 <_ZN6SdFile8truncateEm+0x182>

  // error if length is greater than current size
  if (length > fileSize_) return false;

  // fileSize and length are zero - nothing to do
  if (fileSize_ == 0) return true;
    2046:	00 97       	sbiw	r24, 0x00	; 0
    2048:	a1 05       	cpc	r26, r1
    204a:	b1 05       	cpc	r27, r1
    204c:	09 f4       	brne	.+2      	; 0x2050 <_ZN6SdFile8truncateEm+0x4e>
    204e:	84 c0       	rjmp	.+264    	; 0x2158 <_ZN6SdFile8truncateEm+0x156>

  // remember position for seek after truncation
  uint32_t newPos = curPosition_ > length ? length : curPosition_;
    2050:	f7 01       	movw	r30, r14
    2052:	42 84       	ldd	r4, Z+10	; 0x0a
    2054:	53 84       	ldd	r5, Z+11	; 0x0b
    2056:	64 84       	ldd	r6, Z+12	; 0x0c
    2058:	75 84       	ldd	r7, Z+13	; 0x0d

  // position to last cluster in truncated file
  if (!seekSet(length)) return false;
    205a:	c7 01       	movw	r24, r14
    205c:	b5 01       	movw	r22, r10
    205e:	a4 01       	movw	r20, r8
    2060:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <_ZN6SdFile7seekSetEm>
    2064:	88 23       	and	r24, r24
    2066:	09 f4       	brne	.+2      	; 0x206a <_ZN6SdFile8truncateEm+0x68>
    2068:	79 c0       	rjmp	.+242    	; 0x215c <_ZN6SdFile8truncateEm+0x15a>
    206a:	d7 01       	movw	r26, r14
    206c:	5b 96       	adiw	r26, 0x1b	; 27
    206e:	8d 91       	ld	r24, X+
    2070:	9c 91       	ld	r25, X
    2072:	5c 97       	sbiw	r26, 0x1c	; 28

  if (length == 0) {
    2074:	81 14       	cp	r8, r1
    2076:	91 04       	cpc	r9, r1
    2078:	a1 04       	cpc	r10, r1
    207a:	b1 04       	cpc	r11, r1
    207c:	89 f4       	brne	.+34     	; 0x20a0 <_ZN6SdFile8truncateEm+0x9e>
    // free all clusters
    if (!vol_->freeChain(firstCluster_)) return false;
    207e:	57 96       	adiw	r26, 0x17	; 23
    2080:	4d 91       	ld	r20, X+
    2082:	5d 91       	ld	r21, X+
    2084:	6d 91       	ld	r22, X+
    2086:	7c 91       	ld	r23, X
    2088:	5a 97       	sbiw	r26, 0x1a	; 26
    208a:	0e 94 42 17 	call	0x2e84	; 0x2e84 <_ZN8SdVolume9freeChainEm>
    208e:	88 23       	and	r24, r24
    2090:	09 f4       	brne	.+2      	; 0x2094 <_ZN6SdFile8truncateEm+0x92>
    2092:	64 c0       	rjmp	.+200    	; 0x215c <_ZN6SdFile8truncateEm+0x15a>
    firstCluster_ = 0;
    2094:	f7 01       	movw	r30, r14
    2096:	17 8a       	std	Z+23, r1	; 0x17
    2098:	10 8e       	std	Z+24, r1	; 0x18
    209a:	11 8e       	std	Z+25, r1	; 0x19
    209c:	12 8e       	std	Z+26, r1	; 0x1a
    209e:	3d c0       	rjmp	.+122    	; 0x211a <_ZN6SdFile8truncateEm+0x118>
  } else {
    uint32_t toFree;
    if (!vol_->fatGet(curCluster_, &toFree)) return false;
    20a0:	d7 01       	movw	r26, r14
    20a2:	16 96       	adiw	r26, 0x06	; 6
    20a4:	4d 91       	ld	r20, X+
    20a6:	5d 91       	ld	r21, X+
    20a8:	6d 91       	ld	r22, X+
    20aa:	7c 91       	ld	r23, X
    20ac:	19 97       	sbiw	r26, 0x09	; 9
    20ae:	9e 01       	movw	r18, r28
    20b0:	2f 5f       	subi	r18, 0xFF	; 255
    20b2:	3f 4f       	sbci	r19, 0xFF	; 255
    20b4:	0e 94 92 14 	call	0x2924	; 0x2924 <_ZNK8SdVolume6fatGetEmPm>
    20b8:	88 23       	and	r24, r24
    20ba:	09 f4       	brne	.+2      	; 0x20be <_ZN6SdFile8truncateEm+0xbc>
    20bc:	4f c0       	rjmp	.+158    	; 0x215c <_ZN6SdFile8truncateEm+0x15a>

    if (!vol_->isEOC(toFree)) {
    20be:	d7 01       	movw	r26, r14
    20c0:	5b 96       	adiw	r26, 0x1b	; 27
    20c2:	ed 91       	ld	r30, X+
    20c4:	fc 91       	ld	r31, X
    20c6:	5c 97       	sbiw	r26, 0x1c	; 28
    20c8:	49 81       	ldd	r20, Y+1	; 0x01
    20ca:	5a 81       	ldd	r21, Y+2	; 0x02
    20cc:	6b 81       	ldd	r22, Y+3	; 0x03
    20ce:	7c 81       	ldd	r23, Y+4	; 0x04
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    20d0:	87 89       	ldd	r24, Z+23	; 0x17
    20d2:	80 31       	cpi	r24, 0x10	; 16
    20d4:	29 f4       	brne	.+10     	; 0x20e0 <_ZN6SdFile8truncateEm+0xde>
    20d6:	88 ef       	ldi	r24, 0xF8	; 248
    20d8:	9f ef       	ldi	r25, 0xFF	; 255
    20da:	a0 e0       	ldi	r26, 0x00	; 0
    20dc:	b0 e0       	ldi	r27, 0x00	; 0
    20de:	04 c0       	rjmp	.+8      	; 0x20e8 <_ZN6SdFile8truncateEm+0xe6>
    20e0:	88 ef       	ldi	r24, 0xF8	; 248
    20e2:	9f ef       	ldi	r25, 0xFF	; 255
    20e4:	af ef       	ldi	r26, 0xFF	; 255
    20e6:	bf e0       	ldi	r27, 0x0F	; 15
    20e8:	48 17       	cp	r20, r24
    20ea:	59 07       	cpc	r21, r25
    20ec:	6a 07       	cpc	r22, r26
    20ee:	7b 07       	cpc	r23, r27
    20f0:	a0 f4       	brcc	.+40     	; 0x211a <_ZN6SdFile8truncateEm+0x118>
      // free extra clusters
      if (!vol_->freeChain(toFree)) return false;
    20f2:	cf 01       	movw	r24, r30
    20f4:	0e 94 42 17 	call	0x2e84	; 0x2e84 <_ZN8SdVolume9freeChainEm>
    20f8:	88 23       	and	r24, r24
    20fa:	81 f1       	breq	.+96     	; 0x215c <_ZN6SdFile8truncateEm+0x15a>
  static uint8_t cacheZeroBlock(uint32_t blockNumber);
  uint8_t chainSize(uint32_t beginCluster, uint32_t* size) const;
  uint8_t fatGet(uint32_t cluster, uint32_t* value) const;
  uint8_t fatPut(uint32_t cluster, uint32_t value);
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    20fc:	f7 01       	movw	r30, r14
    20fe:	46 81       	ldd	r20, Z+6	; 0x06
    2100:	57 81       	ldd	r21, Z+7	; 0x07
    2102:	60 85       	ldd	r22, Z+8	; 0x08
    2104:	71 85       	ldd	r23, Z+9	; 0x09
    2106:	83 8d       	ldd	r24, Z+27	; 0x1b
    2108:	94 8d       	ldd	r25, Z+28	; 0x1c
    210a:	0f ef       	ldi	r16, 0xFF	; 255
    210c:	1f ef       	ldi	r17, 0xFF	; 255
    210e:	2f ef       	ldi	r18, 0xFF	; 255
    2110:	3f e0       	ldi	r19, 0x0F	; 15
    2112:	0e 94 83 15 	call	0x2b06	; 0x2b06 <_ZN8SdVolume6fatPutEmm>

      // current cluster is end of chain
      if (!vol_->fatPutEOC(curCluster_)) return false;
    2116:	88 23       	and	r24, r24
    2118:	09 f1       	breq	.+66     	; 0x215c <_ZN6SdFile8truncateEm+0x15a>
    }
  }
  fileSize_ = length;
    211a:	d7 01       	movw	r26, r14
    211c:	53 96       	adiw	r26, 0x13	; 19
    211e:	8d 92       	st	X+, r8
    2120:	9d 92       	st	X+, r9
    2122:	ad 92       	st	X+, r10
    2124:	bc 92       	st	X, r11
    2126:	56 97       	sbiw	r26, 0x16	; 22

  // need to update directory entry
  flags_ |= F_FILE_DIR_DIRTY;
    2128:	14 96       	adiw	r26, 0x04	; 4
    212a:	8c 91       	ld	r24, X
    212c:	14 97       	sbiw	r26, 0x04	; 4
    212e:	80 68       	ori	r24, 0x80	; 128
    2130:	14 96       	adiw	r26, 0x04	; 4
    2132:	8c 93       	st	X, r24

  if (!sync()) return false;
    2134:	c7 01       	movw	r24, r14
    2136:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <_ZN6SdFile4syncEv>
    213a:	88 23       	and	r24, r24
    213c:	79 f0       	breq	.+30     	; 0x215c <_ZN6SdFile8truncateEm+0x15a>

  // set file to correct position
  return seekSet(newPos);
    213e:	b5 01       	movw	r22, r10
    2140:	a4 01       	movw	r20, r8
    2142:	48 14       	cp	r4, r8
    2144:	59 04       	cpc	r5, r9
    2146:	6a 04       	cpc	r6, r10
    2148:	7b 04       	cpc	r7, r11
    214a:	10 f4       	brcc	.+4      	; 0x2150 <_ZN6SdFile8truncateEm+0x14e>
    214c:	b3 01       	movw	r22, r6
    214e:	a2 01       	movw	r20, r4
    2150:	c7 01       	movw	r24, r14
    2152:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <_ZN6SdFile7seekSetEm>
    2156:	03 c0       	rjmp	.+6      	; 0x215e <_ZN6SdFile8truncateEm+0x15c>

  // error if length is greater than current size
  if (length > fileSize_) return false;

  // fileSize and length are zero - nothing to do
  if (fileSize_ == 0) return true;
    2158:	81 e0       	ldi	r24, 0x01	; 1
    215a:	01 c0       	rjmp	.+2      	; 0x215e <_ZN6SdFile8truncateEm+0x15c>
uint8_t SdFile::truncate(uint32_t length) {
// error if not a normal file or read-only
  if (!isFile() || !(flags_ & O_WRITE)) return false;

  // error if length is greater than current size
  if (length > fileSize_) return false;
    215c:	80 e0       	ldi	r24, 0x00	; 0

  if (!sync()) return false;

  // set file to correct position
  return seekSet(newPos);
}
    215e:	0f 90       	pop	r0
    2160:	0f 90       	pop	r0
    2162:	0f 90       	pop	r0
    2164:	0f 90       	pop	r0
    2166:	df 91       	pop	r29
    2168:	cf 91       	pop	r28
    216a:	1f 91       	pop	r17
    216c:	0f 91       	pop	r16
    216e:	ff 90       	pop	r15
    2170:	ef 90       	pop	r14
    2172:	bf 90       	pop	r11
    2174:	af 90       	pop	r10
    2176:	9f 90       	pop	r9
    2178:	8f 90       	pop	r8
    217a:	7f 90       	pop	r7
    217c:	6f 90       	pop	r6
    217e:	5f 90       	pop	r5
    2180:	4f 90       	pop	r4
    2182:	08 95       	ret
uint8_t SdFile::truncate(uint32_t length) {
// error if not a normal file or read-only
  if (!isFile() || !(flags_ & O_WRITE)) return false;

  // error if length is greater than current size
  if (length > fileSize_) return false;
    2184:	f7 01       	movw	r30, r14
    2186:	83 89       	ldd	r24, Z+19	; 0x13
    2188:	94 89       	ldd	r25, Z+20	; 0x14
    218a:	a5 89       	ldd	r26, Z+21	; 0x15
    218c:	b6 89       	ldd	r27, Z+22	; 0x16
    218e:	84 17       	cp	r24, r20
    2190:	95 07       	cpc	r25, r21
    2192:	a6 07       	cpc	r26, r22
    2194:	b7 07       	cpc	r27, r23
    2196:	08 f0       	brcs	.+2      	; 0x219a <_ZN6SdFile8truncateEm+0x198>
    2198:	56 cf       	rjmp	.-340    	; 0x2046 <_ZN6SdFile8truncateEm+0x44>
    219a:	e0 cf       	rjmp	.-64     	; 0x215c <_ZN6SdFile8truncateEm+0x15a>

0000219c <_ZN6SdFile15openCachedEntryEhh>:
  // open cached entry
  return openCachedEntry(index & 0XF, oflag);
}
//------------------------------------------------------------------------------
// open a cached directory entry. Assumes vol_ is initializes
uint8_t SdFile::openCachedEntry(uint8_t dirIndex, uint8_t oflag) {
    219c:	1f 93       	push	r17
    219e:	cf 93       	push	r28
    21a0:	df 93       	push	r29
    21a2:	ec 01       	movw	r28, r24
    21a4:	14 2f       	mov	r17, r20
  // location of entry in cache
  dir_t* p = SdVolume::cacheBuffer_.dir + dirIndex;
    21a6:	e6 2f       	mov	r30, r22
    21a8:	f0 e0       	ldi	r31, 0x00	; 0
    21aa:	35 e0       	ldi	r19, 0x05	; 5
    21ac:	ee 0f       	add	r30, r30
    21ae:	ff 1f       	adc	r31, r31
    21b0:	3a 95       	dec	r19
    21b2:	e1 f7       	brne	.-8      	; 0x21ac <_ZN6SdFile15openCachedEntryEhh+0x10>
    21b4:	e3 5a       	subi	r30, 0xA3	; 163
    21b6:	fa 4f       	sbci	r31, 0xFA	; 250

  // write or truncate is an error for a directory or read-only file
  if (p->attributes & (DIR_ATT_READ_ONLY | DIR_ATT_DIRECTORY)) {
    21b8:	83 85       	ldd	r24, Z+11	; 0x0b
    21ba:	81 71       	andi	r24, 0x11	; 17
    21bc:	21 f0       	breq	.+8      	; 0x21c6 <_ZN6SdFile15openCachedEntryEhh+0x2a>
    if (oflag & (O_WRITE | O_TRUNC)) return false;
    21be:	84 2f       	mov	r24, r20
    21c0:	82 74       	andi	r24, 0x42	; 66
    21c2:	09 f0       	breq	.+2      	; 0x21c6 <_ZN6SdFile15openCachedEntryEhh+0x2a>
    21c4:	52 c0       	rjmp	.+164    	; 0x226a <__stack+0x6b>
  }
  // remember location of directory entry on SD
  dirIndex_ = dirIndex;
    21c6:	6a 8b       	std	Y+18, r22	; 0x12
  dirBlock_ = SdVolume::cacheBlockNumber_;
    21c8:	80 91 ab 04 	lds	r24, 0x04AB
    21cc:	90 91 ac 04 	lds	r25, 0x04AC
    21d0:	a0 91 ad 04 	lds	r26, 0x04AD
    21d4:	b0 91 ae 04 	lds	r27, 0x04AE
    21d8:	8e 87       	std	Y+14, r24	; 0x0e
    21da:	9f 87       	std	Y+15, r25	; 0x0f
    21dc:	a8 8b       	std	Y+16, r26	; 0x10
    21de:	b9 8b       	std	Y+17, r27	; 0x11

  // copy first cluster number for directory fields
  firstCluster_ = (uint32_t)p->firstClusterHigh << 16;
    21e0:	44 89       	ldd	r20, Z+20	; 0x14
    21e2:	55 89       	ldd	r21, Z+21	; 0x15
    21e4:	60 e0       	ldi	r22, 0x00	; 0
    21e6:	70 e0       	ldi	r23, 0x00	; 0
    21e8:	ba 01       	movw	r22, r20
    21ea:	55 27       	eor	r21, r21
    21ec:	44 27       	eor	r20, r20
  firstCluster_ |= p->firstClusterLow;
    21ee:	82 8d       	ldd	r24, Z+26	; 0x1a
    21f0:	93 8d       	ldd	r25, Z+27	; 0x1b
    21f2:	a0 e0       	ldi	r26, 0x00	; 0
    21f4:	b0 e0       	ldi	r27, 0x00	; 0
    21f6:	48 2b       	or	r20, r24
    21f8:	59 2b       	or	r21, r25
    21fa:	6a 2b       	or	r22, r26
    21fc:	7b 2b       	or	r23, r27
    21fe:	4f 8b       	std	Y+23, r20	; 0x17
    2200:	58 8f       	std	Y+24, r21	; 0x18
    2202:	69 8f       	std	Y+25, r22	; 0x19
    2204:	7a 8f       	std	Y+26, r23	; 0x1a
}
/** Mask for file/subdirectory tests */
uint8_t const DIR_ATT_FILE_TYPE_MASK = (DIR_ATT_VOLUME_ID | DIR_ATT_DIRECTORY);
/** Directory entry is for a file */
static inline uint8_t DIR_IS_FILE(const dir_t* dir) {
  return (dir->attributes & DIR_ATT_FILE_TYPE_MASK) == 0;
    2206:	83 85       	ldd	r24, Z+11	; 0x0b
    2208:	90 e0       	ldi	r25, 0x00	; 0
    220a:	88 71       	andi	r24, 0x18	; 24
    220c:	90 70       	andi	r25, 0x00	; 0

  // make sure it is a normal file or subdirectory
  if (DIR_IS_FILE(p)) {
    220e:	00 97       	sbiw	r24, 0x00	; 0
    2210:	51 f4       	brne	.+20     	; 0x2226 <__stack+0x27>
    fileSize_ = p->fileSize;
    2212:	84 8d       	ldd	r24, Z+28	; 0x1c
    2214:	95 8d       	ldd	r25, Z+29	; 0x1d
    2216:	a6 8d       	ldd	r26, Z+30	; 0x1e
    2218:	b7 8d       	ldd	r27, Z+31	; 0x1f
    221a:	8b 8b       	std	Y+19, r24	; 0x13
    221c:	9c 8b       	std	Y+20, r25	; 0x14
    221e:	ad 8b       	std	Y+21, r26	; 0x15
    2220:	be 8b       	std	Y+22, r27	; 0x16
    type_ = FAT_FILE_TYPE_NORMAL;
    2222:	81 e0       	ldi	r24, 0x01	; 1
    2224:	0d c0       	rjmp	.+26     	; 0x2240 <__stack+0x41>
  } else if (DIR_IS_SUBDIR(p)) {
    2226:	80 31       	cpi	r24, 0x10	; 16
    2228:	91 05       	cpc	r25, r1
    222a:	f9 f4       	brne	.+62     	; 0x226a <__stack+0x6b>
    if (!vol_->chainSize(firstCluster_, &fileSize_)) return false;
    222c:	9e 01       	movw	r18, r28
    222e:	2d 5e       	subi	r18, 0xED	; 237
    2230:	3f 4f       	sbci	r19, 0xFF	; 255
    2232:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2234:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2236:	0e 94 18 15 	call	0x2a30	; 0x2a30 <_ZNK8SdVolume9chainSizeEmPm>
    223a:	88 23       	and	r24, r24
    223c:	b1 f0       	breq	.+44     	; 0x226a <__stack+0x6b>
    type_ = FAT_FILE_TYPE_SUBDIR;
    223e:	84 e0       	ldi	r24, 0x04	; 4
    2240:	8d 83       	std	Y+5, r24	; 0x05
  } else {
    return false;
  }
  // save open flags for read/write
  flags_ = oflag & (O_ACCMODE | O_SYNC | O_APPEND);
    2242:	81 2f       	mov	r24, r17
    2244:	8f 70       	andi	r24, 0x0F	; 15
    2246:	8c 83       	std	Y+4, r24	; 0x04

  // set to start of file
  curCluster_ = 0;
    2248:	1e 82       	std	Y+6, r1	; 0x06
    224a:	1f 82       	std	Y+7, r1	; 0x07
    224c:	18 86       	std	Y+8, r1	; 0x08
    224e:	19 86       	std	Y+9, r1	; 0x09
  curPosition_ = 0;
    2250:	1a 86       	std	Y+10, r1	; 0x0a
    2252:	1b 86       	std	Y+11, r1	; 0x0b
    2254:	1c 86       	std	Y+12, r1	; 0x0c
    2256:	1d 86       	std	Y+13, r1	; 0x0d

  // truncate file to zero length if requested
  if (oflag & O_TRUNC) return truncate(0);
    2258:	16 ff       	sbrs	r17, 6
    225a:	09 c0       	rjmp	.+18     	; 0x226e <__stack+0x6f>
    225c:	ce 01       	movw	r24, r28
    225e:	40 e0       	ldi	r20, 0x00	; 0
    2260:	50 e0       	ldi	r21, 0x00	; 0
    2262:	ba 01       	movw	r22, r20
    2264:	0e 94 01 10 	call	0x2002	; 0x2002 <_ZN6SdFile8truncateEm>
    2268:	03 c0       	rjmp	.+6      	; 0x2270 <__stack+0x71>
  // make sure it is a normal file or subdirectory
  if (DIR_IS_FILE(p)) {
    fileSize_ = p->fileSize;
    type_ = FAT_FILE_TYPE_NORMAL;
  } else if (DIR_IS_SUBDIR(p)) {
    if (!vol_->chainSize(firstCluster_, &fileSize_)) return false;
    226a:	80 e0       	ldi	r24, 0x00	; 0
    226c:	01 c0       	rjmp	.+2      	; 0x2270 <__stack+0x71>
  curCluster_ = 0;
  curPosition_ = 0;

  // truncate file to zero length if requested
  if (oflag & O_TRUNC) return truncate(0);
  return true;
    226e:	81 e0       	ldi	r24, 0x01	; 1
}
    2270:	df 91       	pop	r29
    2272:	cf 91       	pop	r28
    2274:	1f 91       	pop	r17
    2276:	08 95       	ret

00002278 <_ZN6SdFile4openEPS_PKch>:
 * the value zero, false, is returned for failure.
 * Reasons for failure include this SdFile is already open, \a difFile is not
 * a directory, \a fileName is invalid, the file does not exist
 * or can't be opened in the access mode specified by oflag.
 */
uint8_t SdFile::open(SdFile* dirFile, const char* fileName, uint8_t oflag) {
    2278:	4f 92       	push	r4
    227a:	5f 92       	push	r5
    227c:	6f 92       	push	r6
    227e:	7f 92       	push	r7
    2280:	8f 92       	push	r8
    2282:	9f 92       	push	r9
    2284:	af 92       	push	r10
    2286:	bf 92       	push	r11
    2288:	cf 92       	push	r12
    228a:	df 92       	push	r13
    228c:	ef 92       	push	r14
    228e:	ff 92       	push	r15
    2290:	0f 93       	push	r16
    2292:	1f 93       	push	r17
    2294:	cf 93       	push	r28
    2296:	df 93       	push	r29
    2298:	cd b7       	in	r28, 0x3d	; 61
    229a:	de b7       	in	r29, 0x3e	; 62
    229c:	2b 97       	sbiw	r28, 0x0b	; 11
    229e:	0f b6       	in	r0, 0x3f	; 63
    22a0:	f8 94       	cli
    22a2:	de bf       	out	0x3e, r29	; 62
    22a4:	0f be       	out	0x3f, r0	; 63
    22a6:	cd bf       	out	0x3d, r28	; 61
    22a8:	3c 01       	movw	r6, r24
    22aa:	5b 01       	movw	r10, r22
    22ac:	ca 01       	movw	r24, r20
    22ae:	82 2e       	mov	r8, r18
  uint8_t dname[11];
  dir_t* p;

  // error if already open
  if (isOpen())return false;
    22b0:	f3 01       	movw	r30, r6
    22b2:	25 81       	ldd	r18, Z+5	; 0x05
    22b4:	22 23       	and	r18, r18
    22b6:	09 f0       	breq	.+2      	; 0x22ba <_ZN6SdFile4openEPS_PKch+0x42>
    22b8:	bd c0       	rjmp	.+378    	; 0x2434 <_ZN6SdFile4openEPS_PKch+0x1bc>

  if (!make83Name(fileName, dname)) return false;
    22ba:	8e 01       	movw	r16, r28
    22bc:	0f 5f       	subi	r16, 0xFF	; 255
    22be:	1f 4f       	sbci	r17, 0xFF	; 255
    22c0:	b8 01       	movw	r22, r16
    22c2:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <_ZN6SdFile10make83NameEPKcPh>
    22c6:	88 23       	and	r24, r24
    22c8:	09 f4       	brne	.+2      	; 0x22cc <_ZN6SdFile4openEPS_PKch+0x54>
    22ca:	b4 c0       	rjmp	.+360    	; 0x2434 <_ZN6SdFile4openEPS_PKch+0x1bc>
  vol_ = dirFile->vol_;
    22cc:	f5 01       	movw	r30, r10
    22ce:	83 8d       	ldd	r24, Z+27	; 0x1b
    22d0:	94 8d       	ldd	r25, Z+28	; 0x1c
    22d2:	f3 01       	movw	r30, r6
    22d4:	94 8f       	std	Z+28, r25	; 0x1c
    22d6:	83 8f       	std	Z+27, r24	; 0x1b
  int8_t readDir(dir_t* dir);
  static uint8_t remove(SdFile* dirFile, const char* fileName);
  uint8_t remove(void);
  /** Set the file's current position to zero. */
  void rewind(void) {
    curPosition_ = curCluster_ = 0;
    22d8:	f5 01       	movw	r30, r10
    22da:	16 82       	std	Z+6, r1	; 0x06
    22dc:	17 82       	std	Z+7, r1	; 0x07
    22de:	10 86       	std	Z+8, r1	; 0x08
    22e0:	11 86       	std	Z+9, r1	; 0x09
    22e2:	12 86       	std	Z+10, r1	; 0x0a
    22e4:	13 86       	std	Z+11, r1	; 0x0b
    22e6:	14 86       	std	Z+12, r1	; 0x0c
    22e8:	15 86       	std	Z+13, r1	; 0x0d
  dirFile->rewind();

  // bool for empty entry found
  uint8_t emptyFound = false;
    22ea:	99 24       	eor	r9, r9
        dirIndex_ = index;
        dirBlock_ = SdVolume::cacheBlockNumber_;
      }
      // done if no entries follow
      if (p->name[0] == DIR_NAME_FREE) break;
    } else if (!memcmp(dname, p->name, 11)) {
    22ec:	28 01       	movw	r4, r16
    22ee:	3d c0       	rjmp	.+122    	; 0x236a <_ZN6SdFile4openEPS_PKch+0xf2>
  uint8_t emptyFound = false;

  // search for file
  while (dirFile->curPosition_ < dirFile->fileSize_) {
    uint8_t index = 0XF & (dirFile->curPosition_ >> 5);
    p = dirFile->readDirCache();
    22f0:	c5 01       	movw	r24, r10
    22f2:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <_ZN6SdFile12readDirCacheEv>
    22f6:	bc 01       	movw	r22, r24
    if (p == NULL) return false;
    22f8:	00 97       	sbiw	r24, 0x00	; 0
    22fa:	09 f4       	brne	.+2      	; 0x22fe <_ZN6SdFile4openEPS_PKch+0x86>
    22fc:	9b c0       	rjmp	.+310    	; 0x2434 <_ZN6SdFile4openEPS_PKch+0x1bc>
  // bool for empty entry found
  uint8_t emptyFound = false;

  // search for file
  while (dirFile->curPosition_ < dirFile->fileSize_) {
    uint8_t index = 0XF & (dirFile->curPosition_ >> 5);
    22fe:	97 01       	movw	r18, r14
    2300:	86 01       	movw	r16, r12
    2302:	e5 e0       	ldi	r30, 0x05	; 5
    2304:	36 95       	lsr	r19
    2306:	27 95       	ror	r18
    2308:	17 95       	ror	r17
    230a:	07 95       	ror	r16
    230c:	ea 95       	dec	r30
    230e:	d1 f7       	brne	.-12     	; 0x2304 <_ZN6SdFile4openEPS_PKch+0x8c>
    2310:	0f 70       	andi	r16, 0x0F	; 15
    p = dirFile->readDirCache();
    if (p == NULL) return false;

    if (p->name[0] == DIR_NAME_FREE || p->name[0] == DIR_NAME_DELETED) {
    2312:	fc 01       	movw	r30, r24
    2314:	80 81       	ld	r24, Z
    2316:	88 23       	and	r24, r24
    2318:	11 f0       	breq	.+4      	; 0x231e <_ZN6SdFile4openEPS_PKch+0xa6>
    231a:	85 3e       	cpi	r24, 0xE5	; 229
    231c:	b9 f4       	brne	.+46     	; 0x234c <_ZN6SdFile4openEPS_PKch+0xd4>
      // remember first empty slot
      if (!emptyFound) {
    231e:	99 20       	and	r9, r9
    2320:	81 f4       	brne	.+32     	; 0x2342 <_ZN6SdFile4openEPS_PKch+0xca>
        emptyFound = true;
        dirIndex_ = index;
    2322:	f3 01       	movw	r30, r6
    2324:	02 8b       	std	Z+18, r16	; 0x12
        dirBlock_ = SdVolume::cacheBlockNumber_;
    2326:	80 91 ab 04 	lds	r24, 0x04AB
    232a:	90 91 ac 04 	lds	r25, 0x04AC
    232e:	a0 91 ad 04 	lds	r26, 0x04AD
    2332:	b0 91 ae 04 	lds	r27, 0x04AE
    2336:	86 87       	std	Z+14, r24	; 0x0e
    2338:	97 87       	std	Z+15, r25	; 0x0f
    233a:	a0 8b       	std	Z+16, r26	; 0x10
    233c:	b1 8b       	std	Z+17, r27	; 0x11
    if (p == NULL) return false;

    if (p->name[0] == DIR_NAME_FREE || p->name[0] == DIR_NAME_DELETED) {
      // remember first empty slot
      if (!emptyFound) {
        emptyFound = true;
    233e:	99 24       	eor	r9, r9
    2340:	93 94       	inc	r9
        dirIndex_ = index;
        dirBlock_ = SdVolume::cacheBlockNumber_;
      }
      // done if no entries follow
      if (p->name[0] == DIR_NAME_FREE) break;
    2342:	fb 01       	movw	r30, r22
    2344:	80 81       	ld	r24, Z
    2346:	88 23       	and	r24, r24
    2348:	81 f4       	brne	.+32     	; 0x236a <_ZN6SdFile4openEPS_PKch+0xf2>
    234a:	1e c0       	rjmp	.+60     	; 0x2388 <_ZN6SdFile4openEPS_PKch+0x110>
    } else if (!memcmp(dname, p->name, 11)) {
    234c:	c2 01       	movw	r24, r4
    234e:	4b e0       	ldi	r20, 0x0B	; 11
    2350:	50 e0       	ldi	r21, 0x00	; 0
    2352:	0e 94 41 22 	call	0x4482	; 0x4482 <memcmp>
    2356:	00 97       	sbiw	r24, 0x00	; 0
    2358:	41 f4       	brne	.+16     	; 0x236a <_ZN6SdFile4openEPS_PKch+0xf2>
      // don't open existing file if O_CREAT and O_EXCL
      if ((oflag & (O_CREAT | O_EXCL)) == (O_CREAT | O_EXCL)) return false;
    235a:	88 2d       	mov	r24, r8
    235c:	80 73       	andi	r24, 0x30	; 48
    235e:	80 33       	cpi	r24, 0x30	; 48
    2360:	09 f4       	brne	.+2      	; 0x2364 <_ZN6SdFile4openEPS_PKch+0xec>
    2362:	68 c0       	rjmp	.+208    	; 0x2434 <_ZN6SdFile4openEPS_PKch+0x1bc>

      // open found file
      return openCachedEntry(0XF & index, oflag);
    2364:	c3 01       	movw	r24, r6
    2366:	60 2f       	mov	r22, r16
    2368:	61 c0       	rjmp	.+194    	; 0x242c <_ZN6SdFile4openEPS_PKch+0x1b4>

  // bool for empty entry found
  uint8_t emptyFound = false;

  // search for file
  while (dirFile->curPosition_ < dirFile->fileSize_) {
    236a:	f5 01       	movw	r30, r10
    236c:	c2 84       	ldd	r12, Z+10	; 0x0a
    236e:	d3 84       	ldd	r13, Z+11	; 0x0b
    2370:	e4 84       	ldd	r14, Z+12	; 0x0c
    2372:	f5 84       	ldd	r15, Z+13	; 0x0d
    2374:	83 89       	ldd	r24, Z+19	; 0x13
    2376:	94 89       	ldd	r25, Z+20	; 0x14
    2378:	a5 89       	ldd	r26, Z+21	; 0x15
    237a:	b6 89       	ldd	r27, Z+22	; 0x16
    237c:	c8 16       	cp	r12, r24
    237e:	d9 06       	cpc	r13, r25
    2380:	ea 06       	cpc	r14, r26
    2382:	fb 06       	cpc	r15, r27
    2384:	08 f4       	brcc	.+2      	; 0x2388 <_ZN6SdFile4openEPS_PKch+0x110>
    2386:	b4 cf       	rjmp	.-152    	; 0x22f0 <_ZN6SdFile4openEPS_PKch+0x78>
      // open found file
      return openCachedEntry(0XF & index, oflag);
    }
  }
  // only create file if O_CREAT and O_WRITE
  if ((oflag & (O_CREAT | O_WRITE)) != (O_CREAT | O_WRITE)) return false;
    2388:	88 2d       	mov	r24, r8
    238a:	82 71       	andi	r24, 0x12	; 18
    238c:	82 31       	cpi	r24, 0x12	; 18
    238e:	09 f0       	breq	.+2      	; 0x2392 <_ZN6SdFile4openEPS_PKch+0x11a>
    2390:	51 c0       	rjmp	.+162    	; 0x2434 <_ZN6SdFile4openEPS_PKch+0x1bc>

  // cache found slot or add cluster if end of file
  if (emptyFound) {
    2392:	99 20       	and	r9, r9
    2394:	41 f0       	breq	.+16     	; 0x23a6 <_ZN6SdFile4openEPS_PKch+0x12e>
    p = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    2396:	c3 01       	movw	r24, r6
    2398:	61 e0       	ldi	r22, 0x01	; 1
    239a:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <_ZN6SdFile13cacheDirEntryEh>
    239e:	8c 01       	movw	r16, r24
    if (!p) return false;
    23a0:	00 97       	sbiw	r24, 0x00	; 0
    23a2:	79 f4       	brne	.+30     	; 0x23c2 <_ZN6SdFile4openEPS_PKch+0x14a>
    23a4:	47 c0       	rjmp	.+142    	; 0x2434 <_ZN6SdFile4openEPS_PKch+0x1bc>
  } else {
    if (dirFile->type_ == FAT_FILE_TYPE_ROOT16) return false;
    23a6:	f5 01       	movw	r30, r10
    23a8:	85 81       	ldd	r24, Z+5	; 0x05
    23aa:	82 30       	cpi	r24, 0x02	; 2
    23ac:	09 f4       	brne	.+2      	; 0x23b0 <_ZN6SdFile4openEPS_PKch+0x138>
    23ae:	42 c0       	rjmp	.+132    	; 0x2434 <_ZN6SdFile4openEPS_PKch+0x1bc>

    // add and zero cluster for dirFile - first cluster is in cache for write
    if (!dirFile->addDirCluster()) return false;
    23b0:	c5 01       	movw	r24, r10
    23b2:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <_ZN6SdFile13addDirClusterEv>
    23b6:	88 23       	and	r24, r24
    23b8:	e9 f1       	breq	.+122    	; 0x2434 <_ZN6SdFile4openEPS_PKch+0x1bc>

    // use first entry in cluster
    dirIndex_ = 0;
    23ba:	f3 01       	movw	r30, r6
    23bc:	12 8a       	std	Z+18, r1	; 0x12
    p = SdVolume::cacheBuffer_.dir;
    23be:	0d e5       	ldi	r16, 0x5D	; 93
    23c0:	15 e0       	ldi	r17, 0x05	; 5
  }
  // initialize as empty file
  memset(p, 0, sizeof(dir_t));
    23c2:	80 e2       	ldi	r24, 0x20	; 32
    23c4:	f8 01       	movw	r30, r16
    23c6:	11 92       	st	Z+, r1
    23c8:	8a 95       	dec	r24
    23ca:	e9 f7       	brne	.-6      	; 0x23c6 <_ZN6SdFile4openEPS_PKch+0x14e>
  memcpy(p->name, dname, 11);
    23cc:	d8 01       	movw	r26, r16
    23ce:	fe 01       	movw	r30, r28
    23d0:	31 96       	adiw	r30, 0x01	; 1
    23d2:	8b e0       	ldi	r24, 0x0B	; 11
    23d4:	01 90       	ld	r0, Z+
    23d6:	0d 92       	st	X+, r0
    23d8:	81 50       	subi	r24, 0x01	; 1
    23da:	e1 f7       	brne	.-8      	; 0x23d4 <_ZN6SdFile4openEPS_PKch+0x15c>

  // set timestamps
  if (dateTime_) {
    23dc:	e0 91 54 05 	lds	r30, 0x0554
    23e0:	f0 91 55 05 	lds	r31, 0x0555
    23e4:	30 97       	sbiw	r30, 0x00	; 0
    23e6:	39 f0       	breq	.+14     	; 0x23f6 <_ZN6SdFile4openEPS_PKch+0x17e>
    // call user function
    dateTime_(&p->creationDate, &p->creationTime);
    23e8:	b8 01       	movw	r22, r16
    23ea:	62 5f       	subi	r22, 0xF2	; 242
    23ec:	7f 4f       	sbci	r23, 0xFF	; 255
    23ee:	c8 01       	movw	r24, r16
    23f0:	40 96       	adiw	r24, 0x10	; 16
    23f2:	19 95       	eicall
    23f4:	09 c0       	rjmp	.+18     	; 0x2408 <_ZN6SdFile4openEPS_PKch+0x190>
  } else {
    // use default date/time
    p->creationDate = FAT_DEFAULT_DATE;
    23f6:	81 e2       	ldi	r24, 0x21	; 33
    23f8:	98 e2       	ldi	r25, 0x28	; 40
    23fa:	f8 01       	movw	r30, r16
    23fc:	91 8b       	std	Z+17, r25	; 0x11
    23fe:	80 8b       	std	Z+16, r24	; 0x10
    p->creationTime = FAT_DEFAULT_TIME;
    2400:	80 e0       	ldi	r24, 0x00	; 0
    2402:	98 e0       	ldi	r25, 0x08	; 8
    2404:	97 87       	std	Z+15, r25	; 0x0f
    2406:	86 87       	std	Z+14, r24	; 0x0e
  }
  p->lastAccessDate = p->creationDate;
    2408:	f8 01       	movw	r30, r16
    240a:	80 89       	ldd	r24, Z+16	; 0x10
    240c:	91 89       	ldd	r25, Z+17	; 0x11
    240e:	93 8b       	std	Z+19, r25	; 0x13
    2410:	82 8b       	std	Z+18, r24	; 0x12
  p->lastWriteDate = p->creationDate;
    2412:	91 8f       	std	Z+25, r25	; 0x19
    2414:	80 8f       	std	Z+24, r24	; 0x18
  p->lastWriteTime = p->creationTime;
    2416:	86 85       	ldd	r24, Z+14	; 0x0e
    2418:	97 85       	ldd	r25, Z+15	; 0x0f
    241a:	97 8b       	std	Z+23, r25	; 0x17
    241c:	86 8b       	std	Z+22, r24	; 0x16

  // force write of entry to SD
  if (!SdVolume::cacheFlush()) return false;
    241e:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <_ZN8SdVolume10cacheFlushEv>
    2422:	88 23       	and	r24, r24
    2424:	39 f0       	breq	.+14     	; 0x2434 <_ZN6SdFile4openEPS_PKch+0x1bc>

  // open entry in cache
  return openCachedEntry(dirIndex_, oflag);
    2426:	c3 01       	movw	r24, r6
    2428:	f3 01       	movw	r30, r6
    242a:	62 89       	ldd	r22, Z+18	; 0x12
    242c:	48 2d       	mov	r20, r8
    242e:	0e 94 ce 10 	call	0x219c	; 0x219c <_ZN6SdFile15openCachedEntryEhh>
    2432:	01 c0       	rjmp	.+2      	; 0x2436 <_ZN6SdFile4openEPS_PKch+0x1be>
uint8_t SdFile::open(SdFile* dirFile, const char* fileName, uint8_t oflag) {
  uint8_t dname[11];
  dir_t* p;

  // error if already open
  if (isOpen())return false;
    2434:	80 e0       	ldi	r24, 0x00	; 0
  // force write of entry to SD
  if (!SdVolume::cacheFlush()) return false;

  // open entry in cache
  return openCachedEntry(dirIndex_, oflag);
}
    2436:	2b 96       	adiw	r28, 0x0b	; 11
    2438:	0f b6       	in	r0, 0x3f	; 63
    243a:	f8 94       	cli
    243c:	de bf       	out	0x3e, r29	; 62
    243e:	0f be       	out	0x3f, r0	; 63
    2440:	cd bf       	out	0x3d, r28	; 61
    2442:	df 91       	pop	r29
    2444:	cf 91       	pop	r28
    2446:	1f 91       	pop	r17
    2448:	0f 91       	pop	r16
    244a:	ff 90       	pop	r15
    244c:	ef 90       	pop	r14
    244e:	df 90       	pop	r13
    2450:	cf 90       	pop	r12
    2452:	bf 90       	pop	r11
    2454:	af 90       	pop	r10
    2456:	9f 90       	pop	r9
    2458:	8f 90       	pop	r8
    245a:	7f 90       	pop	r7
    245c:	6f 90       	pop	r6
    245e:	5f 90       	pop	r5
    2460:	4f 90       	pop	r4
    2462:	08 95       	ret

00002464 <_ZN6SdFile5writeEPKvj>:
 * \a nbyte.  If an error occurs, write() returns -1.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, uint16_t nbyte) {
    2464:	2f 92       	push	r2
    2466:	3f 92       	push	r3
    2468:	4f 92       	push	r4
    246a:	5f 92       	push	r5
    246c:	6f 92       	push	r6
    246e:	7f 92       	push	r7
    2470:	8f 92       	push	r8
    2472:	9f 92       	push	r9
    2474:	bf 92       	push	r11
    2476:	cf 92       	push	r12
    2478:	df 92       	push	r13
    247a:	ef 92       	push	r14
    247c:	ff 92       	push	r15
    247e:	0f 93       	push	r16
    2480:	1f 93       	push	r17
    2482:	cf 93       	push	r28
    2484:	df 93       	push	r29
    2486:	00 d0       	rcall	.+0      	; 0x2488 <_ZN6SdFile5writeEPKvj+0x24>
    2488:	00 d0       	rcall	.+0      	; 0x248a <_ZN6SdFile5writeEPKvj+0x26>
    248a:	cd b7       	in	r28, 0x3d	; 61
    248c:	de b7       	in	r29, 0x3e	; 62
    248e:	8c 01       	movw	r16, r24
    2490:	b6 2e       	mov	r11, r22
    2492:	c7 2e       	mov	r12, r23
    2494:	5e 83       	std	Y+6, r21	; 0x06
    2496:	4d 83       	std	Y+5, r20	; 0x05

  // number of bytes left to write  -  must be before goto statements
  uint16_t nToWrite = nbyte;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    2498:	dc 01       	movw	r26, r24
    249a:	15 96       	adiw	r26, 0x05	; 5
    249c:	8c 91       	ld	r24, X
    249e:	15 97       	sbiw	r26, 0x05	; 5
    24a0:	81 30       	cpi	r24, 0x01	; 1
    24a2:	09 f0       	breq	.+2      	; 0x24a6 <_ZN6SdFile5writeEPKvj+0x42>
    24a4:	66 c1       	rjmp	.+716    	; 0x2772 <_ZN6SdFile5writeEPKvj+0x30e>
    24a6:	14 96       	adiw	r26, 0x04	; 4
    24a8:	8c 91       	ld	r24, X
    24aa:	14 97       	sbiw	r26, 0x04	; 4
    24ac:	81 ff       	sbrs	r24, 1
    24ae:	61 c1       	rjmp	.+706    	; 0x2772 <_ZN6SdFile5writeEPKvj+0x30e>
    24b0:	83 c1       	rjmp	.+774    	; 0x27b8 <_ZN6SdFile5writeEPKvj+0x354>

  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    24b2:	f8 01       	movw	r30, r16
    24b4:	43 89       	ldd	r20, Z+19	; 0x13
    24b6:	54 89       	ldd	r21, Z+20	; 0x14
    24b8:	65 89       	ldd	r22, Z+21	; 0x15
    24ba:	76 89       	ldd	r23, Z+22	; 0x16
    24bc:	82 85       	ldd	r24, Z+10	; 0x0a
    24be:	93 85       	ldd	r25, Z+11	; 0x0b
    24c0:	a4 85       	ldd	r26, Z+12	; 0x0c
    24c2:	b5 85       	ldd	r27, Z+13	; 0x0d
    24c4:	84 17       	cp	r24, r20
    24c6:	95 07       	cpc	r25, r21
    24c8:	a6 07       	cpc	r26, r22
    24ca:	b7 07       	cpc	r27, r23
    24cc:	31 f0       	breq	.+12     	; 0x24da <_ZN6SdFile5writeEPKvj+0x76>
  }
  /**
   *  Set the files current position to end of file.  Useful to position
   *  a file for append. See seekSet().
   */
  uint8_t seekEnd(void) {return seekSet(fileSize_);}
    24ce:	c8 01       	movw	r24, r16
    24d0:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <_ZN6SdFile7seekSetEm>
    if (!seekEnd()) goto writeErrorReturn;
    24d4:	88 23       	and	r24, r24
    24d6:	09 f4       	brne	.+2      	; 0x24da <_ZN6SdFile5writeEPKvj+0x76>
    24d8:	4c c1       	rjmp	.+664    	; 0x2772 <_ZN6SdFile5writeEPKvj+0x30e>
        // rewrite part of block
        if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) {
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
    24da:	2d 80       	ldd	r2, Y+5	; 0x05
    24dc:	3e 80       	ldd	r3, Y+6	; 0x06
    24de:	4b 2c       	mov	r4, r11
    24e0:	5c 2c       	mov	r5, r12
    24e2:	17 c1       	rjmp	.+558    	; 0x2712 <_ZN6SdFile5writeEPKvj+0x2ae>
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    24e4:	f8 01       	movw	r30, r16
    24e6:	23 8d       	ldd	r18, Z+27	; 0x1b
    24e8:	34 8d       	ldd	r19, Z+28	; 0x1c
  uint16_t rootDirEntryCount_;  // number of entries in FAT16 root dir
  uint32_t rootDirStart_;       // root start block for FAT16, cluster for FAT32
  //----------------------------------------------------------------------------
  uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
          return (position >> 9) & (blocksPerCluster_ - 1);}
    24ea:	f9 01       	movw	r30, r18
    24ec:	b4 80       	ldd	r11, Z+4	; 0x04
    24ee:	ba 94       	dec	r11
    24f0:	ac 01       	movw	r20, r24
    24f2:	bd 01       	movw	r22, r26
    24f4:	03 2e       	mov	r0, r19
    24f6:	39 e0       	ldi	r19, 0x09	; 9
    24f8:	76 95       	lsr	r23
    24fa:	67 95       	ror	r22
    24fc:	57 95       	ror	r21
    24fe:	47 95       	ror	r20
    2500:	3a 95       	dec	r19
    2502:	d1 f7       	brne	.-12     	; 0x24f8 <_ZN6SdFile5writeEPKvj+0x94>
    2504:	30 2d       	mov	r19, r0
    2506:	b4 22       	and	r11, r20
    uint16_t blockOffset = curPosition_ & 0X1FF;
    2508:	4f ef       	ldi	r20, 0xFF	; 255
    250a:	64 2e       	mov	r6, r20
    250c:	41 e0       	ldi	r20, 0x01	; 1
    250e:	74 2e       	mov	r7, r20
    2510:	68 22       	and	r6, r24
    2512:	79 22       	and	r7, r25
    if (blockOfCluster == 0 && blockOffset == 0) {
    2514:	bb 20       	and	r11, r11
    2516:	09 f0       	breq	.+2      	; 0x251a <_ZN6SdFile5writeEPKvj+0xb6>
    2518:	4e c0       	rjmp	.+156    	; 0x25b6 <_ZN6SdFile5writeEPKvj+0x152>
    251a:	61 14       	cp	r6, r1
    251c:	71 04       	cpc	r7, r1
    251e:	09 f0       	breq	.+2      	; 0x2522 <_ZN6SdFile5writeEPKvj+0xbe>
    2520:	4a c0       	rjmp	.+148    	; 0x25b6 <_ZN6SdFile5writeEPKvj+0x152>
      // start of new cluster
      if (curCluster_ == 0) {
    2522:	d8 01       	movw	r26, r16
    2524:	16 96       	adiw	r26, 0x06	; 6
    2526:	4d 91       	ld	r20, X+
    2528:	5d 91       	ld	r21, X+
    252a:	6d 91       	ld	r22, X+
    252c:	7c 91       	ld	r23, X
    252e:	19 97       	sbiw	r26, 0x09	; 9
    2530:	41 15       	cp	r20, r1
    2532:	51 05       	cpc	r21, r1
    2534:	61 05       	cpc	r22, r1
    2536:	71 05       	cpc	r23, r1
    2538:	81 f4       	brne	.+32     	; 0x255a <_ZN6SdFile5writeEPKvj+0xf6>
        if (firstCluster_ == 0) {
    253a:	57 96       	adiw	r26, 0x17	; 23
    253c:	8d 91       	ld	r24, X+
    253e:	9d 91       	ld	r25, X+
    2540:	0d 90       	ld	r0, X+
    2542:	bc 91       	ld	r27, X
    2544:	a0 2d       	mov	r26, r0
    2546:	00 97       	sbiw	r24, 0x00	; 0
    2548:	a1 05       	cpc	r26, r1
    254a:	b1 05       	cpc	r27, r1
    254c:	49 f1       	breq	.+82     	; 0x25a0 <_ZN6SdFile5writeEPKvj+0x13c>
          // allocate first cluster of file
          if (!addCluster()) goto writeErrorReturn;
        } else {
          curCluster_ = firstCluster_;
    254e:	f8 01       	movw	r30, r16
    2550:	86 83       	std	Z+6, r24	; 0x06
    2552:	97 83       	std	Z+7, r25	; 0x07
    2554:	a0 87       	std	Z+8, r26	; 0x08
    2556:	b1 87       	std	Z+9, r27	; 0x09
    2558:	2e c0       	rjmp	.+92     	; 0x25b6 <_ZN6SdFile5writeEPKvj+0x152>
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
    255a:	c9 01       	movw	r24, r18
    255c:	9e 01       	movw	r18, r28
    255e:	2f 5f       	subi	r18, 0xFF	; 255
    2560:	3f 4f       	sbci	r19, 0xFF	; 255
    2562:	0e 94 92 14 	call	0x2924	; 0x2924 <_ZNK8SdVolume6fatGetEmPm>
    2566:	88 23       	and	r24, r24
    2568:	09 f4       	brne	.+2      	; 0x256c <_ZN6SdFile5writeEPKvj+0x108>
    256a:	0a c1       	rjmp	.+532    	; 0x2780 <_ZN6SdFile5writeEPKvj+0x31c>
        if (vol_->isEOC(next)) {
    256c:	49 81       	ldd	r20, Y+1	; 0x01
    256e:	5a 81       	ldd	r21, Y+2	; 0x02
    2570:	6b 81       	ldd	r22, Y+3	; 0x03
    2572:	7c 81       	ldd	r23, Y+4	; 0x04
 * Use SdFile::writeError to check for errors.
 */
void SdFile::writeln_P(PGM_P str) {
  write_P(str);
  println();
}
    2574:	d8 01       	movw	r26, r16
    2576:	5b 96       	adiw	r26, 0x1b	; 27
    2578:	ed 91       	ld	r30, X+
    257a:	fc 91       	ld	r31, X
    257c:	5c 97       	sbiw	r26, 0x1c	; 28
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    257e:	87 89       	ldd	r24, Z+23	; 0x17
    2580:	80 31       	cpi	r24, 0x10	; 16
    2582:	29 f4       	brne	.+10     	; 0x258e <_ZN6SdFile5writeEPKvj+0x12a>
    2584:	88 ef       	ldi	r24, 0xF8	; 248
    2586:	9f ef       	ldi	r25, 0xFF	; 255
    2588:	a0 e0       	ldi	r26, 0x00	; 0
    258a:	b0 e0       	ldi	r27, 0x00	; 0
    258c:	04 c0       	rjmp	.+8      	; 0x2596 <_ZN6SdFile5writeEPKvj+0x132>
    258e:	88 ef       	ldi	r24, 0xF8	; 248
    2590:	9f ef       	ldi	r25, 0xFF	; 255
    2592:	af ef       	ldi	r26, 0xFF	; 255
    2594:	bf e0       	ldi	r27, 0x0F	; 15
          curCluster_ = firstCluster_;
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
        if (vol_->isEOC(next)) {
    2596:	48 17       	cp	r20, r24
    2598:	59 07       	cpc	r21, r25
    259a:	6a 07       	cpc	r22, r26
    259c:	7b 07       	cpc	r23, r27
    259e:	30 f0       	brcs	.+12     	; 0x25ac <_ZN6SdFile5writeEPKvj+0x148>
          // add cluster if at end of chain
          if (!addCluster()) goto writeErrorReturn;
    25a0:	c8 01       	movw	r24, r16
    25a2:	0e 94 4e 0c 	call	0x189c	; 0x189c <_ZN6SdFile10addClusterEv>
    25a6:	88 23       	and	r24, r24
    25a8:	31 f4       	brne	.+12     	; 0x25b6 <_ZN6SdFile5writeEPKvj+0x152>
    25aa:	e3 c0       	rjmp	.+454    	; 0x2772 <_ZN6SdFile5writeEPKvj+0x30e>
        } else {
          curCluster_ = next;
    25ac:	f8 01       	movw	r30, r16
    25ae:	46 83       	std	Z+6, r20	; 0x06
    25b0:	57 83       	std	Z+7, r21	; 0x07
    25b2:	60 87       	std	Z+8, r22	; 0x08
    25b4:	71 87       	std	Z+9, r23	; 0x09
        }
      }
    }
    // max space in block
    uint16_t n = 512 - blockOffset;
    25b6:	80 e0       	ldi	r24, 0x00	; 0
    25b8:	92 e0       	ldi	r25, 0x02	; 2
    25ba:	86 19       	sub	r24, r6
    25bc:	97 09       	sbc	r25, r7
    25be:	41 01       	movw	r8, r2
    25c0:	82 15       	cp	r24, r2
    25c2:	93 05       	cpc	r25, r3
    25c4:	08 f4       	brcc	.+2      	; 0x25c8 <_ZN6SdFile5writeEPKvj+0x164>
    25c6:	4c 01       	movw	r8, r24

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    25c8:	d8 01       	movw	r26, r16
    25ca:	5b 96       	adiw	r26, 0x1b	; 27
    25cc:	ed 91       	ld	r30, X+
    25ce:	fc 91       	ld	r31, X
    25d0:	5c 97       	sbiw	r26, 0x1c	; 28
  //----------------------------------------------------------------------------
  uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
          return (position >> 9) & (blocksPerCluster_ - 1);}
  uint32_t clusterStartBlock(uint32_t cluster) const {
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
    25d2:	16 96       	adiw	r26, 0x06	; 6
    25d4:	cd 90       	ld	r12, X+
    25d6:	dd 90       	ld	r13, X+
    25d8:	ed 90       	ld	r14, X+
    25da:	fc 90       	ld	r15, X
    25dc:	19 97       	sbiw	r26, 0x09	; 9
    25de:	8e ef       	ldi	r24, 0xFE	; 254
    25e0:	9f ef       	ldi	r25, 0xFF	; 255
    25e2:	af ef       	ldi	r26, 0xFF	; 255
    25e4:	bf ef       	ldi	r27, 0xFF	; 255
    25e6:	c8 0e       	add	r12, r24
    25e8:	d9 1e       	adc	r13, r25
    25ea:	ea 1e       	adc	r14, r26
    25ec:	fb 1e       	adc	r15, r27
    25ee:	05 84       	ldd	r0, Z+13	; 0x0d
    25f0:	04 c0       	rjmp	.+8      	; 0x25fa <_ZN6SdFile5writeEPKvj+0x196>
    25f2:	cc 0c       	add	r12, r12
    25f4:	dd 1c       	adc	r13, r13
    25f6:	ee 1c       	adc	r14, r14
    25f8:	ff 1c       	adc	r15, r15
    25fa:	0a 94       	dec	r0
    25fc:	d2 f7       	brpl	.-12     	; 0x25f2 <_ZN6SdFile5writeEPKvj+0x18e>
    25fe:	86 85       	ldd	r24, Z+14	; 0x0e
    2600:	97 85       	ldd	r25, Z+15	; 0x0f
    2602:	a0 89       	ldd	r26, Z+16	; 0x10
    2604:	b1 89       	ldd	r27, Z+17	; 0x11
    2606:	c8 0e       	add	r12, r24
    2608:	d9 1e       	adc	r13, r25
    260a:	ea 1e       	adc	r14, r26
    260c:	fb 1e       	adc	r15, r27
    260e:	cb 0c       	add	r12, r11
    2610:	d1 1c       	adc	r13, r1
    2612:	e1 1c       	adc	r14, r1
    2614:	f1 1c       	adc	r15, r1
    if (n == 512) {
    2616:	90 e0       	ldi	r25, 0x00	; 0
    2618:	89 16       	cp	r8, r25
    261a:	92 e0       	ldi	r25, 0x02	; 2
    261c:	99 06       	cpc	r9, r25
    261e:	49 f5       	brne	.+82     	; 0x2672 <_ZN6SdFile5writeEPKvj+0x20e>
      // full block - don't need to use cache
      // invalidate cache if block is in cache
      if (SdVolume::cacheBlockNumber_ == block) {
    2620:	80 91 ab 04 	lds	r24, 0x04AB
    2624:	90 91 ac 04 	lds	r25, 0x04AC
    2628:	a0 91 ad 04 	lds	r26, 0x04AD
    262c:	b0 91 ae 04 	lds	r27, 0x04AE
    2630:	8c 15       	cp	r24, r12
    2632:	9d 05       	cpc	r25, r13
    2634:	ae 05       	cpc	r26, r14
    2636:	bf 05       	cpc	r27, r15
    2638:	59 f4       	brne	.+22     	; 0x2650 <_ZN6SdFile5writeEPKvj+0x1ec>
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
    263a:	8f ef       	ldi	r24, 0xFF	; 255
    263c:	9f ef       	ldi	r25, 0xFF	; 255
    263e:	dc 01       	movw	r26, r24
    2640:	80 93 ab 04 	sts	0x04AB, r24
    2644:	90 93 ac 04 	sts	0x04AC, r25
    2648:	a0 93 ad 04 	sts	0x04AD, r26
    264c:	b0 93 ae 04 	sts	0x04AE, r27
  uint8_t readData(uint32_t block, uint16_t offset,
    uint16_t count, uint8_t* dst) {
      return sdCard_->readData(block, offset, count, dst);
  }
  uint8_t writeBlock(uint32_t block, const uint8_t* dst) {
    return sdCard_->writeBlock(block, dst);
    2650:	80 91 5b 05 	lds	r24, 0x055B
    2654:	90 91 5c 05 	lds	r25, 0x055C
    2658:	b7 01       	movw	r22, r14
    265a:	a6 01       	movw	r20, r12
    265c:	92 01       	movw	r18, r4
    265e:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <_ZN7Sd2Card10writeBlockEmPKh>
      }
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
    2662:	88 23       	and	r24, r24
    2664:	09 f4       	brne	.+2      	; 0x2668 <_ZN6SdFile5writeEPKvj+0x204>
    2666:	85 c0       	rjmp	.+266    	; 0x2772 <_ZN6SdFile5writeEPKvj+0x30e>
      src += 512;
    2668:	a0 e0       	ldi	r26, 0x00	; 0
    266a:	b2 e0       	ldi	r27, 0x02	; 2
    266c:	4a 0e       	add	r4, r26
    266e:	5b 1e       	adc	r5, r27
    2670:	3e c0       	rjmp	.+124    	; 0x26ee <_ZN6SdFile5writeEPKvj+0x28a>
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
    2672:	61 14       	cp	r6, r1
    2674:	71 04       	cpc	r7, r1
    2676:	09 f5       	brne	.+66     	; 0x26ba <_ZN6SdFile5writeEPKvj+0x256>
    2678:	f8 01       	movw	r30, r16
    267a:	82 85       	ldd	r24, Z+10	; 0x0a
    267c:	93 85       	ldd	r25, Z+11	; 0x0b
    267e:	a4 85       	ldd	r26, Z+12	; 0x0c
    2680:	b5 85       	ldd	r27, Z+13	; 0x0d
    2682:	43 89       	ldd	r20, Z+19	; 0x13
    2684:	54 89       	ldd	r21, Z+20	; 0x14
    2686:	65 89       	ldd	r22, Z+21	; 0x15
    2688:	76 89       	ldd	r23, Z+22	; 0x16
    268a:	84 17       	cp	r24, r20
    268c:	95 07       	cpc	r25, r21
    268e:	a6 07       	cpc	r26, r22
    2690:	b7 07       	cpc	r27, r23
    2692:	98 f0       	brcs	.+38     	; 0x26ba <_ZN6SdFile5writeEPKvj+0x256>
        // start of new block don't need to read into cache
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
    2694:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <_ZN8SdVolume10cacheFlushEv>
    2698:	88 23       	and	r24, r24
    269a:	09 f4       	brne	.+2      	; 0x269e <_ZN6SdFile5writeEPKvj+0x23a>
    269c:	6a c0       	rjmp	.+212    	; 0x2772 <_ZN6SdFile5writeEPKvj+0x30e>
        SdVolume::cacheBlockNumber_ = block;
    269e:	c0 92 ab 04 	sts	0x04AB, r12
    26a2:	d0 92 ac 04 	sts	0x04AC, r13
    26a6:	e0 92 ad 04 	sts	0x04AD, r14
    26aa:	f0 92 ae 04 	sts	0x04AE, r15
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {
           return clusterStartBlock(cluster) + blockOfCluster(position);}
  static uint8_t cacheFlush(void);
  static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
    26ae:	80 91 5a 05 	lds	r24, 0x055A
    26b2:	81 60       	ori	r24, 0x01	; 1
    26b4:	80 93 5a 05 	sts	0x055A, r24
    26b8:	08 c0       	rjmp	.+16     	; 0x26ca <_ZN6SdFile5writeEPKvj+0x266>
        SdVolume::cacheSetDirty();
      } else {
        // rewrite part of block
        if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) {
    26ba:	c7 01       	movw	r24, r14
    26bc:	b6 01       	movw	r22, r12
    26be:	41 e0       	ldi	r20, 0x01	; 1
    26c0:	0e 94 2e 14 	call	0x285c	; 0x285c <_ZN8SdVolume13cacheRawBlockEmh>
    26c4:	88 23       	and	r24, r24
    26c6:	09 f4       	brne	.+2      	; 0x26ca <_ZN6SdFile5writeEPKvj+0x266>
    26c8:	54 c0       	rjmp	.+168    	; 0x2772 <_ZN6SdFile5writeEPKvj+0x30e>
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
    26ca:	93 01       	movw	r18, r6
    26cc:	23 5a       	subi	r18, 0xA3	; 163
    26ce:	3a 4f       	sbci	r19, 0xFA	; 250
      uint8_t* end = dst + n;
    26d0:	c9 01       	movw	r24, r18
    26d2:	88 0d       	add	r24, r8
    26d4:	99 1d       	adc	r25, r9
    26d6:	d2 01       	movw	r26, r4
        // rewrite part of block
        if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) {
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
    26d8:	f9 01       	movw	r30, r18
      uint8_t* end = dst + n;
      while (dst != end) *dst++ = *src++;
    26da:	02 c0       	rjmp	.+4      	; 0x26e0 <_ZN6SdFile5writeEPKvj+0x27c>
    26dc:	4d 91       	ld	r20, X+
    26de:	41 93       	st	Z+, r20
    26e0:	e8 17       	cp	r30, r24
    26e2:	f9 07       	cpc	r31, r25
    26e4:	d9 f7       	brne	.-10     	; 0x26dc <_ZN6SdFile5writeEPKvj+0x278>
 * \a nbyte.  If an error occurs, write() returns -1.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, uint16_t nbyte) {
    26e6:	e2 1b       	sub	r30, r18
    26e8:	f3 0b       	sbc	r31, r19
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
      uint8_t* end = dst + n;
      while (dst != end) *dst++ = *src++;
    26ea:	4e 0e       	add	r4, r30
    26ec:	5f 1e       	adc	r5, r31
    }
    nToWrite -= n;
    26ee:	28 18       	sub	r2, r8
    26f0:	39 08       	sbc	r3, r9
    curPosition_ += n;
    26f2:	a4 01       	movw	r20, r8
    26f4:	60 e0       	ldi	r22, 0x00	; 0
    26f6:	70 e0       	ldi	r23, 0x00	; 0
    26f8:	f8 01       	movw	r30, r16
    26fa:	82 85       	ldd	r24, Z+10	; 0x0a
    26fc:	93 85       	ldd	r25, Z+11	; 0x0b
    26fe:	a4 85       	ldd	r26, Z+12	; 0x0c
    2700:	b5 85       	ldd	r27, Z+13	; 0x0d
    2702:	84 0f       	add	r24, r20
    2704:	95 1f       	adc	r25, r21
    2706:	a6 1f       	adc	r26, r22
    2708:	b7 1f       	adc	r27, r23
    270a:	82 87       	std	Z+10, r24	; 0x0a
    270c:	93 87       	std	Z+11, r25	; 0x0b
    270e:	a4 87       	std	Z+12, r26	; 0x0c
    2710:	b5 87       	std	Z+13, r27	; 0x0d
    2712:	f8 01       	movw	r30, r16
    2714:	82 85       	ldd	r24, Z+10	; 0x0a
    2716:	93 85       	ldd	r25, Z+11	; 0x0b
    2718:	a4 85       	ldd	r26, Z+12	; 0x0c
    271a:	b5 85       	ldd	r27, Z+13	; 0x0d
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    271c:	21 14       	cp	r2, r1
    271e:	31 04       	cpc	r3, r1
    2720:	09 f0       	breq	.+2      	; 0x2724 <_ZN6SdFile5writeEPKvj+0x2c0>
    2722:	e0 ce       	rjmp	.-576    	; 0x24e4 <_ZN6SdFile5writeEPKvj+0x80>
      while (dst != end) *dst++ = *src++;
    }
    nToWrite -= n;
    curPosition_ += n;
  }
  if (curPosition_ > fileSize_) {
    2724:	43 89       	ldd	r20, Z+19	; 0x13
    2726:	54 89       	ldd	r21, Z+20	; 0x14
    2728:	65 89       	ldd	r22, Z+21	; 0x15
    272a:	76 89       	ldd	r23, Z+22	; 0x16
    272c:	48 17       	cp	r20, r24
    272e:	59 07       	cpc	r21, r25
    2730:	6a 07       	cpc	r22, r26
    2732:	7b 07       	cpc	r23, r27
    2734:	40 f4       	brcc	.+16     	; 0x2746 <_ZN6SdFile5writeEPKvj+0x2e2>
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    2736:	83 8b       	std	Z+19, r24	; 0x13
    2738:	94 8b       	std	Z+20, r25	; 0x14
    273a:	a5 8b       	std	Z+21, r26	; 0x15
    273c:	b6 8b       	std	Z+22, r27	; 0x16
    flags_ |= F_FILE_DIR_DIRTY;
    273e:	84 81       	ldd	r24, Z+4	; 0x04
    2740:	80 68       	ori	r24, 0x80	; 128
    2742:	84 83       	std	Z+4, r24	; 0x04
    2744:	0d c0       	rjmp	.+26     	; 0x2760 <_ZN6SdFile5writeEPKvj+0x2fc>
  } else if (dateTime_ && nbyte) {
    2746:	80 91 54 05 	lds	r24, 0x0554
    274a:	90 91 55 05 	lds	r25, 0x0555
    274e:	00 97       	sbiw	r24, 0x00	; 0
    2750:	39 f0       	breq	.+14     	; 0x2760 <_ZN6SdFile5writeEPKvj+0x2fc>
    2752:	8d 81       	ldd	r24, Y+5	; 0x05
    2754:	9e 81       	ldd	r25, Y+6	; 0x06
    2756:	00 97       	sbiw	r24, 0x00	; 0
    2758:	19 f0       	breq	.+6      	; 0x2760 <_ZN6SdFile5writeEPKvj+0x2fc>
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
    275a:	84 81       	ldd	r24, Z+4	; 0x04
    275c:	80 68       	ori	r24, 0x80	; 128
    275e:	84 83       	std	Z+4, r24	; 0x04
  }

  if (flags_ & O_SYNC) {
    2760:	f8 01       	movw	r30, r16
    2762:	84 81       	ldd	r24, Z+4	; 0x04
    2764:	83 ff       	sbrs	r24, 3
    2766:	0e c0       	rjmp	.+28     	; 0x2784 <_ZN6SdFile5writeEPKvj+0x320>
    if (!sync()) goto writeErrorReturn;
    2768:	c8 01       	movw	r24, r16
    276a:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <_ZN6SdFile4syncEv>
    276e:	88 23       	and	r24, r24
    2770:	49 f4       	brne	.+18     	; 0x2784 <_ZN6SdFile5writeEPKvj+0x320>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    2772:	81 e0       	ldi	r24, 0x01	; 1
    2774:	90 e0       	ldi	r25, 0x00	; 0
    2776:	d8 01       	movw	r26, r16
    2778:	13 96       	adiw	r26, 0x03	; 3
    277a:	9c 93       	st	X, r25
    277c:	8e 93       	st	-X, r24
    277e:	12 97       	sbiw	r26, 0x02	; 2
        } else {
          curCluster_ = firstCluster_;
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
    2780:	1e 82       	std	Y+6, r1	; 0x06
    2782:	1d 82       	std	Y+5, r1	; 0x05
 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
}
    2784:	8d 81       	ldd	r24, Y+5	; 0x05
    2786:	9e 81       	ldd	r25, Y+6	; 0x06
    2788:	26 96       	adiw	r28, 0x06	; 6
    278a:	0f b6       	in	r0, 0x3f	; 63
    278c:	f8 94       	cli
    278e:	de bf       	out	0x3e, r29	; 62
    2790:	0f be       	out	0x3f, r0	; 63
    2792:	cd bf       	out	0x3d, r28	; 61
    2794:	df 91       	pop	r29
    2796:	cf 91       	pop	r28
    2798:	1f 91       	pop	r17
    279a:	0f 91       	pop	r16
    279c:	ff 90       	pop	r15
    279e:	ef 90       	pop	r14
    27a0:	df 90       	pop	r13
    27a2:	cf 90       	pop	r12
    27a4:	bf 90       	pop	r11
    27a6:	9f 90       	pop	r9
    27a8:	8f 90       	pop	r8
    27aa:	7f 90       	pop	r7
    27ac:	6f 90       	pop	r6
    27ae:	5f 90       	pop	r5
    27b0:	4f 90       	pop	r4
    27b2:	3f 90       	pop	r3
    27b4:	2f 90       	pop	r2
    27b6:	08 95       	ret

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;

  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    27b8:	82 fd       	sbrc	r24, 2
    27ba:	7b ce       	rjmp	.-778    	; 0x24b2 <_ZN6SdFile5writeEPKvj+0x4e>
    27bc:	8e ce       	rjmp	.-740    	; 0x24da <_ZN6SdFile5writeEPKvj+0x76>

000027be <_ZN6SdFile5writeEh>:
/**
 * Write a byte to a file. Required by the Arduino Print class.
 *
 * Use SdFile::writeError to check for errors.
 */
size_t SdFile::write(uint8_t b) {
    27be:	cf 93       	push	r28
    27c0:	df 93       	push	r29
    27c2:	0f 92       	push	r0
    27c4:	cd b7       	in	r28, 0x3d	; 61
    27c6:	de b7       	in	r29, 0x3e	; 62
    27c8:	69 83       	std	Y+1, r22	; 0x01
  return write(&b, 1);
    27ca:	be 01       	movw	r22, r28
    27cc:	6f 5f       	subi	r22, 0xFF	; 255
    27ce:	7f 4f       	sbci	r23, 0xFF	; 255
    27d0:	41 e0       	ldi	r20, 0x01	; 1
    27d2:	50 e0       	ldi	r21, 0x00	; 0
    27d4:	0e 94 32 12 	call	0x2464	; 0x2464 <_ZN6SdFile5writeEPKvj>
}
    27d8:	0f 90       	pop	r0
    27da:	df 91       	pop	r29
    27dc:	cf 91       	pop	r28
    27de:	08 95       	ret

000027e0 <_ZN8SdVolume10cacheFlushEv>:

  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
  if (cacheDirty_) {
    27e0:	80 91 5a 05 	lds	r24, 0x055A
    27e4:	88 23       	and	r24, r24
    27e6:	b1 f1       	breq	.+108    	; 0x2854 <_ZN8SdVolume10cacheFlushEv+0x74>
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
    27e8:	40 91 ab 04 	lds	r20, 0x04AB
    27ec:	50 91 ac 04 	lds	r21, 0x04AC
    27f0:	60 91 ad 04 	lds	r22, 0x04AD
    27f4:	70 91 ae 04 	lds	r23, 0x04AE
    27f8:	80 91 5b 05 	lds	r24, 0x055B
    27fc:	90 91 5c 05 	lds	r25, 0x055C
    2800:	2d e5       	ldi	r18, 0x5D	; 93
    2802:	35 e0       	ldi	r19, 0x05	; 5
    2804:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <_ZN7Sd2Card10writeBlockEmPKh>
    2808:	88 23       	and	r24, r24
    280a:	31 f1       	breq	.+76     	; 0x2858 <_ZN8SdVolume10cacheFlushEv+0x78>
      return false;
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
    280c:	40 91 56 05 	lds	r20, 0x0556
    2810:	50 91 57 05 	lds	r21, 0x0557
    2814:	60 91 58 05 	lds	r22, 0x0558
    2818:	70 91 59 05 	lds	r23, 0x0559
    281c:	41 15       	cp	r20, r1
    281e:	51 05       	cpc	r21, r1
    2820:	61 05       	cpc	r22, r1
    2822:	71 05       	cpc	r23, r1
    2824:	91 f0       	breq	.+36     	; 0x284a <_ZN8SdVolume10cacheFlushEv+0x6a>
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
    2826:	80 91 5b 05 	lds	r24, 0x055B
    282a:	90 91 5c 05 	lds	r25, 0x055C
    282e:	2d e5       	ldi	r18, 0x5D	; 93
    2830:	35 e0       	ldi	r19, 0x05	; 5
    2832:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <_ZN7Sd2Card10writeBlockEmPKh>
    2836:	88 23       	and	r24, r24
    2838:	59 f0       	breq	.+22     	; 0x2850 <_ZN8SdVolume10cacheFlushEv+0x70>
        return false;
      }
      cacheMirrorBlock_ = 0;
    283a:	10 92 56 05 	sts	0x0556, r1
    283e:	10 92 57 05 	sts	0x0557, r1
    2842:	10 92 58 05 	sts	0x0558, r1
    2846:	10 92 59 05 	sts	0x0559, r1
    }
    cacheDirty_ = 0;
    284a:	10 92 5a 05 	sts	0x055A, r1
    284e:	02 c0       	rjmp	.+4      	; 0x2854 <_ZN8SdVolume10cacheFlushEv+0x74>
      return false;
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
        return false;
    2850:	80 e0       	ldi	r24, 0x00	; 0
    2852:	08 95       	ret
      }
      cacheMirrorBlock_ = 0;
    }
    cacheDirty_ = 0;
  }
  return true;
    2854:	81 e0       	ldi	r24, 0x01	; 1
    2856:	08 95       	ret
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
  if (cacheDirty_) {
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
      return false;
    2858:	80 e0       	ldi	r24, 0x00	; 0
      cacheMirrorBlock_ = 0;
    }
    cacheDirty_ = 0;
  }
  return true;
}
    285a:	08 95       	ret

0000285c <_ZN8SdVolume13cacheRawBlockEmh>:
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
    285c:	cf 92       	push	r12
    285e:	df 92       	push	r13
    2860:	ef 92       	push	r14
    2862:	ff 92       	push	r15
    2864:	cf 93       	push	r28
    2866:	6b 01       	movw	r12, r22
    2868:	7c 01       	movw	r14, r24
    286a:	c4 2f       	mov	r28, r20
  if (cacheBlockNumber_ != blockNumber) {
    286c:	80 91 ab 04 	lds	r24, 0x04AB
    2870:	90 91 ac 04 	lds	r25, 0x04AC
    2874:	a0 91 ad 04 	lds	r26, 0x04AD
    2878:	b0 91 ae 04 	lds	r27, 0x04AE
    287c:	8c 15       	cp	r24, r12
    287e:	9d 05       	cpc	r25, r13
    2880:	ae 05       	cpc	r26, r14
    2882:	bf 05       	cpc	r27, r15
    2884:	c1 f0       	breq	.+48     	; 0x28b6 <_ZN8SdVolume13cacheRawBlockEmh+0x5a>
    if (!cacheFlush()) return false;
    2886:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <_ZN8SdVolume10cacheFlushEv>
    288a:	88 23       	and	r24, r24
    288c:	d9 f0       	breq	.+54     	; 0x28c4 <_ZN8SdVolume13cacheRawBlockEmh+0x68>
    if (!sdCard_->readBlock(blockNumber, cacheBuffer_.data)) return false;
    288e:	80 91 5b 05 	lds	r24, 0x055B
    2892:	90 91 5c 05 	lds	r25, 0x055C
    2896:	b7 01       	movw	r22, r14
    2898:	a6 01       	movw	r20, r12
    289a:	2d e5       	ldi	r18, 0x5D	; 93
    289c:	35 e0       	ldi	r19, 0x05	; 5
    289e:	0e 94 b5 0b 	call	0x176a	; 0x176a <_ZN7Sd2Card9readBlockEmPh>
    28a2:	88 23       	and	r24, r24
    28a4:	79 f0       	breq	.+30     	; 0x28c4 <_ZN8SdVolume13cacheRawBlockEmh+0x68>
    cacheBlockNumber_ = blockNumber;
    28a6:	c0 92 ab 04 	sts	0x04AB, r12
    28aa:	d0 92 ac 04 	sts	0x04AC, r13
    28ae:	e0 92 ad 04 	sts	0x04AD, r14
    28b2:	f0 92 ae 04 	sts	0x04AE, r15
  }
  cacheDirty_ |= action;
    28b6:	80 91 5a 05 	lds	r24, 0x055A
    28ba:	8c 2b       	or	r24, r28
    28bc:	80 93 5a 05 	sts	0x055A, r24
  return true;
    28c0:	81 e0       	ldi	r24, 0x01	; 1
    28c2:	01 c0       	rjmp	.+2      	; 0x28c6 <_ZN8SdVolume13cacheRawBlockEmh+0x6a>
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
  if (cacheBlockNumber_ != blockNumber) {
    if (!cacheFlush()) return false;
    if (!sdCard_->readBlock(blockNumber, cacheBuffer_.data)) return false;
    28c4:	80 e0       	ldi	r24, 0x00	; 0
    cacheBlockNumber_ = blockNumber;
  }
  cacheDirty_ |= action;
  return true;
}
    28c6:	cf 91       	pop	r28
    28c8:	ff 90       	pop	r15
    28ca:	ef 90       	pop	r14
    28cc:	df 90       	pop	r13
    28ce:	cf 90       	pop	r12
    28d0:	08 95       	ret

000028d2 <_ZN8SdVolume14cacheZeroBlockEm>:
//------------------------------------------------------------------------------
// cache a zero block for blockNumber
uint8_t SdVolume::cacheZeroBlock(uint32_t blockNumber) {
    28d2:	cf 92       	push	r12
    28d4:	df 92       	push	r13
    28d6:	ef 92       	push	r14
    28d8:	ff 92       	push	r15
    28da:	6b 01       	movw	r12, r22
    28dc:	7c 01       	movw	r14, r24
  if (!cacheFlush()) return false;
    28de:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <_ZN8SdVolume10cacheFlushEv>
    28e2:	88 23       	and	r24, r24
    28e4:	c9 f0       	breq	.+50     	; 0x2918 <_ZN8SdVolume14cacheZeroBlockEm+0x46>
    28e6:	ed e5       	ldi	r30, 0x5D	; 93
    28e8:	f5 e0       	ldi	r31, 0x05	; 5
    28ea:	80 e0       	ldi	r24, 0x00	; 0
    28ec:	90 e0       	ldi	r25, 0x00	; 0

  // loop take less flash than memset(cacheBuffer_.data, 0, 512);
  for (uint16_t i = 0; i < 512; i++) {
    cacheBuffer_.data[i] = 0;
    28ee:	11 92       	st	Z+, r1
// cache a zero block for blockNumber
uint8_t SdVolume::cacheZeroBlock(uint32_t blockNumber) {
  if (!cacheFlush()) return false;

  // loop take less flash than memset(cacheBuffer_.data, 0, 512);
  for (uint16_t i = 0; i < 512; i++) {
    28f0:	01 96       	adiw	r24, 0x01	; 1
    28f2:	22 e0       	ldi	r18, 0x02	; 2
    28f4:	80 30       	cpi	r24, 0x00	; 0
    28f6:	92 07       	cpc	r25, r18
    28f8:	d1 f7       	brne	.-12     	; 0x28ee <_ZN8SdVolume14cacheZeroBlockEm+0x1c>
    cacheBuffer_.data[i] = 0;
  }
  cacheBlockNumber_ = blockNumber;
    28fa:	c0 92 ab 04 	sts	0x04AB, r12
    28fe:	d0 92 ac 04 	sts	0x04AC, r13
    2902:	e0 92 ad 04 	sts	0x04AD, r14
    2906:	f0 92 ae 04 	sts	0x04AE, r15
    290a:	80 91 5a 05 	lds	r24, 0x055A
    290e:	81 60       	ori	r24, 0x01	; 1
    2910:	80 93 5a 05 	sts	0x055A, r24
  cacheSetDirty();
  return true;
    2914:	81 e0       	ldi	r24, 0x01	; 1
    2916:	01 c0       	rjmp	.+2      	; 0x291a <_ZN8SdVolume14cacheZeroBlockEm+0x48>
  return true;
}
//------------------------------------------------------------------------------
// cache a zero block for blockNumber
uint8_t SdVolume::cacheZeroBlock(uint32_t blockNumber) {
  if (!cacheFlush()) return false;
    2918:	80 e0       	ldi	r24, 0x00	; 0
    cacheBuffer_.data[i] = 0;
  }
  cacheBlockNumber_ = blockNumber;
  cacheSetDirty();
  return true;
}
    291a:	ff 90       	pop	r15
    291c:	ef 90       	pop	r14
    291e:	df 90       	pop	r13
    2920:	cf 90       	pop	r12
    2922:	08 95       	ret

00002924 <_ZNK8SdVolume6fatGetEmPm>:
  *size = s;
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
    2924:	af 92       	push	r10
    2926:	bf 92       	push	r11
    2928:	cf 92       	push	r12
    292a:	df 92       	push	r13
    292c:	ef 92       	push	r14
    292e:	ff 92       	push	r15
    2930:	0f 93       	push	r16
    2932:	1f 93       	push	r17
    2934:	cf 93       	push	r28
    2936:	df 93       	push	r29
    2938:	ec 01       	movw	r28, r24
    293a:	6a 01       	movw	r12, r20
    293c:	7b 01       	movw	r14, r22
    293e:	59 01       	movw	r10, r18
  if (cluster > (clusterCount_ + 1)) return false;
    2940:	89 85       	ldd	r24, Y+9	; 0x09
    2942:	9a 85       	ldd	r25, Y+10	; 0x0a
    2944:	ab 85       	ldd	r26, Y+11	; 0x0b
    2946:	bc 85       	ldd	r27, Y+12	; 0x0c
    2948:	01 96       	adiw	r24, 0x01	; 1
    294a:	a1 1d       	adc	r26, r1
    294c:	b1 1d       	adc	r27, r1
    294e:	84 17       	cp	r24, r20
    2950:	95 07       	cpc	r25, r21
    2952:	a6 07       	cpc	r26, r22
    2954:	b7 07       	cpc	r27, r23
    2956:	08 f4       	brcc	.+2      	; 0x295a <_ZNK8SdVolume6fatGetEmPm+0x36>
    2958:	5f c0       	rjmp	.+190    	; 0x2a18 <_ZNK8SdVolume6fatGetEmPm+0xf4>
  uint32_t lba = fatStartBlock_;
    295a:	4b 89       	ldd	r20, Y+19	; 0x13
    295c:	5c 89       	ldd	r21, Y+20	; 0x14
    295e:	6d 89       	ldd	r22, Y+21	; 0x15
    2960:	7e 89       	ldd	r23, Y+22	; 0x16
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    2962:	8f 89       	ldd	r24, Y+23	; 0x17
    2964:	80 31       	cpi	r24, 0x10	; 16
    2966:	29 f4       	brne	.+10     	; 0x2972 <_ZNK8SdVolume6fatGetEmPm+0x4e>
    2968:	bb 27       	eor	r27, r27
    296a:	af 2d       	mov	r26, r15
    296c:	9e 2d       	mov	r25, r14
    296e:	8d 2d       	mov	r24, r13
    2970:	09 c0       	rjmp	.+18     	; 0x2984 <_ZNK8SdVolume6fatGetEmPm+0x60>
    2972:	d7 01       	movw	r26, r14
    2974:	c6 01       	movw	r24, r12
    2976:	37 e0       	ldi	r19, 0x07	; 7
    2978:	b6 95       	lsr	r27
    297a:	a7 95       	ror	r26
    297c:	97 95       	ror	r25
    297e:	87 95       	ror	r24
    2980:	3a 95       	dec	r19
    2982:	d1 f7       	brne	.-12     	; 0x2978 <_ZNK8SdVolume6fatGetEmPm+0x54>
    2984:	8c 01       	movw	r16, r24
    2986:	9d 01       	movw	r18, r26
    2988:	04 0f       	add	r16, r20
    298a:	15 1f       	adc	r17, r21
    298c:	26 1f       	adc	r18, r22
    298e:	37 1f       	adc	r19, r23
    2990:	c9 01       	movw	r24, r18
    2992:	b8 01       	movw	r22, r16
  if (lba != cacheBlockNumber_) {
    2994:	00 91 ab 04 	lds	r16, 0x04AB
    2998:	10 91 ac 04 	lds	r17, 0x04AC
    299c:	20 91 ad 04 	lds	r18, 0x04AD
    29a0:	30 91 ae 04 	lds	r19, 0x04AE
    29a4:	60 17       	cp	r22, r16
    29a6:	71 07       	cpc	r23, r17
    29a8:	82 07       	cpc	r24, r18
    29aa:	93 07       	cpc	r25, r19
    29ac:	29 f0       	breq	.+10     	; 0x29b8 <_ZNK8SdVolume6fatGetEmPm+0x94>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
    29ae:	40 e0       	ldi	r20, 0x00	; 0
    29b0:	0e 94 2e 14 	call	0x285c	; 0x285c <_ZN8SdVolume13cacheRawBlockEmh>
    29b4:	88 23       	and	r24, r24
    29b6:	81 f1       	breq	.+96     	; 0x2a18 <_ZNK8SdVolume6fatGetEmPm+0xf4>
  }
  if (fatType_ == 16) {
    29b8:	8f 89       	ldd	r24, Y+23	; 0x17
    29ba:	80 31       	cpi	r24, 0x10	; 16
    29bc:	91 f4       	brne	.+36     	; 0x29e2 <_ZNK8SdVolume6fatGetEmPm+0xbe>
    *value = cacheBuffer_.fat16[cluster & 0XFF];
    29be:	8f ef       	ldi	r24, 0xFF	; 255
    29c0:	90 e0       	ldi	r25, 0x00	; 0
    29c2:	a0 e0       	ldi	r26, 0x00	; 0
    29c4:	b0 e0       	ldi	r27, 0x00	; 0
    29c6:	c8 22       	and	r12, r24
    29c8:	d9 22       	and	r13, r25
    29ca:	ea 22       	and	r14, r26
    29cc:	fb 22       	and	r15, r27
    29ce:	f6 01       	movw	r30, r12
    29d0:	ee 0f       	add	r30, r30
    29d2:	ff 1f       	adc	r31, r31
    29d4:	e3 5a       	subi	r30, 0xA3	; 163
    29d6:	fa 4f       	sbci	r31, 0xFA	; 250
    29d8:	80 81       	ld	r24, Z
    29da:	91 81       	ldd	r25, Z+1	; 0x01
    29dc:	a0 e0       	ldi	r26, 0x00	; 0
    29de:	b0 e0       	ldi	r27, 0x00	; 0
    29e0:	14 c0       	rjmp	.+40     	; 0x2a0a <_ZNK8SdVolume6fatGetEmPm+0xe6>
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
    29e2:	0f e7       	ldi	r16, 0x7F	; 127
    29e4:	10 e0       	ldi	r17, 0x00	; 0
    29e6:	20 e0       	ldi	r18, 0x00	; 0
    29e8:	30 e0       	ldi	r19, 0x00	; 0
    29ea:	c0 22       	and	r12, r16
    29ec:	d1 22       	and	r13, r17
    29ee:	e2 22       	and	r14, r18
    29f0:	f3 22       	and	r15, r19
    29f2:	f6 01       	movw	r30, r12
    29f4:	ee 0f       	add	r30, r30
    29f6:	ff 1f       	adc	r31, r31
    29f8:	ee 0f       	add	r30, r30
    29fa:	ff 1f       	adc	r31, r31
    29fc:	e3 5a       	subi	r30, 0xA3	; 163
    29fe:	fa 4f       	sbci	r31, 0xFA	; 250
    2a00:	80 81       	ld	r24, Z
    2a02:	91 81       	ldd	r25, Z+1	; 0x01
    2a04:	a2 81       	ldd	r26, Z+2	; 0x02
    2a06:	b3 81       	ldd	r27, Z+3	; 0x03
    2a08:	bf 70       	andi	r27, 0x0F	; 15
    2a0a:	f5 01       	movw	r30, r10
    2a0c:	80 83       	st	Z, r24
    2a0e:	91 83       	std	Z+1, r25	; 0x01
    2a10:	a2 83       	std	Z+2, r26	; 0x02
    2a12:	b3 83       	std	Z+3, r27	; 0x03
    2a14:	81 e0       	ldi	r24, 0x01	; 1
    2a16:	01 c0       	rjmp	.+2      	; 0x2a1a <_ZNK8SdVolume6fatGetEmPm+0xf6>
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
  if (lba != cacheBlockNumber_) {
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
    2a18:	80 e0       	ldi	r24, 0x00	; 0
    *value = cacheBuffer_.fat16[cluster & 0XFF];
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
  }
  return true;
}
    2a1a:	df 91       	pop	r29
    2a1c:	cf 91       	pop	r28
    2a1e:	1f 91       	pop	r17
    2a20:	0f 91       	pop	r16
    2a22:	ff 90       	pop	r15
    2a24:	ef 90       	pop	r14
    2a26:	df 90       	pop	r13
    2a28:	cf 90       	pop	r12
    2a2a:	bf 90       	pop	r11
    2a2c:	af 90       	pop	r10
    2a2e:	08 95       	ret

00002a30 <_ZNK8SdVolume9chainSizeEmPm>:
  cacheSetDirty();
  return true;
}
//------------------------------------------------------------------------------
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
    2a30:	6f 92       	push	r6
    2a32:	7f 92       	push	r7
    2a34:	8f 92       	push	r8
    2a36:	9f 92       	push	r9
    2a38:	af 92       	push	r10
    2a3a:	bf 92       	push	r11
    2a3c:	cf 92       	push	r12
    2a3e:	df 92       	push	r13
    2a40:	ef 92       	push	r14
    2a42:	ff 92       	push	r15
    2a44:	0f 93       	push	r16
    2a46:	1f 93       	push	r17
    2a48:	cf 93       	push	r28
    2a4a:	df 93       	push	r29
    2a4c:	00 d0       	rcall	.+0      	; 0x2a4e <_ZNK8SdVolume9chainSizeEmPm+0x1e>
    2a4e:	0f 92       	push	r0
    2a50:	cd b7       	in	r28, 0x3d	; 61
    2a52:	de b7       	in	r29, 0x3e	; 62
    2a54:	8c 01       	movw	r16, r24
    2a56:	49 83       	std	Y+1, r20	; 0x01
    2a58:	5a 83       	std	Y+2, r21	; 0x02
    2a5a:	6b 83       	std	Y+3, r22	; 0x03
    2a5c:	7c 83       	std	Y+4, r23	; 0x04
    2a5e:	39 01       	movw	r6, r18
  uint32_t s = 0;
    2a60:	cc 24       	eor	r12, r12
    2a62:	dd 24       	eor	r13, r13
    2a64:	76 01       	movw	r14, r12
  do {
    if (!fatGet(cluster, &cluster)) return false;
    s += 512UL << clusterSizeShift_;
    2a66:	81 2c       	mov	r8, r1
    2a68:	f2 e0       	ldi	r31, 0x02	; 2
    2a6a:	9f 2e       	mov	r9, r31
    2a6c:	a1 2c       	mov	r10, r1
    2a6e:	b1 2c       	mov	r11, r1
//------------------------------------------------------------------------------
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
  uint32_t s = 0;
  do {
    if (!fatGet(cluster, &cluster)) return false;
    2a70:	49 81       	ldd	r20, Y+1	; 0x01
    2a72:	5a 81       	ldd	r21, Y+2	; 0x02
    2a74:	6b 81       	ldd	r22, Y+3	; 0x03
    2a76:	7c 81       	ldd	r23, Y+4	; 0x04
    2a78:	c8 01       	movw	r24, r16
    2a7a:	9e 01       	movw	r18, r28
    2a7c:	2f 5f       	subi	r18, 0xFF	; 255
    2a7e:	3f 4f       	sbci	r19, 0xFF	; 255
    2a80:	0e 94 92 14 	call	0x2924	; 0x2924 <_ZNK8SdVolume6fatGetEmPm>
    2a84:	88 23       	and	r24, r24
    2a86:	59 f1       	breq	.+86     	; 0x2ade <_ZNK8SdVolume9chainSizeEmPm+0xae>
    s += 512UL << clusterSizeShift_;
    2a88:	d5 01       	movw	r26, r10
    2a8a:	c4 01       	movw	r24, r8
    2a8c:	f8 01       	movw	r30, r16
    2a8e:	05 84       	ldd	r0, Z+13	; 0x0d
    2a90:	04 c0       	rjmp	.+8      	; 0x2a9a <_ZNK8SdVolume9chainSizeEmPm+0x6a>
    2a92:	88 0f       	add	r24, r24
    2a94:	99 1f       	adc	r25, r25
    2a96:	aa 1f       	adc	r26, r26
    2a98:	bb 1f       	adc	r27, r27
    2a9a:	0a 94       	dec	r0
    2a9c:	d2 f7       	brpl	.-12     	; 0x2a92 <_ZNK8SdVolume9chainSizeEmPm+0x62>
    2a9e:	c8 0e       	add	r12, r24
    2aa0:	d9 1e       	adc	r13, r25
    2aa2:	ea 1e       	adc	r14, r26
    2aa4:	fb 1e       	adc	r15, r27
  } while (!isEOC(cluster));
    2aa6:	49 81       	ldd	r20, Y+1	; 0x01
    2aa8:	5a 81       	ldd	r21, Y+2	; 0x02
    2aaa:	6b 81       	ldd	r22, Y+3	; 0x03
    2aac:	7c 81       	ldd	r23, Y+4	; 0x04
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    2aae:	87 89       	ldd	r24, Z+23	; 0x17
    2ab0:	80 31       	cpi	r24, 0x10	; 16
    2ab2:	29 f4       	brne	.+10     	; 0x2abe <_ZNK8SdVolume9chainSizeEmPm+0x8e>
    2ab4:	88 ef       	ldi	r24, 0xF8	; 248
    2ab6:	9f ef       	ldi	r25, 0xFF	; 255
    2ab8:	a0 e0       	ldi	r26, 0x00	; 0
    2aba:	b0 e0       	ldi	r27, 0x00	; 0
    2abc:	04 c0       	rjmp	.+8      	; 0x2ac6 <_ZNK8SdVolume9chainSizeEmPm+0x96>
    2abe:	88 ef       	ldi	r24, 0xF8	; 248
    2ac0:	9f ef       	ldi	r25, 0xFF	; 255
    2ac2:	af ef       	ldi	r26, 0xFF	; 255
    2ac4:	bf e0       	ldi	r27, 0x0F	; 15
}
//------------------------------------------------------------------------------
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
  uint32_t s = 0;
  do {
    2ac6:	48 17       	cp	r20, r24
    2ac8:	59 07       	cpc	r21, r25
    2aca:	6a 07       	cpc	r22, r26
    2acc:	7b 07       	cpc	r23, r27
    2ace:	80 f2       	brcs	.-96     	; 0x2a70 <_ZNK8SdVolume9chainSizeEmPm+0x40>
    if (!fatGet(cluster, &cluster)) return false;
    s += 512UL << clusterSizeShift_;
  } while (!isEOC(cluster));
  *size = s;
    2ad0:	f3 01       	movw	r30, r6
    2ad2:	c0 82       	st	Z, r12
    2ad4:	d1 82       	std	Z+1, r13	; 0x01
    2ad6:	e2 82       	std	Z+2, r14	; 0x02
    2ad8:	f3 82       	std	Z+3, r15	; 0x03
  return true;
    2ada:	81 e0       	ldi	r24, 0x01	; 1
    2adc:	01 c0       	rjmp	.+2      	; 0x2ae0 <_ZNK8SdVolume9chainSizeEmPm+0xb0>
//------------------------------------------------------------------------------
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
  uint32_t s = 0;
  do {
    if (!fatGet(cluster, &cluster)) return false;
    2ade:	80 e0       	ldi	r24, 0x00	; 0
    s += 512UL << clusterSizeShift_;
  } while (!isEOC(cluster));
  *size = s;
  return true;
}
    2ae0:	0f 90       	pop	r0
    2ae2:	0f 90       	pop	r0
    2ae4:	0f 90       	pop	r0
    2ae6:	0f 90       	pop	r0
    2ae8:	df 91       	pop	r29
    2aea:	cf 91       	pop	r28
    2aec:	1f 91       	pop	r17
    2aee:	0f 91       	pop	r16
    2af0:	ff 90       	pop	r15
    2af2:	ef 90       	pop	r14
    2af4:	df 90       	pop	r13
    2af6:	cf 90       	pop	r12
    2af8:	bf 90       	pop	r11
    2afa:	af 90       	pop	r10
    2afc:	9f 90       	pop	r9
    2afe:	8f 90       	pop	r8
    2b00:	7f 90       	pop	r7
    2b02:	6f 90       	pop	r6
    2b04:	08 95       	ret

00002b06 <_ZN8SdVolume6fatPutEmm>:
  }
  return true;
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
    2b06:	4f 92       	push	r4
    2b08:	5f 92       	push	r5
    2b0a:	6f 92       	push	r6
    2b0c:	7f 92       	push	r7
    2b0e:	8f 92       	push	r8
    2b10:	9f 92       	push	r9
    2b12:	af 92       	push	r10
    2b14:	bf 92       	push	r11
    2b16:	cf 92       	push	r12
    2b18:	df 92       	push	r13
    2b1a:	ef 92       	push	r14
    2b1c:	ff 92       	push	r15
    2b1e:	0f 93       	push	r16
    2b20:	1f 93       	push	r17
    2b22:	cf 93       	push	r28
    2b24:	df 93       	push	r29
    2b26:	ec 01       	movw	r28, r24
    2b28:	6a 01       	movw	r12, r20
    2b2a:	7b 01       	movw	r14, r22
    2b2c:	28 01       	movw	r4, r16
    2b2e:	39 01       	movw	r6, r18
  // error if reserved cluster
  if (cluster < 2) return false;
    2b30:	42 30       	cpi	r20, 0x02	; 2
    2b32:	51 05       	cpc	r21, r1
    2b34:	61 05       	cpc	r22, r1
    2b36:	71 05       	cpc	r23, r1
    2b38:	08 f4       	brcc	.+2      	; 0x2b3c <_ZN8SdVolume6fatPutEmm+0x36>
    2b3a:	7d c0       	rjmp	.+250    	; 0x2c36 <_ZN8SdVolume6fatPutEmm+0x130>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    2b3c:	89 85       	ldd	r24, Y+9	; 0x09
    2b3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b40:	ab 85       	ldd	r26, Y+11	; 0x0b
    2b42:	bc 85       	ldd	r27, Y+12	; 0x0c
    2b44:	01 96       	adiw	r24, 0x01	; 1
    2b46:	a1 1d       	adc	r26, r1
    2b48:	b1 1d       	adc	r27, r1
    2b4a:	84 17       	cp	r24, r20
    2b4c:	95 07       	cpc	r25, r21
    2b4e:	a6 07       	cpc	r26, r22
    2b50:	b7 07       	cpc	r27, r23
    2b52:	08 f4       	brcc	.+2      	; 0x2b56 <_ZN8SdVolume6fatPutEmm+0x50>
    2b54:	70 c0       	rjmp	.+224    	; 0x2c36 <_ZN8SdVolume6fatPutEmm+0x130>

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
    2b56:	4b 89       	ldd	r20, Y+19	; 0x13
    2b58:	5c 89       	ldd	r21, Y+20	; 0x14
    2b5a:	6d 89       	ldd	r22, Y+21	; 0x15
    2b5c:	7e 89       	ldd	r23, Y+22	; 0x16
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    2b5e:	8f 89       	ldd	r24, Y+23	; 0x17
    2b60:	80 31       	cpi	r24, 0x10	; 16
    2b62:	29 f4       	brne	.+10     	; 0x2b6e <_ZN8SdVolume6fatPutEmm+0x68>
    2b64:	bb 27       	eor	r27, r27
    2b66:	af 2d       	mov	r26, r15
    2b68:	9e 2d       	mov	r25, r14
    2b6a:	8d 2d       	mov	r24, r13
    2b6c:	09 c0       	rjmp	.+18     	; 0x2b80 <_ZN8SdVolume6fatPutEmm+0x7a>
    2b6e:	d7 01       	movw	r26, r14
    2b70:	c6 01       	movw	r24, r12
    2b72:	27 e0       	ldi	r18, 0x07	; 7
    2b74:	b6 95       	lsr	r27
    2b76:	a7 95       	ror	r26
    2b78:	97 95       	ror	r25
    2b7a:	87 95       	ror	r24
    2b7c:	2a 95       	dec	r18
    2b7e:	d1 f7       	brne	.-12     	; 0x2b74 <_ZN8SdVolume6fatPutEmm+0x6e>
    2b80:	4c 01       	movw	r8, r24
    2b82:	5d 01       	movw	r10, r26
    2b84:	84 0e       	add	r8, r20
    2b86:	95 1e       	adc	r9, r21
    2b88:	a6 1e       	adc	r10, r22
    2b8a:	b7 1e       	adc	r11, r23

  if (lba != cacheBlockNumber_) {
    2b8c:	80 91 ab 04 	lds	r24, 0x04AB
    2b90:	90 91 ac 04 	lds	r25, 0x04AC
    2b94:	a0 91 ad 04 	lds	r26, 0x04AD
    2b98:	b0 91 ae 04 	lds	r27, 0x04AE
    2b9c:	88 16       	cp	r8, r24
    2b9e:	99 06       	cpc	r9, r25
    2ba0:	aa 06       	cpc	r10, r26
    2ba2:	bb 06       	cpc	r11, r27
    2ba4:	41 f0       	breq	.+16     	; 0x2bb6 <_ZN8SdVolume6fatPutEmm+0xb0>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
    2ba6:	c5 01       	movw	r24, r10
    2ba8:	b4 01       	movw	r22, r8
    2baa:	40 e0       	ldi	r20, 0x00	; 0
    2bac:	0e 94 2e 14 	call	0x285c	; 0x285c <_ZN8SdVolume13cacheRawBlockEmh>
    2bb0:	88 23       	and	r24, r24
    2bb2:	09 f4       	brne	.+2      	; 0x2bb6 <_ZN8SdVolume6fatPutEmm+0xb0>
    2bb4:	40 c0       	rjmp	.+128    	; 0x2c36 <_ZN8SdVolume6fatPutEmm+0x130>
  }
  // store entry
  if (fatType_ == 16) {
    2bb6:	8f 89       	ldd	r24, Y+23	; 0x17
    2bb8:	80 31       	cpi	r24, 0x10	; 16
    2bba:	81 f4       	brne	.+32     	; 0x2bdc <_ZN8SdVolume6fatPutEmm+0xd6>
    cacheBuffer_.fat16[cluster & 0XFF] = value;
    2bbc:	8f ef       	ldi	r24, 0xFF	; 255
    2bbe:	90 e0       	ldi	r25, 0x00	; 0
    2bc0:	a0 e0       	ldi	r26, 0x00	; 0
    2bc2:	b0 e0       	ldi	r27, 0x00	; 0
    2bc4:	c8 22       	and	r12, r24
    2bc6:	d9 22       	and	r13, r25
    2bc8:	ea 22       	and	r14, r26
    2bca:	fb 22       	and	r15, r27
    2bcc:	f6 01       	movw	r30, r12
    2bce:	ee 0f       	add	r30, r30
    2bd0:	ff 1f       	adc	r31, r31
    2bd2:	e3 5a       	subi	r30, 0xA3	; 163
    2bd4:	fa 4f       	sbci	r31, 0xFA	; 250
    2bd6:	51 82       	std	Z+1, r5	; 0x01
    2bd8:	40 82       	st	Z, r4
    2bda:	13 c0       	rjmp	.+38     	; 0x2c02 <_ZN8SdVolume6fatPutEmm+0xfc>
  } else {
    cacheBuffer_.fat32[cluster & 0X7F] = value;
    2bdc:	8f e7       	ldi	r24, 0x7F	; 127
    2bde:	90 e0       	ldi	r25, 0x00	; 0
    2be0:	a0 e0       	ldi	r26, 0x00	; 0
    2be2:	b0 e0       	ldi	r27, 0x00	; 0
    2be4:	c8 22       	and	r12, r24
    2be6:	d9 22       	and	r13, r25
    2be8:	ea 22       	and	r14, r26
    2bea:	fb 22       	and	r15, r27
    2bec:	f6 01       	movw	r30, r12
    2bee:	ee 0f       	add	r30, r30
    2bf0:	ff 1f       	adc	r31, r31
    2bf2:	ee 0f       	add	r30, r30
    2bf4:	ff 1f       	adc	r31, r31
    2bf6:	e3 5a       	subi	r30, 0xA3	; 163
    2bf8:	fa 4f       	sbci	r31, 0xFA	; 250
    2bfa:	40 82       	st	Z, r4
    2bfc:	51 82       	std	Z+1, r5	; 0x01
    2bfe:	62 82       	std	Z+2, r6	; 0x02
    2c00:	73 82       	std	Z+3, r7	; 0x03
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {
           return clusterStartBlock(cluster) + blockOfCluster(position);}
  static uint8_t cacheFlush(void);
  static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
    2c02:	80 91 5a 05 	lds	r24, 0x055A
    2c06:	81 60       	ori	r24, 0x01	; 1
    2c08:	80 93 5a 05 	sts	0x055A, r24
  }
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
    2c0c:	8a 89       	ldd	r24, Y+18	; 0x12
    2c0e:	82 30       	cpi	r24, 0x02	; 2
    2c10:	80 f0       	brcs	.+32     	; 0x2c32 <_ZN8SdVolume6fatPutEmm+0x12c>
    2c12:	8d 81       	ldd	r24, Y+5	; 0x05
    2c14:	9e 81       	ldd	r25, Y+6	; 0x06
    2c16:	af 81       	ldd	r26, Y+7	; 0x07
    2c18:	b8 85       	ldd	r27, Y+8	; 0x08
    2c1a:	88 0d       	add	r24, r8
    2c1c:	99 1d       	adc	r25, r9
    2c1e:	aa 1d       	adc	r26, r10
    2c20:	bb 1d       	adc	r27, r11
    2c22:	80 93 56 05 	sts	0x0556, r24
    2c26:	90 93 57 05 	sts	0x0557, r25
    2c2a:	a0 93 58 05 	sts	0x0558, r26
    2c2e:	b0 93 59 05 	sts	0x0559, r27
  return true;
    2c32:	81 e0       	ldi	r24, 0x01	; 1
    2c34:	01 c0       	rjmp	.+2      	; 0x2c38 <_ZN8SdVolume6fatPutEmm+0x132>
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    2c36:	80 e0       	ldi	r24, 0x00	; 0
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
  return true;
}
    2c38:	df 91       	pop	r29
    2c3a:	cf 91       	pop	r28
    2c3c:	1f 91       	pop	r17
    2c3e:	0f 91       	pop	r16
    2c40:	ff 90       	pop	r15
    2c42:	ef 90       	pop	r14
    2c44:	df 90       	pop	r13
    2c46:	cf 90       	pop	r12
    2c48:	bf 90       	pop	r11
    2c4a:	af 90       	pop	r10
    2c4c:	9f 90       	pop	r9
    2c4e:	8f 90       	pop	r8
    2c50:	7f 90       	pop	r7
    2c52:	6f 90       	pop	r6
    2c54:	5f 90       	pop	r5
    2c56:	4f 90       	pop	r4
    2c58:	08 95       	ret

00002c5a <_ZN8SdVolume15allocContiguousEmPm>:
Sd2Card* SdVolume::sdCard_;          // pointer to SD card object
uint8_t  SdVolume::cacheDirty_ = 0;  // cacheFlush() will write block if true
uint32_t SdVolume::cacheMirrorBlock_ = 0;  // mirror  block for second FAT
//------------------------------------------------------------------------------
// find a contiguous group of clusters
uint8_t SdVolume::allocContiguous(uint32_t count, uint32_t* curCluster) {
    2c5a:	2f 92       	push	r2
    2c5c:	3f 92       	push	r3
    2c5e:	4f 92       	push	r4
    2c60:	5f 92       	push	r5
    2c62:	6f 92       	push	r6
    2c64:	7f 92       	push	r7
    2c66:	8f 92       	push	r8
    2c68:	9f 92       	push	r9
    2c6a:	af 92       	push	r10
    2c6c:	bf 92       	push	r11
    2c6e:	cf 92       	push	r12
    2c70:	df 92       	push	r13
    2c72:	ef 92       	push	r14
    2c74:	ff 92       	push	r15
    2c76:	0f 93       	push	r16
    2c78:	1f 93       	push	r17
    2c7a:	cf 93       	push	r28
    2c7c:	df 93       	push	r29
    2c7e:	cd b7       	in	r28, 0x3d	; 61
    2c80:	de b7       	in	r29, 0x3e	; 62
    2c82:	2f 97       	sbiw	r28, 0x0f	; 15
    2c84:	0f b6       	in	r0, 0x3f	; 63
    2c86:	f8 94       	cli
    2c88:	de bf       	out	0x3e, r29	; 62
    2c8a:	0f be       	out	0x3f, r0	; 63
    2c8c:	cd bf       	out	0x3d, r28	; 61
    2c8e:	1c 01       	movw	r2, r24
    2c90:	4c 87       	std	Y+12, r20	; 0x0c
    2c92:	5d 87       	std	Y+13, r21	; 0x0d
    2c94:	6e 87       	std	Y+14, r22	; 0x0e
    2c96:	7f 87       	std	Y+15, r23	; 0x0f
    2c98:	3b 87       	std	Y+11, r19	; 0x0b
    2c9a:	2a 87       	std	Y+10, r18	; 0x0a

  // flag to save place to start next search
  uint8_t setStart;

  // set search start cluster
  if (*curCluster) {
    2c9c:	d9 01       	movw	r26, r18
    2c9e:	4d 90       	ld	r4, X+
    2ca0:	5d 90       	ld	r5, X+
    2ca2:	6d 90       	ld	r6, X+
    2ca4:	7c 90       	ld	r7, X
    2ca6:	13 97       	sbiw	r26, 0x03	; 3
    2ca8:	41 14       	cp	r4, r1
    2caa:	51 04       	cpc	r5, r1
    2cac:	61 04       	cpc	r6, r1
    2cae:	71 04       	cpc	r7, r1
    2cb0:	31 f0       	breq	.+12     	; 0x2cbe <_ZN8SdVolume15allocContiguousEmPm+0x64>
    // try to make file contiguous
    bgnCluster = *curCluster + 1;
    2cb2:	08 94       	sec
    2cb4:	41 1c       	adc	r4, r1
    2cb6:	51 1c       	adc	r5, r1
    2cb8:	61 1c       	adc	r6, r1
    2cba:	71 1c       	adc	r7, r1
    2cbc:	10 c0       	rjmp	.+32     	; 0x2cde <_ZN8SdVolume15allocContiguousEmPm+0x84>

    // don't save new start location
    setStart = false;
  } else {
    // start at likely place for free cluster
    bgnCluster = allocSearchStart_;
    2cbe:	fc 01       	movw	r30, r24
    2cc0:	40 80       	ld	r4, Z
    2cc2:	51 80       	ldd	r5, Z+1	; 0x01
    2cc4:	62 80       	ldd	r6, Z+2	; 0x02
    2cc6:	73 80       	ldd	r7, Z+3	; 0x03

    // save next search start if one cluster
    setStart = 1 == count;
    2cc8:	f1 e0       	ldi	r31, 0x01	; 1
    2cca:	fd 83       	std	Y+5, r31	; 0x05
    2ccc:	2c 85       	ldd	r18, Y+12	; 0x0c
    2cce:	3d 85       	ldd	r19, Y+13	; 0x0d
    2cd0:	4e 85       	ldd	r20, Y+14	; 0x0e
    2cd2:	5f 85       	ldd	r21, Y+15	; 0x0f
    2cd4:	21 30       	cpi	r18, 0x01	; 1
    2cd6:	31 05       	cpc	r19, r1
    2cd8:	41 05       	cpc	r20, r1
    2cda:	51 05       	cpc	r21, r1
    2cdc:	09 f0       	breq	.+2      	; 0x2ce0 <_ZN8SdVolume15allocContiguousEmPm+0x86>
    2cde:	1d 82       	std	Y+5, r1	; 0x05
  }
  // end of group
  uint32_t endCluster = bgnCluster;

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;
    2ce0:	d1 01       	movw	r26, r2
    2ce2:	19 96       	adiw	r26, 0x09	; 9
    2ce4:	cd 90       	ld	r12, X+
    2ce6:	dd 90       	ld	r13, X+
    2ce8:	ed 90       	ld	r14, X+
    2cea:	fc 90       	ld	r15, X
    2cec:	1c 97       	sbiw	r26, 0x0c	; 12
    2cee:	08 94       	sec
    2cf0:	c1 1c       	adc	r12, r1
    2cf2:	d1 1c       	adc	r13, r1
    2cf4:	e1 1c       	adc	r14, r1
    2cf6:	f1 1c       	adc	r15, r1

    // save next search start if one cluster
    setStart = 1 == count;
  }
  // end of group
  uint32_t endCluster = bgnCluster;
    2cf8:	53 01       	movw	r10, r6
    2cfa:	42 01       	movw	r8, r4

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    2cfc:	1e 82       	std	Y+6, r1	; 0x06
    2cfe:	1f 82       	std	Y+7, r1	; 0x07
    2d00:	18 86       	std	Y+8, r1	; 0x08
    2d02:	19 86       	std	Y+9, r1	; 0x09
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    2d04:	f1 01       	movw	r30, r2
    2d06:	81 85       	ldd	r24, Z+9	; 0x09
    2d08:	92 85       	ldd	r25, Z+10	; 0x0a
    2d0a:	a3 85       	ldd	r26, Z+11	; 0x0b
    2d0c:	b4 85       	ldd	r27, Z+12	; 0x0c
    2d0e:	2e 81       	ldd	r18, Y+6	; 0x06
    2d10:	3f 81       	ldd	r19, Y+7	; 0x07
    2d12:	48 85       	ldd	r20, Y+8	; 0x08
    2d14:	59 85       	ldd	r21, Y+9	; 0x09
    2d16:	28 17       	cp	r18, r24
    2d18:	39 07       	cpc	r19, r25
    2d1a:	4a 07       	cpc	r20, r26
    2d1c:	5b 07       	cpc	r21, r27
    2d1e:	08 f0       	brcs	.+2      	; 0x2d22 <_ZN8SdVolume15allocContiguousEmPm+0xc8>
    2d20:	95 c0       	rjmp	.+298    	; 0x2e4c <_ZN8SdVolume15allocContiguousEmPm+0x1f2>

    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
    2d22:	c8 14       	cp	r12, r8
    2d24:	d9 04       	cpc	r13, r9
    2d26:	ea 04       	cpc	r14, r10
    2d28:	fb 04       	cpc	r15, r11
    2d2a:	50 f4       	brcc	.+20     	; 0x2d40 <_ZN8SdVolume15allocContiguousEmPm+0xe6>
      bgnCluster = endCluster = 2;
    2d2c:	42 e0       	ldi	r20, 0x02	; 2
    2d2e:	84 2e       	mov	r8, r20
    2d30:	91 2c       	mov	r9, r1
    2d32:	a1 2c       	mov	r10, r1
    2d34:	b1 2c       	mov	r11, r1
    2d36:	52 e0       	ldi	r21, 0x02	; 2
    2d38:	45 2e       	mov	r4, r21
    2d3a:	51 2c       	mov	r5, r1
    2d3c:	61 2c       	mov	r6, r1
    2d3e:	71 2c       	mov	r7, r1
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;
    2d40:	c1 01       	movw	r24, r2
    2d42:	b5 01       	movw	r22, r10
    2d44:	a4 01       	movw	r20, r8
    2d46:	9e 01       	movw	r18, r28
    2d48:	2f 5f       	subi	r18, 0xFF	; 255
    2d4a:	3f 4f       	sbci	r19, 0xFF	; 255
    2d4c:	0e 94 92 14 	call	0x2924	; 0x2924 <_ZNK8SdVolume6fatGetEmPm>
    2d50:	88 23       	and	r24, r24
    2d52:	09 f4       	brne	.+2      	; 0x2d56 <_ZN8SdVolume15allocContiguousEmPm+0xfc>
    2d54:	7b c0       	rjmp	.+246    	; 0x2e4c <_ZN8SdVolume15allocContiguousEmPm+0x1f2>

    if (f != 0) {
    2d56:	49 81       	ldd	r20, Y+1	; 0x01
    2d58:	5a 81       	ldd	r21, Y+2	; 0x02
    2d5a:	6b 81       	ldd	r22, Y+3	; 0x03
    2d5c:	7c 81       	ldd	r23, Y+4	; 0x04
    2d5e:	d5 01       	movw	r26, r10
    2d60:	c4 01       	movw	r24, r8
    2d62:	01 96       	adiw	r24, 0x01	; 1
    2d64:	a1 1d       	adc	r26, r1
    2d66:	b1 1d       	adc	r27, r1
    2d68:	41 15       	cp	r20, r1
    2d6a:	51 05       	cpc	r21, r1
    2d6c:	61 05       	cpc	r22, r1
    2d6e:	71 05       	cpc	r23, r1
    2d70:	19 f0       	breq	.+6      	; 0x2d78 <_ZN8SdVolume15allocContiguousEmPm+0x11e>
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    2d72:	2c 01       	movw	r4, r24
    2d74:	3d 01       	movw	r6, r26
    2d76:	0d c0       	rjmp	.+26     	; 0x2d92 <_ZN8SdVolume15allocContiguousEmPm+0x138>
    } else if ((endCluster - bgnCluster + 1) == count) {
    2d78:	84 19       	sub	r24, r4
    2d7a:	95 09       	sbc	r25, r5
    2d7c:	a6 09       	sbc	r26, r6
    2d7e:	b7 09       	sbc	r27, r7
    2d80:	2c 85       	ldd	r18, Y+12	; 0x0c
    2d82:	3d 85       	ldd	r19, Y+13	; 0x0d
    2d84:	4e 85       	ldd	r20, Y+14	; 0x0e
    2d86:	5f 85       	ldd	r21, Y+15	; 0x0f
    2d88:	82 17       	cp	r24, r18
    2d8a:	93 07       	cpc	r25, r19
    2d8c:	a4 07       	cpc	r26, r20
    2d8e:	b5 07       	cpc	r27, r21
    2d90:	89 f0       	breq	.+34     	; 0x2db4 <_ZN8SdVolume15allocContiguousEmPm+0x15a>

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    2d92:	8e 81       	ldd	r24, Y+6	; 0x06
    2d94:	9f 81       	ldd	r25, Y+7	; 0x07
    2d96:	a8 85       	ldd	r26, Y+8	; 0x08
    2d98:	b9 85       	ldd	r27, Y+9	; 0x09
    2d9a:	01 96       	adiw	r24, 0x01	; 1
    2d9c:	a1 1d       	adc	r26, r1
    2d9e:	b1 1d       	adc	r27, r1
    2da0:	8e 83       	std	Y+6, r24	; 0x06
    2da2:	9f 83       	std	Y+7, r25	; 0x07
    2da4:	a8 87       	std	Y+8, r26	; 0x08
    2da6:	b9 87       	std	Y+9, r27	; 0x09
    2da8:	08 94       	sec
    2daa:	81 1c       	adc	r8, r1
    2dac:	91 1c       	adc	r9, r1
    2dae:	a1 1c       	adc	r10, r1
    2db0:	b1 1c       	adc	r11, r1
    2db2:	a8 cf       	rjmp	.-176    	; 0x2d04 <_ZN8SdVolume15allocContiguousEmPm+0xaa>
  static uint8_t cacheZeroBlock(uint32_t blockNumber);
  uint8_t chainSize(uint32_t beginCluster, uint32_t* size) const;
  uint8_t fatGet(uint32_t cluster, uint32_t* value) const;
  uint8_t fatPut(uint32_t cluster, uint32_t value);
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    2db4:	c1 01       	movw	r24, r2
    2db6:	a4 01       	movw	r20, r8
    2db8:	b5 01       	movw	r22, r10
    2dba:	0f ef       	ldi	r16, 0xFF	; 255
    2dbc:	1f ef       	ldi	r17, 0xFF	; 255
    2dbe:	2f ef       	ldi	r18, 0xFF	; 255
    2dc0:	3f e0       	ldi	r19, 0x0F	; 15
    2dc2:	0e 94 83 15 	call	0x2b06	; 0x2b06 <_ZN8SdVolume6fatPutEmm>
      // done - found space
      break;
    }
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;
    2dc6:	88 23       	and	r24, r24
    2dc8:	91 f4       	brne	.+36     	; 0x2dee <_ZN8SdVolume15allocContiguousEmPm+0x194>
    2dca:	40 c0       	rjmp	.+128    	; 0x2e4c <_ZN8SdVolume15allocContiguousEmPm+0x1f2>

  // link clusters
  while (endCluster > bgnCluster) {
    if (!fatPut(endCluster - 1, endCluster)) return false;
    2dcc:	68 01       	movw	r12, r16
    2dce:	79 01       	movw	r14, r18
    2dd0:	08 94       	sec
    2dd2:	c1 08       	sbc	r12, r1
    2dd4:	d1 08       	sbc	r13, r1
    2dd6:	e1 08       	sbc	r14, r1
    2dd8:	f1 08       	sbc	r15, r1
    2dda:	c1 01       	movw	r24, r2
    2ddc:	b7 01       	movw	r22, r14
    2dde:	a6 01       	movw	r20, r12
    2de0:	0e 94 83 15 	call	0x2b06	; 0x2b06 <_ZN8SdVolume6fatPutEmm>
    2de4:	88 23       	and	r24, r24
    2de6:	91 f1       	breq	.+100    	; 0x2e4c <_ZN8SdVolume15allocContiguousEmPm+0x1f2>
    endCluster--;
    2de8:	97 01       	movw	r18, r14
    2dea:	86 01       	movw	r16, r12
    2dec:	02 c0       	rjmp	.+4      	; 0x2df2 <_ZN8SdVolume15allocContiguousEmPm+0x198>
    2dee:	95 01       	movw	r18, r10
    2df0:	84 01       	movw	r16, r8
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;

  // link clusters
  while (endCluster > bgnCluster) {
    2df2:	40 16       	cp	r4, r16
    2df4:	51 06       	cpc	r5, r17
    2df6:	62 06       	cpc	r6, r18
    2df8:	73 06       	cpc	r7, r19
    2dfa:	40 f3       	brcs	.-48     	; 0x2dcc <_ZN8SdVolume15allocContiguousEmPm+0x172>
    if (!fatPut(endCluster - 1, endCluster)) return false;
    endCluster--;
  }
  if (*curCluster != 0) {
    2dfc:	aa 85       	ldd	r26, Y+10	; 0x0a
    2dfe:	bb 85       	ldd	r27, Y+11	; 0x0b
    2e00:	4d 91       	ld	r20, X+
    2e02:	5d 91       	ld	r21, X+
    2e04:	6d 91       	ld	r22, X+
    2e06:	7c 91       	ld	r23, X
    2e08:	13 97       	sbiw	r26, 0x03	; 3
    2e0a:	41 15       	cp	r20, r1
    2e0c:	51 05       	cpc	r21, r1
    2e0e:	61 05       	cpc	r22, r1
    2e10:	71 05       	cpc	r23, r1
    2e12:	39 f0       	breq	.+14     	; 0x2e22 <_ZN8SdVolume15allocContiguousEmPm+0x1c8>
    // connect chains
    if (!fatPut(*curCluster, bgnCluster)) return false;
    2e14:	c1 01       	movw	r24, r2
    2e16:	93 01       	movw	r18, r6
    2e18:	82 01       	movw	r16, r4
    2e1a:	0e 94 83 15 	call	0x2b06	; 0x2b06 <_ZN8SdVolume6fatPutEmm>
    2e1e:	88 23       	and	r24, r24
    2e20:	a9 f0       	breq	.+42     	; 0x2e4c <_ZN8SdVolume15allocContiguousEmPm+0x1f2>
  }
  // return first cluster number to caller
  *curCluster = bgnCluster;
    2e22:	ea 85       	ldd	r30, Y+10	; 0x0a
    2e24:	fb 85       	ldd	r31, Y+11	; 0x0b
    2e26:	40 82       	st	Z, r4
    2e28:	51 82       	std	Z+1, r5	; 0x01
    2e2a:	62 82       	std	Z+2, r6	; 0x02
    2e2c:	73 82       	std	Z+3, r7	; 0x03

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;
    2e2e:	fd 81       	ldd	r31, Y+5	; 0x05
    2e30:	ff 23       	and	r31, r31
    2e32:	71 f0       	breq	.+28     	; 0x2e50 <_ZN8SdVolume15allocContiguousEmPm+0x1f6>
    2e34:	08 94       	sec
    2e36:	41 1c       	adc	r4, r1
    2e38:	51 1c       	adc	r5, r1
    2e3a:	61 1c       	adc	r6, r1
    2e3c:	71 1c       	adc	r7, r1
    2e3e:	d1 01       	movw	r26, r2
    2e40:	4d 92       	st	X+, r4
    2e42:	5d 92       	st	X+, r5
    2e44:	6d 92       	st	X+, r6
    2e46:	7c 92       	st	X, r7
    2e48:	13 97       	sbiw	r26, 0x03	; 3
    2e4a:	02 c0       	rjmp	.+4      	; 0x2e50 <_ZN8SdVolume15allocContiguousEmPm+0x1f6>
    if (!fatPut(endCluster - 1, endCluster)) return false;
    endCluster--;
  }
  if (*curCluster != 0) {
    // connect chains
    if (!fatPut(*curCluster, bgnCluster)) return false;
    2e4c:	80 e0       	ldi	r24, 0x00	; 0
    2e4e:	01 c0       	rjmp	.+2      	; 0x2e52 <_ZN8SdVolume15allocContiguousEmPm+0x1f8>
  *curCluster = bgnCluster;

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;

  return true;
    2e50:	81 e0       	ldi	r24, 0x01	; 1
}
    2e52:	2f 96       	adiw	r28, 0x0f	; 15
    2e54:	0f b6       	in	r0, 0x3f	; 63
    2e56:	f8 94       	cli
    2e58:	de bf       	out	0x3e, r29	; 62
    2e5a:	0f be       	out	0x3f, r0	; 63
    2e5c:	cd bf       	out	0x3d, r28	; 61
    2e5e:	df 91       	pop	r29
    2e60:	cf 91       	pop	r28
    2e62:	1f 91       	pop	r17
    2e64:	0f 91       	pop	r16
    2e66:	ff 90       	pop	r15
    2e68:	ef 90       	pop	r14
    2e6a:	df 90       	pop	r13
    2e6c:	cf 90       	pop	r12
    2e6e:	bf 90       	pop	r11
    2e70:	af 90       	pop	r10
    2e72:	9f 90       	pop	r9
    2e74:	8f 90       	pop	r8
    2e76:	7f 90       	pop	r7
    2e78:	6f 90       	pop	r6
    2e7a:	5f 90       	pop	r5
    2e7c:	4f 90       	pop	r4
    2e7e:	3f 90       	pop	r3
    2e80:	2f 90       	pop	r2
    2e82:	08 95       	ret

00002e84 <_ZN8SdVolume9freeChainEm>:
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
  return true;
}
//------------------------------------------------------------------------------
// free a cluster chain
uint8_t SdVolume::freeChain(uint32_t cluster) {
    2e84:	af 92       	push	r10
    2e86:	bf 92       	push	r11
    2e88:	cf 92       	push	r12
    2e8a:	df 92       	push	r13
    2e8c:	ef 92       	push	r14
    2e8e:	ff 92       	push	r15
    2e90:	0f 93       	push	r16
    2e92:	1f 93       	push	r17
    2e94:	cf 93       	push	r28
    2e96:	df 93       	push	r29
    2e98:	00 d0       	rcall	.+0      	; 0x2e9a <_ZN8SdVolume9freeChainEm+0x16>
    2e9a:	0f 92       	push	r0
    2e9c:	cd b7       	in	r28, 0x3d	; 61
    2e9e:	de b7       	in	r29, 0x3e	; 62
    2ea0:	5c 01       	movw	r10, r24
    2ea2:	6a 01       	movw	r12, r20
    2ea4:	7b 01       	movw	r14, r22
  // clear free cluster location
  allocSearchStart_ = 2;
    2ea6:	82 e0       	ldi	r24, 0x02	; 2
    2ea8:	90 e0       	ldi	r25, 0x00	; 0
    2eaa:	a0 e0       	ldi	r26, 0x00	; 0
    2eac:	b0 e0       	ldi	r27, 0x00	; 0
    2eae:	f5 01       	movw	r30, r10
    2eb0:	80 83       	st	Z, r24
    2eb2:	91 83       	std	Z+1, r25	; 0x01
    2eb4:	a2 83       	std	Z+2, r26	; 0x02
    2eb6:	b3 83       	std	Z+3, r27	; 0x03

  do {
    uint32_t next;
    if (!fatGet(cluster, &next)) return false;
    2eb8:	c5 01       	movw	r24, r10
    2eba:	b7 01       	movw	r22, r14
    2ebc:	a6 01       	movw	r20, r12
    2ebe:	9e 01       	movw	r18, r28
    2ec0:	2f 5f       	subi	r18, 0xFF	; 255
    2ec2:	3f 4f       	sbci	r19, 0xFF	; 255
    2ec4:	0e 94 92 14 	call	0x2924	; 0x2924 <_ZNK8SdVolume6fatGetEmPm>
    2ec8:	88 23       	and	r24, r24
    2eca:	11 f1       	breq	.+68     	; 0x2f10 <_ZN8SdVolume9freeChainEm+0x8c>

    // free cluster
    if (!fatPut(cluster, 0)) return false;
    2ecc:	c5 01       	movw	r24, r10
    2ece:	b7 01       	movw	r22, r14
    2ed0:	a6 01       	movw	r20, r12
    2ed2:	00 e0       	ldi	r16, 0x00	; 0
    2ed4:	10 e0       	ldi	r17, 0x00	; 0
    2ed6:	98 01       	movw	r18, r16
    2ed8:	0e 94 83 15 	call	0x2b06	; 0x2b06 <_ZN8SdVolume6fatPutEmm>
    2edc:	88 23       	and	r24, r24
    2ede:	c1 f0       	breq	.+48     	; 0x2f10 <_ZN8SdVolume9freeChainEm+0x8c>

    cluster = next;
    2ee0:	c9 80       	ldd	r12, Y+1	; 0x01
    2ee2:	da 80       	ldd	r13, Y+2	; 0x02
    2ee4:	eb 80       	ldd	r14, Y+3	; 0x03
    2ee6:	fc 80       	ldd	r15, Y+4	; 0x04
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    2ee8:	f5 01       	movw	r30, r10
    2eea:	87 89       	ldd	r24, Z+23	; 0x17
    2eec:	80 31       	cpi	r24, 0x10	; 16
    2eee:	29 f4       	brne	.+10     	; 0x2efa <_ZN8SdVolume9freeChainEm+0x76>
    2ef0:	88 ef       	ldi	r24, 0xF8	; 248
    2ef2:	9f ef       	ldi	r25, 0xFF	; 255
    2ef4:	a0 e0       	ldi	r26, 0x00	; 0
    2ef6:	b0 e0       	ldi	r27, 0x00	; 0
    2ef8:	04 c0       	rjmp	.+8      	; 0x2f02 <_ZN8SdVolume9freeChainEm+0x7e>
    2efa:	88 ef       	ldi	r24, 0xF8	; 248
    2efc:	9f ef       	ldi	r25, 0xFF	; 255
    2efe:	af ef       	ldi	r26, 0xFF	; 255
    2f00:	bf e0       	ldi	r27, 0x0F	; 15
// free a cluster chain
uint8_t SdVolume::freeChain(uint32_t cluster) {
  // clear free cluster location
  allocSearchStart_ = 2;

  do {
    2f02:	c8 16       	cp	r12, r24
    2f04:	d9 06       	cpc	r13, r25
    2f06:	ea 06       	cpc	r14, r26
    2f08:	fb 06       	cpc	r15, r27
    2f0a:	b0 f2       	brcs	.-84     	; 0x2eb8 <_ZN8SdVolume9freeChainEm+0x34>
    if (!fatPut(cluster, 0)) return false;

    cluster = next;
  } while (!isEOC(cluster));

  return true;
    2f0c:	81 e0       	ldi	r24, 0x01	; 1
    2f0e:	01 c0       	rjmp	.+2      	; 0x2f12 <_ZN8SdVolume9freeChainEm+0x8e>
  do {
    uint32_t next;
    if (!fatGet(cluster, &next)) return false;

    // free cluster
    if (!fatPut(cluster, 0)) return false;
    2f10:	80 e0       	ldi	r24, 0x00	; 0

    cluster = next;
  } while (!isEOC(cluster));

  return true;
}
    2f12:	0f 90       	pop	r0
    2f14:	0f 90       	pop	r0
    2f16:	0f 90       	pop	r0
    2f18:	0f 90       	pop	r0
    2f1a:	df 91       	pop	r29
    2f1c:	cf 91       	pop	r28
    2f1e:	1f 91       	pop	r17
    2f20:	0f 91       	pop	r16
    2f22:	ff 90       	pop	r15
    2f24:	ef 90       	pop	r14
    2f26:	df 90       	pop	r13
    2f28:	cf 90       	pop	r12
    2f2a:	bf 90       	pop	r11
    2f2c:	af 90       	pop	r10
    2f2e:	08 95       	ret

00002f30 <_ZN8SdVolume4initEP7Sd2Cardh>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.  Reasons for
 * failure include not finding a valid partition, not finding a valid
 * FAT file system in the specified partition or an I/O error.
 */
uint8_t SdVolume::init(Sd2Card* dev, uint8_t part) {
    2f30:	6f 92       	push	r6
    2f32:	7f 92       	push	r7
    2f34:	8f 92       	push	r8
    2f36:	9f 92       	push	r9
    2f38:	af 92       	push	r10
    2f3a:	bf 92       	push	r11
    2f3c:	cf 92       	push	r12
    2f3e:	df 92       	push	r13
    2f40:	ef 92       	push	r14
    2f42:	ff 92       	push	r15
    2f44:	1f 93       	push	r17
    2f46:	cf 93       	push	r28
    2f48:	df 93       	push	r29
    2f4a:	ec 01       	movw	r28, r24
    2f4c:	14 2f       	mov	r17, r20
  uint32_t volumeStartBlock = 0;
  sdCard_ = dev;
    2f4e:	70 93 5c 05 	sts	0x055C, r23
    2f52:	60 93 5b 05 	sts	0x055B, r22
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    2f56:	44 23       	and	r20, r20
    2f58:	81 f1       	breq	.+96     	; 0x2fba <_ZN8SdVolume4initEP7Sd2Cardh+0x8a>
    if (part > 4)return false;
    2f5a:	45 30       	cpi	r20, 0x05	; 5
    2f5c:	08 f0       	brcs	.+2      	; 0x2f60 <_ZN8SdVolume4initEP7Sd2Cardh+0x30>
    2f5e:	05 c1       	rjmp	.+522    	; 0x316a <_ZN8SdVolume4initEP7Sd2Cardh+0x23a>
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    2f60:	60 e0       	ldi	r22, 0x00	; 0
    2f62:	70 e0       	ldi	r23, 0x00	; 0
    2f64:	cb 01       	movw	r24, r22
    2f66:	40 e0       	ldi	r20, 0x00	; 0
    2f68:	0e 94 2e 14 	call	0x285c	; 0x285c <_ZN8SdVolume13cacheRawBlockEmh>
    2f6c:	88 23       	and	r24, r24
    2f6e:	09 f4       	brne	.+2      	; 0x2f72 <_ZN8SdVolume4initEP7Sd2Cardh+0x42>
    2f70:	fc c0       	rjmp	.+504    	; 0x316a <_ZN8SdVolume4initEP7Sd2Cardh+0x23a>
    part_t* p = &cacheBuffer_.mbr.part[part-1];
    2f72:	e1 2f       	mov	r30, r17
    2f74:	f0 e0       	ldi	r31, 0x00	; 0
    2f76:	a4 e0       	ldi	r26, 0x04	; 4
    2f78:	ee 0f       	add	r30, r30
    2f7a:	ff 1f       	adc	r31, r31
    2f7c:	aa 95       	dec	r26
    2f7e:	e1 f7       	brne	.-8      	; 0x2f78 <_ZN8SdVolume4initEP7Sd2Cardh+0x48>
    2f80:	e5 5f       	subi	r30, 0xF5	; 245
    2f82:	f8 4f       	sbci	r31, 0xF8	; 248
    if ((p->boot & 0X7F) !=0  ||
    2f84:	80 81       	ld	r24, Z
    2f86:	90 e0       	ldi	r25, 0x00	; 0
    2f88:	8f 77       	andi	r24, 0x7F	; 127
    2f8a:	90 70       	andi	r25, 0x00	; 0
    2f8c:	00 97       	sbiw	r24, 0x00	; 0
    2f8e:	09 f0       	breq	.+2      	; 0x2f92 <_ZN8SdVolume4initEP7Sd2Cardh+0x62>
    2f90:	ec c0       	rjmp	.+472    	; 0x316a <_ZN8SdVolume4initEP7Sd2Cardh+0x23a>
    2f92:	84 85       	ldd	r24, Z+12	; 0x0c
    2f94:	95 85       	ldd	r25, Z+13	; 0x0d
    2f96:	a6 85       	ldd	r26, Z+14	; 0x0e
    2f98:	b7 85       	ldd	r27, Z+15	; 0x0f
    2f9a:	84 36       	cpi	r24, 0x64	; 100
    2f9c:	91 05       	cpc	r25, r1
    2f9e:	a1 05       	cpc	r26, r1
    2fa0:	b1 05       	cpc	r27, r1
    2fa2:	08 f4       	brcc	.+2      	; 0x2fa6 <_ZN8SdVolume4initEP7Sd2Cardh+0x76>
    2fa4:	e2 c0       	rjmp	.+452    	; 0x316a <_ZN8SdVolume4initEP7Sd2Cardh+0x23a>
    2fa6:	80 84       	ldd	r8, Z+8	; 0x08
    2fa8:	91 84       	ldd	r9, Z+9	; 0x09
    2faa:	a2 84       	ldd	r10, Z+10	; 0x0a
    2fac:	b3 84       	ldd	r11, Z+11	; 0x0b
    2fae:	81 14       	cp	r8, r1
    2fb0:	91 04       	cpc	r9, r1
    2fb2:	a1 04       	cpc	r10, r1
    2fb4:	b1 04       	cpc	r11, r1
    2fb6:	21 f4       	brne	.+8      	; 0x2fc0 <_ZN8SdVolume4initEP7Sd2Cardh+0x90>
    2fb8:	d8 c0       	rjmp	.+432    	; 0x316a <_ZN8SdVolume4initEP7Sd2Cardh+0x23a>
 * the value zero, false, is returned for failure.  Reasons for
 * failure include not finding a valid partition, not finding a valid
 * FAT file system in the specified partition or an I/O error.
 */
uint8_t SdVolume::init(Sd2Card* dev, uint8_t part) {
  uint32_t volumeStartBlock = 0;
    2fba:	88 24       	eor	r8, r8
    2fbc:	99 24       	eor	r9, r9
    2fbe:	54 01       	movw	r10, r8
      // not a valid partition
      return false;
    }
    volumeStartBlock = p->firstSector;
  }
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    2fc0:	c5 01       	movw	r24, r10
    2fc2:	b4 01       	movw	r22, r8
    2fc4:	40 e0       	ldi	r20, 0x00	; 0
    2fc6:	0e 94 2e 14 	call	0x285c	; 0x285c <_ZN8SdVolume13cacheRawBlockEmh>
    2fca:	88 23       	and	r24, r24
    2fcc:	09 f4       	brne	.+2      	; 0x2fd0 <_ZN8SdVolume4initEP7Sd2Cardh+0xa0>
    2fce:	cd c0       	rjmp	.+410    	; 0x316a <_ZN8SdVolume4initEP7Sd2Cardh+0x23a>
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
    2fd0:	80 91 68 05 	lds	r24, 0x0568
    2fd4:	90 91 69 05 	lds	r25, 0x0569
    2fd8:	22 e0       	ldi	r18, 0x02	; 2
    2fda:	80 30       	cpi	r24, 0x00	; 0
    2fdc:	92 07       	cpc	r25, r18
    2fde:	09 f0       	breq	.+2      	; 0x2fe2 <_ZN8SdVolume4initEP7Sd2Cardh+0xb2>
    2fe0:	c4 c0       	rjmp	.+392    	; 0x316a <_ZN8SdVolume4initEP7Sd2Cardh+0x23a>
    2fe2:	30 91 6d 05 	lds	r19, 0x056D
    2fe6:	33 23       	and	r19, r19
    2fe8:	09 f4       	brne	.+2      	; 0x2fec <_ZN8SdVolume4initEP7Sd2Cardh+0xbc>
    2fea:	bf c0       	rjmp	.+382    	; 0x316a <_ZN8SdVolume4initEP7Sd2Cardh+0x23a>
    2fec:	80 91 6b 05 	lds	r24, 0x056B
    2ff0:	90 91 6c 05 	lds	r25, 0x056C
    2ff4:	00 97       	sbiw	r24, 0x00	; 0
    2ff6:	09 f4       	brne	.+2      	; 0x2ffa <_ZN8SdVolume4initEP7Sd2Cardh+0xca>
    2ff8:	b8 c0       	rjmp	.+368    	; 0x316a <_ZN8SdVolume4initEP7Sd2Cardh+0x23a>
    2ffa:	20 91 6a 05 	lds	r18, 0x056A
    2ffe:	22 23       	and	r18, r18
    3000:	09 f4       	brne	.+2      	; 0x3004 <_ZN8SdVolume4initEP7Sd2Cardh+0xd4>
    3002:	b3 c0       	rjmp	.+358    	; 0x316a <_ZN8SdVolume4initEP7Sd2Cardh+0x23a>
    bpb->reservedSectorCount == 0 ||
    bpb->sectorsPerCluster == 0) {
       // not valid FAT volume
      return false;
  }
  fatCount_ = bpb->fatCount;
    3004:	3a 8b       	std	Y+18, r19	; 0x12
  blocksPerCluster_ = bpb->sectorsPerCluster;
    3006:	2c 83       	std	Y+4, r18	; 0x04

  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
    3008:	1d 86       	std	Y+13, r1	; 0x0d
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    300a:	30 e0       	ldi	r19, 0x00	; 0
    300c:	41 e0       	ldi	r20, 0x01	; 1
    300e:	50 e0       	ldi	r21, 0x00	; 0
    3010:	06 c0       	rjmp	.+12     	; 0x301e <_ZN8SdVolume4initEP7Sd2Cardh+0xee>
    // error if not power of 2
    if (clusterSizeShift_++ > 7) return false;
    3012:	81 2f       	mov	r24, r17
    3014:	8f 5f       	subi	r24, 0xFF	; 255
    3016:	8d 87       	std	Y+13, r24	; 0x0d
    3018:	18 30       	cpi	r17, 0x08	; 8
    301a:	08 f0       	brcs	.+2      	; 0x301e <_ZN8SdVolume4initEP7Sd2Cardh+0xee>
    301c:	a6 c0       	rjmp	.+332    	; 0x316a <_ZN8SdVolume4initEP7Sd2Cardh+0x23a>
  fatCount_ = bpb->fatCount;
  blocksPerCluster_ = bpb->sectorsPerCluster;

  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    301e:	1d 85       	ldd	r17, Y+13	; 0x0d
    3020:	ca 01       	movw	r24, r20
    3022:	01 2e       	mov	r0, r17
    3024:	02 c0       	rjmp	.+4      	; 0x302a <_ZN8SdVolume4initEP7Sd2Cardh+0xfa>
    3026:	88 0f       	add	r24, r24
    3028:	99 1f       	adc	r25, r25
    302a:	0a 94       	dec	r0
    302c:	e2 f7       	brpl	.-8      	; 0x3026 <_ZN8SdVolume4initEP7Sd2Cardh+0xf6>
    302e:	28 17       	cp	r18, r24
    3030:	39 07       	cpc	r19, r25
    3032:	79 f7       	brne	.-34     	; 0x3012 <_ZN8SdVolume4initEP7Sd2Cardh+0xe2>
    // error if not power of 2
    if (clusterSizeShift_++ > 7) return false;
  }
  blocksPerFat_ = bpb->sectorsPerFat16 ?
                    bpb->sectorsPerFat16 : bpb->sectorsPerFat32;
    3034:	80 91 73 05 	lds	r24, 0x0573
    3038:	90 91 74 05 	lds	r25, 0x0574
    303c:	00 97       	sbiw	r24, 0x00	; 0
    303e:	19 f0       	breq	.+6      	; 0x3046 <_ZN8SdVolume4initEP7Sd2Cardh+0x116>
    3040:	a0 e0       	ldi	r26, 0x00	; 0
    3042:	b0 e0       	ldi	r27, 0x00	; 0
    3044:	08 c0       	rjmp	.+16     	; 0x3056 <_ZN8SdVolume4initEP7Sd2Cardh+0x126>
    3046:	80 91 81 05 	lds	r24, 0x0581
    304a:	90 91 82 05 	lds	r25, 0x0582
    304e:	a0 91 83 05 	lds	r26, 0x0583
    3052:	b0 91 84 05 	lds	r27, 0x0584
    3056:	8d 83       	std	Y+5, r24	; 0x05
    3058:	9e 83       	std	Y+6, r25	; 0x06
    305a:	af 83       	std	Y+7, r26	; 0x07
    305c:	b8 87       	std	Y+8, r27	; 0x08

  fatStartBlock_ = volumeStartBlock + bpb->reservedSectorCount;
    305e:	c0 90 6b 05 	lds	r12, 0x056B
    3062:	d0 90 6c 05 	lds	r13, 0x056C
    3066:	ee 24       	eor	r14, r14
    3068:	ff 24       	eor	r15, r15
    306a:	c8 0c       	add	r12, r8
    306c:	d9 1c       	adc	r13, r9
    306e:	ea 1c       	adc	r14, r10
    3070:	fb 1c       	adc	r15, r11
    3072:	cb 8a       	std	Y+19, r12	; 0x13
    3074:	dc 8a       	std	Y+20, r13	; 0x14
    3076:	ed 8a       	std	Y+21, r14	; 0x15
    3078:	fe 8a       	std	Y+22, r15	; 0x16

  // count for FAT16 zero for FAT32
  rootDirEntryCount_ = bpb->rootDirEntryCount;
    307a:	60 90 6e 05 	lds	r6, 0x056E
    307e:	70 90 6f 05 	lds	r7, 0x056F
    3082:	79 8e       	std	Y+25, r7	; 0x19
    3084:	68 8e       	std	Y+24, r6	; 0x18

  // directory start for FAT16 dataStart for FAT32
  rootDirStart_ = fatStartBlock_ + bpb->fatCount * blocksPerFat_;
    3086:	20 91 6d 05 	lds	r18, 0x056D
    308a:	30 e0       	ldi	r19, 0x00	; 0
    308c:	40 e0       	ldi	r20, 0x00	; 0
    308e:	50 e0       	ldi	r21, 0x00	; 0
    3090:	bc 01       	movw	r22, r24
    3092:	cd 01       	movw	r24, r26
    3094:	0e 94 d5 21 	call	0x43aa	; 0x43aa <__mulsi3>
    3098:	dc 01       	movw	r26, r24
    309a:	cb 01       	movw	r24, r22
    309c:	8c 0d       	add	r24, r12
    309e:	9d 1d       	adc	r25, r13
    30a0:	ae 1d       	adc	r26, r14
    30a2:	bf 1d       	adc	r27, r15
    30a4:	8a 8f       	std	Y+26, r24	; 0x1a
    30a6:	9b 8f       	std	Y+27, r25	; 0x1b
    30a8:	ac 8f       	std	Y+28, r26	; 0x1c
    30aa:	bd 8f       	std	Y+29, r27	; 0x1d

  // data start for FAT16 and FAT32
  dataStartBlock_ = rootDirStart_ + ((32 * bpb->rootDirEntryCount + 511)/512);
    30ac:	a3 01       	movw	r20, r6
    30ae:	e5 e0       	ldi	r30, 0x05	; 5
    30b0:	44 0f       	add	r20, r20
    30b2:	55 1f       	adc	r21, r21
    30b4:	ea 95       	dec	r30
    30b6:	e1 f7       	brne	.-8      	; 0x30b0 <_ZN8SdVolume4initEP7Sd2Cardh+0x180>
    30b8:	41 50       	subi	r20, 0x01	; 1
    30ba:	5e 4f       	sbci	r21, 0xFE	; 254
    30bc:	45 2f       	mov	r20, r21
    30be:	55 27       	eor	r21, r21
    30c0:	46 95       	lsr	r20
    30c2:	60 e0       	ldi	r22, 0x00	; 0
    30c4:	70 e0       	ldi	r23, 0x00	; 0
    30c6:	48 0f       	add	r20, r24
    30c8:	59 1f       	adc	r21, r25
    30ca:	6a 1f       	adc	r22, r26
    30cc:	7b 1f       	adc	r23, r27
    30ce:	4e 87       	std	Y+14, r20	; 0x0e
    30d0:	5f 87       	std	Y+15, r21	; 0x0f
    30d2:	68 8b       	std	Y+16, r22	; 0x10
    30d4:	79 8b       	std	Y+17, r23	; 0x11

  // total blocks for FAT16 or FAT32
  uint32_t totalBlocks = bpb->totalSectors16 ?
                           bpb->totalSectors16 : bpb->totalSectors32;
    30d6:	80 91 70 05 	lds	r24, 0x0570
    30da:	90 91 71 05 	lds	r25, 0x0571
    30de:	00 97       	sbiw	r24, 0x00	; 0
    30e0:	19 f0       	breq	.+6      	; 0x30e8 <_ZN8SdVolume4initEP7Sd2Cardh+0x1b8>
    30e2:	a0 e0       	ldi	r26, 0x00	; 0
    30e4:	b0 e0       	ldi	r27, 0x00	; 0
    30e6:	08 c0       	rjmp	.+16     	; 0x30f8 <_ZN8SdVolume4initEP7Sd2Cardh+0x1c8>
    30e8:	80 91 7d 05 	lds	r24, 0x057D
    30ec:	90 91 7e 05 	lds	r25, 0x057E
    30f0:	a0 91 7f 05 	lds	r26, 0x057F
    30f4:	b0 91 80 05 	lds	r27, 0x0580
  // total data blocks
  clusterCount_ = totalBlocks - (dataStartBlock_ - volumeStartBlock);
    30f8:	84 1a       	sub	r8, r20
    30fa:	95 0a       	sbc	r9, r21
    30fc:	a6 0a       	sbc	r10, r22
    30fe:	b7 0a       	sbc	r11, r23
    3100:	88 0e       	add	r8, r24
    3102:	99 1e       	adc	r9, r25
    3104:	aa 1e       	adc	r10, r26
    3106:	bb 1e       	adc	r11, r27

  // divide by cluster size to get cluster count
  clusterCount_ >>= clusterSizeShift_;
    3108:	04 c0       	rjmp	.+8      	; 0x3112 <_ZN8SdVolume4initEP7Sd2Cardh+0x1e2>
    310a:	b6 94       	lsr	r11
    310c:	a7 94       	ror	r10
    310e:	97 94       	ror	r9
    3110:	87 94       	ror	r8
    3112:	1a 95       	dec	r17
    3114:	d2 f7       	brpl	.-12     	; 0x310a <_ZN8SdVolume4initEP7Sd2Cardh+0x1da>
    3116:	89 86       	std	Y+9, r8	; 0x09
    3118:	9a 86       	std	Y+10, r9	; 0x0a
    311a:	ab 86       	std	Y+11, r10	; 0x0b
    311c:	bc 86       	std	Y+12, r11	; 0x0c

  // FAT type is determined by cluster count
  if (clusterCount_ < 4085) {
    311e:	85 ef       	ldi	r24, 0xF5	; 245
    3120:	88 16       	cp	r8, r24
    3122:	8f e0       	ldi	r24, 0x0F	; 15
    3124:	98 06       	cpc	r9, r24
    3126:	80 e0       	ldi	r24, 0x00	; 0
    3128:	a8 06       	cpc	r10, r24
    312a:	80 e0       	ldi	r24, 0x00	; 0
    312c:	b8 06       	cpc	r11, r24
    312e:	10 f4       	brcc	.+4      	; 0x3134 <_ZN8SdVolume4initEP7Sd2Cardh+0x204>
    fatType_ = 12;
    3130:	8c e0       	ldi	r24, 0x0C	; 12
    3132:	18 c0       	rjmp	.+48     	; 0x3164 <_ZN8SdVolume4initEP7Sd2Cardh+0x234>
  } else if (clusterCount_ < 65525) {
    3134:	25 ef       	ldi	r18, 0xF5	; 245
    3136:	82 16       	cp	r8, r18
    3138:	2f ef       	ldi	r18, 0xFF	; 255
    313a:	92 06       	cpc	r9, r18
    313c:	20 e0       	ldi	r18, 0x00	; 0
    313e:	a2 06       	cpc	r10, r18
    3140:	20 e0       	ldi	r18, 0x00	; 0
    3142:	b2 06       	cpc	r11, r18
    3144:	10 f4       	brcc	.+4      	; 0x314a <_ZN8SdVolume4initEP7Sd2Cardh+0x21a>
    fatType_ = 16;
    3146:	80 e1       	ldi	r24, 0x10	; 16
    3148:	0d c0       	rjmp	.+26     	; 0x3164 <_ZN8SdVolume4initEP7Sd2Cardh+0x234>
  } else {
    rootDirStart_ = bpb->fat32RootCluster;
    314a:	80 91 89 05 	lds	r24, 0x0589
    314e:	90 91 8a 05 	lds	r25, 0x058A
    3152:	a0 91 8b 05 	lds	r26, 0x058B
    3156:	b0 91 8c 05 	lds	r27, 0x058C
    315a:	8a 8f       	std	Y+26, r24	; 0x1a
    315c:	9b 8f       	std	Y+27, r25	; 0x1b
    315e:	ac 8f       	std	Y+28, r26	; 0x1c
    3160:	bd 8f       	std	Y+29, r27	; 0x1d
    fatType_ = 32;
    3162:	80 e2       	ldi	r24, 0x20	; 32
    3164:	8f 8b       	std	Y+23, r24	; 0x17
  }
  return true;
    3166:	81 e0       	ldi	r24, 0x01	; 1
    3168:	01 c0       	rjmp	.+2      	; 0x316c <_ZN8SdVolume4initEP7Sd2Cardh+0x23c>

  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    // error if not power of 2
    if (clusterSizeShift_++ > 7) return false;
    316a:	80 e0       	ldi	r24, 0x00	; 0
  } else {
    rootDirStart_ = bpb->fat32RootCluster;
    fatType_ = 32;
  }
  return true;
}
    316c:	df 91       	pop	r29
    316e:	cf 91       	pop	r28
    3170:	1f 91       	pop	r17
    3172:	ff 90       	pop	r15
    3174:	ef 90       	pop	r14
    3176:	df 90       	pop	r13
    3178:	cf 90       	pop	r12
    317a:	bf 90       	pop	r11
    317c:	af 90       	pop	r10
    317e:	9f 90       	pop	r9
    3180:	8f 90       	pop	r8
    3182:	7f 90       	pop	r7
    3184:	6f 90       	pop	r6
    3186:	08 95       	ret

00003188 <malloc>:
	 * Our minimum chunk size is the size of a pointer (plus the
	 * size of the "sz" field, but we don't need to account for
	 * this), otherwise we could not possibly fit a freelist entry
	 * into the chunk later.
	 */
	if (len < sizeof(struct __freelist) - sizeof(size_t))
    3188:	0f 93       	push	r16
    318a:	1f 93       	push	r17
    318c:	cf 93       	push	r28
    318e:	df 93       	push	r29
    3190:	bc 01       	movw	r22, r24
    3192:	82 30       	cpi	r24, 0x02	; 2
    3194:	91 05       	cpc	r25, r1
    3196:	10 f4       	brcc	.+4      	; 0x319c <malloc+0x14>
    3198:	62 e0       	ldi	r22, 0x02	; 2
    319a:	70 e0       	ldi	r23, 0x00	; 0
	 * would match exactly.  If we found one, we are done.  While
	 * walking, note down the smallest chunk we found that would
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
    319c:	e0 91 10 0a 	lds	r30, 0x0A10
    31a0:	f0 91 11 0a 	lds	r31, 0x0A11
    31a4:	40 e0       	ldi	r20, 0x00	; 0
    31a6:	50 e0       	ldi	r21, 0x00	; 0
    31a8:	a0 e0       	ldi	r26, 0x00	; 0
    31aa:	b0 e0       	ldi	r27, 0x00	; 0
    31ac:	24 c0       	rjmp	.+72     	; 0x31f6 <malloc+0x6e>
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1->sz < len)
    31ae:	80 81       	ld	r24, Z
    31b0:	91 81       	ldd	r25, Z+1	; 0x01
    31b2:	86 17       	cp	r24, r22
    31b4:	97 07       	cpc	r25, r23
    31b6:	d0 f0       	brcs	.+52     	; 0x31ec <malloc+0x64>
			continue;
		if (fp1->sz == len) {
    31b8:	86 17       	cp	r24, r22
    31ba:	97 07       	cpc	r25, r23
    31bc:	71 f4       	brne	.+28     	; 0x31da <malloc+0x52>
    31be:	82 81       	ldd	r24, Z+2	; 0x02
    31c0:	93 81       	ldd	r25, Z+3	; 0x03
			/*
			 * Found it.  Disconnect the chunk from the
			 * freelist, and return it.
			 */
			if (fp2)
    31c2:	10 97       	sbiw	r26, 0x00	; 0
    31c4:	29 f0       	breq	.+10     	; 0x31d0 <malloc+0x48>
				fp2->nx = fp1->nx;
    31c6:	13 96       	adiw	r26, 0x03	; 3
    31c8:	9c 93       	st	X, r25
    31ca:	8e 93       	st	-X, r24
    31cc:	12 97       	sbiw	r26, 0x02	; 2
    31ce:	2c c0       	rjmp	.+88     	; 0x3228 <malloc+0xa0>
			else
				__flp = fp1->nx;
    31d0:	90 93 11 0a 	sts	0x0A11, r25
    31d4:	80 93 10 0a 	sts	0x0A10, r24
    31d8:	27 c0       	rjmp	.+78     	; 0x3228 <malloc+0xa0>
			return &(fp1->nx);
		}
		else {
			if (s == 0 || fp1->sz < s) {
    31da:	41 15       	cp	r20, r1
    31dc:	51 05       	cpc	r21, r1
    31de:	19 f0       	breq	.+6      	; 0x31e6 <malloc+0x5e>
    31e0:	84 17       	cp	r24, r20
    31e2:	95 07       	cpc	r25, r21
    31e4:	18 f4       	brcc	.+6      	; 0x31ec <malloc+0x64>
    31e6:	8d 01       	movw	r16, r26
    31e8:	ac 01       	movw	r20, r24
    31ea:	ef 01       	movw	r28, r30
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
    31ec:	df 01       	movw	r26, r30
    31ee:	82 81       	ldd	r24, Z+2	; 0x02
    31f0:	93 81       	ldd	r25, Z+3	; 0x03
    31f2:	9c 01       	movw	r18, r24
    31f4:	f9 01       	movw	r30, r18
	 * walking, note down the smallest chunk we found that would
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
	     fp1;
    31f6:	30 97       	sbiw	r30, 0x00	; 0
    31f8:	d1 f6       	brne	.-76     	; 0x31ae <malloc+0x26>
	 * difference between the requested size and the size of the
	 * chunk found is large enough for another freelist entry; if
	 * not, just enlarge the request size to what we have found,
	 * and use the entire chunk.
	 */
	if (s) {
    31fa:	41 15       	cp	r20, r1
    31fc:	51 05       	cpc	r21, r1
    31fe:	f9 f0       	breq	.+62     	; 0x323e <malloc+0xb6>
		if (s - len < sizeof(struct __freelist)) {
    3200:	ca 01       	movw	r24, r20
    3202:	86 1b       	sub	r24, r22
    3204:	97 0b       	sbc	r25, r23
    3206:	84 30       	cpi	r24, 0x04	; 4
    3208:	91 05       	cpc	r25, r1
    320a:	80 f4       	brcc	.+32     	; 0x322c <malloc+0xa4>
    320c:	8a 81       	ldd	r24, Y+2	; 0x02
    320e:	9b 81       	ldd	r25, Y+3	; 0x03
			/* Disconnect it from freelist and return it. */
			if (sfp2)
    3210:	01 15       	cp	r16, r1
    3212:	11 05       	cpc	r17, r1
    3214:	21 f0       	breq	.+8      	; 0x321e <malloc+0x96>
				sfp2->nx = sfp1->nx;
    3216:	f8 01       	movw	r30, r16
    3218:	93 83       	std	Z+3, r25	; 0x03
    321a:	82 83       	std	Z+2, r24	; 0x02
    321c:	04 c0       	rjmp	.+8      	; 0x3226 <malloc+0x9e>
			else
				__flp = sfp1->nx;
    321e:	90 93 11 0a 	sts	0x0A11, r25
    3222:	80 93 10 0a 	sts	0x0A10, r24
			return &(sfp1->nx);
    3226:	fe 01       	movw	r30, r28
    3228:	32 96       	adiw	r30, 0x02	; 2
    322a:	45 c0       	rjmp	.+138    	; 0x32b6 <malloc+0x12e>
		 */
		cp = (char *)sfp1;
		s -= len;
		cp += s;
		sfp2 = (struct __freelist *)cp;
		sfp2->sz = len;
    322c:	fe 01       	movw	r30, r28
    322e:	e8 0f       	add	r30, r24
    3230:	f9 1f       	adc	r31, r25
    3232:	61 93       	st	Z+, r22
    3234:	71 93       	st	Z+, r23
		sfp1->sz = s - sizeof(size_t);
    3236:	02 97       	sbiw	r24, 0x02	; 2
    3238:	99 83       	std	Y+1, r25	; 0x01
    323a:	88 83       	st	Y, r24
    323c:	3c c0       	rjmp	.+120    	; 0x32b6 <malloc+0x12e>
	 * Under Unix, the "break value" was the end of the data
	 * segment as dynamically requested from the operating system.
	 * Since we don't have an operating system, just make sure
	 * that we don't collide with the stack.
	 */
	if (__brkval == 0)
    323e:	80 91 0e 0a 	lds	r24, 0x0A0E
    3242:	90 91 0f 0a 	lds	r25, 0x0A0F
    3246:	89 2b       	or	r24, r25
    3248:	41 f4       	brne	.+16     	; 0x325a <malloc+0xd2>
		__brkval = __malloc_heap_start;
    324a:	80 91 bf 04 	lds	r24, 0x04BF
    324e:	90 91 c0 04 	lds	r25, 0x04C0
    3252:	90 93 0f 0a 	sts	0x0A0F, r25
    3256:	80 93 0e 0a 	sts	0x0A0E, r24
	cp = __malloc_heap_end;
    325a:	40 91 c1 04 	lds	r20, 0x04C1
    325e:	50 91 c2 04 	lds	r21, 0x04C2
	if (cp == 0)
    3262:	41 15       	cp	r20, r1
    3264:	51 05       	cpc	r21, r1
    3266:	41 f4       	brne	.+16     	; 0x3278 <malloc+0xf0>
		cp = STACK_POINTER() - __malloc_margin;
    3268:	4d b7       	in	r20, 0x3d	; 61
    326a:	5e b7       	in	r21, 0x3e	; 62
    326c:	80 91 bd 04 	lds	r24, 0x04BD
    3270:	90 91 be 04 	lds	r25, 0x04BE
    3274:	48 1b       	sub	r20, r24
    3276:	59 0b       	sbc	r21, r25
	if (cp <= __brkval)
    3278:	20 91 0e 0a 	lds	r18, 0x0A0E
    327c:	30 91 0f 0a 	lds	r19, 0x0A0F
    3280:	24 17       	cp	r18, r20
    3282:	35 07       	cpc	r19, r21
    3284:	b0 f4       	brcc	.+44     	; 0x32b2 <malloc+0x12a>
	  /*
	   * Memory exhausted.
	   */
	  return 0;
	avail = cp - __brkval;
    3286:	ca 01       	movw	r24, r20
    3288:	82 1b       	sub	r24, r18
    328a:	93 0b       	sbc	r25, r19
	/*
	 * Both tests below are needed to catch the case len >= 0xfffe.
	 */
	if (avail >= len && avail >= len + sizeof(size_t)) {
    328c:	86 17       	cp	r24, r22
    328e:	97 07       	cpc	r25, r23
    3290:	80 f0       	brcs	.+32     	; 0x32b2 <malloc+0x12a>
    3292:	ab 01       	movw	r20, r22
    3294:	4e 5f       	subi	r20, 0xFE	; 254
    3296:	5f 4f       	sbci	r21, 0xFF	; 255
    3298:	84 17       	cp	r24, r20
    329a:	95 07       	cpc	r25, r21
    329c:	50 f0       	brcs	.+20     	; 0x32b2 <malloc+0x12a>
		fp1 = (struct __freelist *)__brkval;
		__brkval += len + sizeof(size_t);
    329e:	42 0f       	add	r20, r18
    32a0:	53 1f       	adc	r21, r19
    32a2:	50 93 0f 0a 	sts	0x0A0F, r21
    32a6:	40 93 0e 0a 	sts	0x0A0E, r20
		fp1->sz = len;
    32aa:	f9 01       	movw	r30, r18
    32ac:	61 93       	st	Z+, r22
    32ae:	71 93       	st	Z+, r23
    32b0:	02 c0       	rjmp	.+4      	; 0x32b6 <malloc+0x12e>
		return &(fp1->nx);
    32b2:	e0 e0       	ldi	r30, 0x00	; 0
    32b4:	f0 e0       	ldi	r31, 0x00	; 0
	}
	/*
	 * Step 4: There's no help, just fail. :-/
	 */
	return 0;
}
    32b6:	cf 01       	movw	r24, r30
    32b8:	df 91       	pop	r29
    32ba:	cf 91       	pop	r28
    32bc:	1f 91       	pop	r17
    32be:	0f 91       	pop	r16
    32c0:	08 95       	ret

000032c2 <free>:
{
	struct __freelist *fp1, *fp2, *fpnew;
	char *cp1, *cp2, *cpnew;

	/* ISO C says free(NULL) must be a no-op */
	if (p == 0)
    32c2:	cf 93       	push	r28
    32c4:	df 93       	push	r29
    32c6:	9c 01       	movw	r18, r24
    32c8:	00 97       	sbiw	r24, 0x00	; 0
    32ca:	09 f4       	brne	.+2      	; 0x32ce <free+0xc>
    32cc:	8f c0       	rjmp	.+286    	; 0x33ec <free+0x12a>
		return;

	cpnew = p;
	cpnew -= sizeof(size_t);
    32ce:	ec 01       	movw	r28, r24
    32d0:	22 97       	sbiw	r28, 0x02	; 2
	fpnew = (struct __freelist *)cpnew;
	fpnew->nx = 0;
    32d2:	1b 82       	std	Y+3, r1	; 0x03
    32d4:	1a 82       	std	Y+2, r1	; 0x02
	/*
	 * Trivial case first: if there's no freelist yet, our entry
	 * will be the only one on it.  If this is the last entry, we
	 * can reduce __brkval instead.
	 */
	if (__flp == 0) {
    32d6:	60 91 10 0a 	lds	r22, 0x0A10
    32da:	70 91 11 0a 	lds	r23, 0x0A11
    32de:	61 15       	cp	r22, r1
    32e0:	71 05       	cpc	r23, r1
    32e2:	81 f4       	brne	.+32     	; 0x3304 <free+0x42>
		if ((char *)p + fpnew->sz == __brkval)
    32e4:	88 81       	ld	r24, Y
    32e6:	99 81       	ldd	r25, Y+1	; 0x01
    32e8:	82 0f       	add	r24, r18
    32ea:	93 1f       	adc	r25, r19
    32ec:	20 91 0e 0a 	lds	r18, 0x0A0E
    32f0:	30 91 0f 0a 	lds	r19, 0x0A0F
    32f4:	28 17       	cp	r18, r24
    32f6:	39 07       	cpc	r19, r25
    32f8:	39 f5       	brne	.+78     	; 0x3348 <free+0x86>
			__brkval = cpnew;
    32fa:	d0 93 0f 0a 	sts	0x0A0F, r29
    32fe:	c0 93 0e 0a 	sts	0x0A0E, r28
    3302:	74 c0       	rjmp	.+232    	; 0x33ec <free+0x12a>
		else
			__flp = fpnew;
    3304:	db 01       	movw	r26, r22
    3306:	40 e0       	ldi	r20, 0x00	; 0
    3308:	50 e0       	ldi	r21, 0x00	; 0
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1 < fpnew)
    330a:	ac 17       	cp	r26, r28
    330c:	bd 07       	cpc	r27, r29
    330e:	08 f1       	brcs	.+66     	; 0x3352 <free+0x90>
			continue;
		cp1 = (char *)fp1;
		fpnew->nx = fp1;
    3310:	bb 83       	std	Y+3, r27	; 0x03
    3312:	aa 83       	std	Y+2, r26	; 0x02
		if ((char *)&(fpnew->nx) + fpnew->sz == cp1) {
    3314:	fe 01       	movw	r30, r28
    3316:	21 91       	ld	r18, Z+
    3318:	31 91       	ld	r19, Z+
    331a:	e2 0f       	add	r30, r18
    331c:	f3 1f       	adc	r31, r19
    331e:	ae 17       	cp	r26, r30
    3320:	bf 07       	cpc	r27, r31
    3322:	79 f4       	brne	.+30     	; 0x3342 <free+0x80>
			/* upper chunk adjacent, assimilate it */
			fpnew->sz += fp1->sz + sizeof(size_t);
    3324:	8d 91       	ld	r24, X+
    3326:	9c 91       	ld	r25, X
    3328:	11 97       	sbiw	r26, 0x01	; 1
    332a:	28 0f       	add	r18, r24
    332c:	39 1f       	adc	r19, r25
    332e:	2e 5f       	subi	r18, 0xFE	; 254
    3330:	3f 4f       	sbci	r19, 0xFF	; 255
    3332:	39 83       	std	Y+1, r19	; 0x01
    3334:	28 83       	st	Y, r18
			fpnew->nx = fp1->nx;
    3336:	12 96       	adiw	r26, 0x02	; 2
    3338:	8d 91       	ld	r24, X+
    333a:	9c 91       	ld	r25, X
    333c:	13 97       	sbiw	r26, 0x03	; 3
    333e:	9b 83       	std	Y+3, r25	; 0x03
    3340:	8a 83       	std	Y+2, r24	; 0x02
		}
		if (fp2 == 0) {
    3342:	41 15       	cp	r20, r1
    3344:	51 05       	cpc	r21, r1
    3346:	71 f4       	brne	.+28     	; 0x3364 <free+0xa2>
			/* new head of freelist */
			__flp = fpnew;
    3348:	d0 93 11 0a 	sts	0x0A11, r29
    334c:	c0 93 10 0a 	sts	0x0A10, r28
    3350:	4d c0       	rjmp	.+154    	; 0x33ec <free+0x12a>
	 * freelist.  Try to aggregate the chunk with adjacent chunks
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
    3352:	12 96       	adiw	r26, 0x02	; 2
    3354:	8d 91       	ld	r24, X+
    3356:	9c 91       	ld	r25, X
    3358:	13 97       	sbiw	r26, 0x03	; 3
    335a:	ad 01       	movw	r20, r26
	 * Now, find the position where our new entry belongs onto the
	 * freelist.  Try to aggregate the chunk with adjacent chunks
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
    335c:	00 97       	sbiw	r24, 0x00	; 0
    335e:	11 f0       	breq	.+4      	; 0x3364 <free+0xa2>
    3360:	dc 01       	movw	r26, r24
    3362:	d3 cf       	rjmp	.-90     	; 0x330a <free+0x48>
	 * Note that we get here either if we hit the "break" above,
	 * or if we fell off the end of the loop.  The latter means
	 * we've got a new topmost chunk.  Either way, try aggregating
	 * with the lower chunk if possible.
	 */
	fp2->nx = fpnew;
    3364:	da 01       	movw	r26, r20
    3366:	13 96       	adiw	r26, 0x03	; 3
    3368:	dc 93       	st	X, r29
    336a:	ce 93       	st	-X, r28
    336c:	12 97       	sbiw	r26, 0x02	; 2
	cp2 = (char *)&(fp2->nx);
	if (cp2 + fp2->sz == cpnew) {
    336e:	fa 01       	movw	r30, r20
    3370:	21 91       	ld	r18, Z+
    3372:	31 91       	ld	r19, Z+
    3374:	e2 0f       	add	r30, r18
    3376:	f3 1f       	adc	r31, r19
    3378:	ce 17       	cp	r28, r30
    337a:	df 07       	cpc	r29, r31
    337c:	69 f4       	brne	.+26     	; 0x3398 <free+0xd6>
		/* lower junk adjacent, merge */
		fp2->sz += fpnew->sz + sizeof(size_t);
    337e:	88 81       	ld	r24, Y
    3380:	99 81       	ldd	r25, Y+1	; 0x01
    3382:	28 0f       	add	r18, r24
    3384:	39 1f       	adc	r19, r25
    3386:	2e 5f       	subi	r18, 0xFE	; 254
    3388:	3f 4f       	sbci	r19, 0xFF	; 255
    338a:	fa 01       	movw	r30, r20
    338c:	31 83       	std	Z+1, r19	; 0x01
    338e:	20 83       	st	Z, r18
		fp2->nx = fpnew->nx;
    3390:	8a 81       	ldd	r24, Y+2	; 0x02
    3392:	9b 81       	ldd	r25, Y+3	; 0x03
    3394:	93 83       	std	Z+3, r25	; 0x03
    3396:	82 83       	std	Z+2, r24	; 0x02
    3398:	e0 e0       	ldi	r30, 0x00	; 0
    339a:	f0 e0       	ldi	r31, 0x00	; 0
	}
	/*
	 * If there's a new topmost chunk, lower __brkval instead.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1->nx != 0;
    339c:	db 01       	movw	r26, r22
    339e:	12 96       	adiw	r26, 0x02	; 2
    33a0:	8d 91       	ld	r24, X+
    33a2:	9c 91       	ld	r25, X
    33a4:	13 97       	sbiw	r26, 0x03	; 3
    33a6:	00 97       	sbiw	r24, 0x00	; 0
    33a8:	19 f0       	breq	.+6      	; 0x33b0 <free+0xee>
    33aa:	bc 01       	movw	r22, r24
    33ac:	fd 01       	movw	r30, r26
    33ae:	f6 cf       	rjmp	.-20     	; 0x339c <free+0xda>
	     fp2 = fp1, fp1 = fp1->nx)
		/* advance to entry just before end of list */;
	cp2 = (char *)&(fp1->nx);
    33b0:	ab 01       	movw	r20, r22
    33b2:	4e 5f       	subi	r20, 0xFE	; 254
    33b4:	5f 4f       	sbci	r21, 0xFF	; 255
	if (cp2 + fp1->sz == __brkval) {
    33b6:	db 01       	movw	r26, r22
    33b8:	8d 91       	ld	r24, X+
    33ba:	9c 91       	ld	r25, X
    33bc:	84 0f       	add	r24, r20
    33be:	95 1f       	adc	r25, r21
    33c0:	20 91 0e 0a 	lds	r18, 0x0A0E
    33c4:	30 91 0f 0a 	lds	r19, 0x0A0F
    33c8:	28 17       	cp	r18, r24
    33ca:	39 07       	cpc	r19, r25
    33cc:	79 f4       	brne	.+30     	; 0x33ec <free+0x12a>
		if (fp2 == NULL)
    33ce:	30 97       	sbiw	r30, 0x00	; 0
    33d0:	29 f4       	brne	.+10     	; 0x33dc <free+0x11a>
			/* Freelist is empty now. */
			__flp = NULL;
    33d2:	10 92 11 0a 	sts	0x0A11, r1
    33d6:	10 92 10 0a 	sts	0x0A10, r1
    33da:	02 c0       	rjmp	.+4      	; 0x33e0 <free+0x11e>
		else
			fp2->nx = NULL;
    33dc:	13 82       	std	Z+3, r1	; 0x03
    33de:	12 82       	std	Z+2, r1	; 0x02
		__brkval = cp2 - sizeof(size_t);
    33e0:	42 50       	subi	r20, 0x02	; 2
    33e2:	50 40       	sbci	r21, 0x00	; 0
    33e4:	50 93 0f 0a 	sts	0x0A0F, r21
    33e8:	40 93 0e 0a 	sts	0x0A0E, r20
	}
}
    33ec:	df 91       	pop	r29
    33ee:	cf 91       	pop	r28
    33f0:	08 95       	ret

000033f2 <__vector_23>:
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    33f2:	1f 92       	push	r1
    33f4:	0f 92       	push	r0
    33f6:	0f b6       	in	r0, 0x3f	; 63
    33f8:	0f 92       	push	r0
    33fa:	11 24       	eor	r1, r1
    33fc:	2f 93       	push	r18
    33fe:	3f 93       	push	r19
    3400:	8f 93       	push	r24
    3402:	9f 93       	push	r25
    3404:	af 93       	push	r26
    3406:	bf 93       	push	r27
    3408:	80 91 61 07 	lds	r24, 0x0761
    340c:	90 91 62 07 	lds	r25, 0x0762
    3410:	a0 91 63 07 	lds	r26, 0x0763
    3414:	b0 91 64 07 	lds	r27, 0x0764
    3418:	30 91 65 07 	lds	r19, 0x0765
    341c:	01 96       	adiw	r24, 0x01	; 1
    341e:	a1 1d       	adc	r26, r1
    3420:	b1 1d       	adc	r27, r1
    3422:	23 2f       	mov	r18, r19
    3424:	2d 5f       	subi	r18, 0xFD	; 253
    3426:	2d 37       	cpi	r18, 0x7D	; 125
    3428:	20 f0       	brcs	.+8      	; 0x3432 <__vector_23+0x40>
    342a:	2d 57       	subi	r18, 0x7D	; 125
    342c:	01 96       	adiw	r24, 0x01	; 1
    342e:	a1 1d       	adc	r26, r1
    3430:	b1 1d       	adc	r27, r1
    3432:	20 93 65 07 	sts	0x0765, r18
    3436:	80 93 61 07 	sts	0x0761, r24
    343a:	90 93 62 07 	sts	0x0762, r25
    343e:	a0 93 63 07 	sts	0x0763, r26
    3442:	b0 93 64 07 	sts	0x0764, r27
    3446:	80 91 5d 07 	lds	r24, 0x075D
    344a:	90 91 5e 07 	lds	r25, 0x075E
    344e:	a0 91 5f 07 	lds	r26, 0x075F
    3452:	b0 91 60 07 	lds	r27, 0x0760
    3456:	01 96       	adiw	r24, 0x01	; 1
    3458:	a1 1d       	adc	r26, r1
    345a:	b1 1d       	adc	r27, r1
    345c:	80 93 5d 07 	sts	0x075D, r24
    3460:	90 93 5e 07 	sts	0x075E, r25
    3464:	a0 93 5f 07 	sts	0x075F, r26
    3468:	b0 93 60 07 	sts	0x0760, r27
    346c:	bf 91       	pop	r27
    346e:	af 91       	pop	r26
    3470:	9f 91       	pop	r25
    3472:	8f 91       	pop	r24
    3474:	3f 91       	pop	r19
    3476:	2f 91       	pop	r18
    3478:	0f 90       	pop	r0
    347a:	0f be       	out	0x3f, r0	; 63
    347c:	0f 90       	pop	r0
    347e:	1f 90       	pop	r1
    3480:	18 95       	reti

00003482 <millis>:
    3482:	8f b7       	in	r24, 0x3f	; 63
    3484:	f8 94       	cli
    3486:	20 91 61 07 	lds	r18, 0x0761
    348a:	30 91 62 07 	lds	r19, 0x0762
    348e:	40 91 63 07 	lds	r20, 0x0763
    3492:	50 91 64 07 	lds	r21, 0x0764
    3496:	8f bf       	out	0x3f, r24	; 63
    3498:	b9 01       	movw	r22, r18
    349a:	ca 01       	movw	r24, r20
    349c:	08 95       	ret

0000349e <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call yields a delay of approximately 1 1/8 us.
	if (--us == 0)
    349e:	01 97       	sbiw	r24, 0x01	; 1
    34a0:	39 f0       	breq	.+14     	; 0x34b0 <delayMicroseconds+0x12>
		return;

	// the following loop takes a quarter of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2;
    34a2:	88 0f       	add	r24, r24
    34a4:	99 1f       	adc	r25, r25
    34a6:	88 0f       	add	r24, r24
    34a8:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	us -= 2;
    34aa:	02 97       	sbiw	r24, 0x02	; 2
	// we can't subtract any more than this or we'd overflow w/ small delays.
	us--;
#endif

	// busy wait
	__asm__ __volatile__ (
    34ac:	01 97       	sbiw	r24, 0x01	; 1
    34ae:	f1 f7       	brne	.-4      	; 0x34ac <delayMicroseconds+0xe>
    34b0:	08 95       	ret

000034b2 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    34b2:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    34b4:	84 b5       	in	r24, 0x24	; 36
    34b6:	82 60       	ori	r24, 0x02	; 2
    34b8:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    34ba:	84 b5       	in	r24, 0x24	; 36
    34bc:	81 60       	ori	r24, 0x01	; 1
    34be:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    34c0:	85 b5       	in	r24, 0x25	; 37
    34c2:	82 60       	ori	r24, 0x02	; 2
    34c4:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    34c6:	85 b5       	in	r24, 0x25	; 37
    34c8:	81 60       	ori	r24, 0x01	; 1
    34ca:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    34cc:	ee e6       	ldi	r30, 0x6E	; 110
    34ce:	f0 e0       	ldi	r31, 0x00	; 0
    34d0:	80 81       	ld	r24, Z
    34d2:	81 60       	ori	r24, 0x01	; 1
    34d4:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    34d6:	e1 e8       	ldi	r30, 0x81	; 129
    34d8:	f0 e0       	ldi	r31, 0x00	; 0
    34da:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    34dc:	80 81       	ld	r24, Z
    34de:	82 60       	ori	r24, 0x02	; 2
    34e0:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    34e2:	80 81       	ld	r24, Z
    34e4:	81 60       	ori	r24, 0x01	; 1
    34e6:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    34e8:	e0 e8       	ldi	r30, 0x80	; 128
    34ea:	f0 e0       	ldi	r31, 0x00	; 0
    34ec:	80 81       	ld	r24, Z
    34ee:	81 60       	ori	r24, 0x01	; 1
    34f0:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    34f2:	e1 eb       	ldi	r30, 0xB1	; 177
    34f4:	f0 e0       	ldi	r31, 0x00	; 0
    34f6:	80 81       	ld	r24, Z
    34f8:	84 60       	ori	r24, 0x04	; 4
    34fa:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    34fc:	e0 eb       	ldi	r30, 0xB0	; 176
    34fe:	f0 e0       	ldi	r31, 0x00	; 0
    3500:	80 81       	ld	r24, Z
    3502:	81 60       	ori	r24, 0x01	; 1
    3504:	80 83       	st	Z, r24
#else
	#warning Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    3506:	e1 e9       	ldi	r30, 0x91	; 145
    3508:	f0 e0       	ldi	r31, 0x00	; 0
    350a:	80 81       	ld	r24, Z
    350c:	82 60       	ori	r24, 0x02	; 2
    350e:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    3510:	80 81       	ld	r24, Z
    3512:	81 60       	ori	r24, 0x01	; 1
    3514:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    3516:	e0 e9       	ldi	r30, 0x90	; 144
    3518:	f0 e0       	ldi	r31, 0x00	; 0
    351a:	80 81       	ld	r24, Z
    351c:	81 60       	ori	r24, 0x01	; 1
    351e:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    3520:	e1 ea       	ldi	r30, 0xA1	; 161
    3522:	f0 e0       	ldi	r31, 0x00	; 0
    3524:	80 81       	ld	r24, Z
    3526:	82 60       	ori	r24, 0x02	; 2
    3528:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    352a:	80 81       	ld	r24, Z
    352c:	81 60       	ori	r24, 0x01	; 1
    352e:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    3530:	e0 ea       	ldi	r30, 0xA0	; 160
    3532:	f0 e0       	ldi	r31, 0x00	; 0
    3534:	80 81       	ld	r24, Z
    3536:	81 60       	ori	r24, 0x01	; 1
    3538:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    353a:	e1 e2       	ldi	r30, 0x21	; 33
    353c:	f1 e0       	ldi	r31, 0x01	; 1
    353e:	80 81       	ld	r24, Z
    3540:	82 60       	ori	r24, 0x02	; 2
    3542:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
    3544:	80 81       	ld	r24, Z
    3546:	81 60       	ori	r24, 0x01	; 1
    3548:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    354a:	e0 e2       	ldi	r30, 0x20	; 32
    354c:	f1 e0       	ldi	r31, 0x01	; 1
    354e:	80 81       	ld	r24, Z
    3550:	81 60       	ori	r24, 0x01	; 1
    3552:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    3554:	ea e7       	ldi	r30, 0x7A	; 122
    3556:	f0 e0       	ldi	r31, 0x00	; 0
    3558:	80 81       	ld	r24, Z
    355a:	84 60       	ori	r24, 0x04	; 4
    355c:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    355e:	80 81       	ld	r24, Z
    3560:	82 60       	ori	r24, 0x02	; 2
    3562:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    3564:	80 81       	ld	r24, Z
    3566:	81 60       	ori	r24, 0x01	; 1
    3568:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    356a:	80 81       	ld	r24, Z
    356c:	80 68       	ori	r24, 0x80	; 128
    356e:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    3570:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
    3574:	08 95       	ret

00003576 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    3576:	cf 93       	push	r28
    3578:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    357a:	48 2f       	mov	r20, r24
    357c:	50 e0       	ldi	r21, 0x00	; 0
    357e:	ca 01       	movw	r24, r20
    3580:	88 57       	subi	r24, 0x78	; 120
    3582:	9e 4f       	sbci	r25, 0xFE	; 254
    3584:	fc 01       	movw	r30, r24
    3586:	34 91       	lpm	r19, Z
	uint8_t port = digitalPinToPort(pin);
    3588:	4e 5b       	subi	r20, 0xBE	; 190
    358a:	5e 4f       	sbci	r21, 0xFE	; 254
    358c:	fa 01       	movw	r30, r20
    358e:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    3590:	88 23       	and	r24, r24
    3592:	69 f1       	breq	.+90     	; 0x35ee <pinMode+0x78>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    3594:	90 e0       	ldi	r25, 0x00	; 0
    3596:	88 0f       	add	r24, r24
    3598:	99 1f       	adc	r25, r25
    359a:	fc 01       	movw	r30, r24
    359c:	ec 50       	subi	r30, 0x0C	; 12
    359e:	ff 4f       	sbci	r31, 0xFF	; 255
    35a0:	a5 91       	lpm	r26, Z+
    35a2:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
    35a4:	fc 01       	movw	r30, r24
    35a6:	e2 5f       	subi	r30, 0xF2	; 242
    35a8:	fe 4f       	sbci	r31, 0xFE	; 254
    35aa:	c5 91       	lpm	r28, Z+
    35ac:	d4 91       	lpm	r29, Z

	if (mode == INPUT) { 
    35ae:	66 23       	and	r22, r22
    35b0:	51 f4       	brne	.+20     	; 0x35c6 <pinMode+0x50>
		uint8_t oldSREG = SREG;
    35b2:	2f b7       	in	r18, 0x3f	; 63
                cli();
    35b4:	f8 94       	cli
		*reg &= ~bit;
    35b6:	8c 91       	ld	r24, X
    35b8:	93 2f       	mov	r25, r19
    35ba:	90 95       	com	r25
    35bc:	89 23       	and	r24, r25
    35be:	8c 93       	st	X, r24
		*out &= ~bit;
    35c0:	88 81       	ld	r24, Y
    35c2:	89 23       	and	r24, r25
    35c4:	0b c0       	rjmp	.+22     	; 0x35dc <pinMode+0x66>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    35c6:	62 30       	cpi	r22, 0x02	; 2
    35c8:	61 f4       	brne	.+24     	; 0x35e2 <pinMode+0x6c>
		uint8_t oldSREG = SREG;
    35ca:	2f b7       	in	r18, 0x3f	; 63
                cli();
    35cc:	f8 94       	cli
		*reg &= ~bit;
    35ce:	8c 91       	ld	r24, X
    35d0:	93 2f       	mov	r25, r19
    35d2:	90 95       	com	r25
    35d4:	89 23       	and	r24, r25
    35d6:	8c 93       	st	X, r24
		*out |= bit;
    35d8:	88 81       	ld	r24, Y
    35da:	83 2b       	or	r24, r19
    35dc:	88 83       	st	Y, r24
		SREG = oldSREG;
    35de:	2f bf       	out	0x3f, r18	; 63
    35e0:	06 c0       	rjmp	.+12     	; 0x35ee <pinMode+0x78>
	} else {
		uint8_t oldSREG = SREG;
    35e2:	9f b7       	in	r25, 0x3f	; 63
                cli();
    35e4:	f8 94       	cli
		*reg |= bit;
    35e6:	8c 91       	ld	r24, X
    35e8:	83 2b       	or	r24, r19
    35ea:	8c 93       	st	X, r24
		SREG = oldSREG;
    35ec:	9f bf       	out	0x3f, r25	; 63
	}
}
    35ee:	df 91       	pop	r29
    35f0:	cf 91       	pop	r28
    35f2:	08 95       	ret

000035f4 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    35f4:	89 30       	cpi	r24, 0x09	; 9
    35f6:	09 f4       	brne	.+2      	; 0x35fa <turnOffPWM+0x6>
    35f8:	49 c0       	rjmp	.+146    	; 0x368c <turnOffPWM+0x98>
    35fa:	8a 30       	cpi	r24, 0x0A	; 10
    35fc:	a0 f4       	brcc	.+40     	; 0x3626 <turnOffPWM+0x32>
    35fe:	84 30       	cpi	r24, 0x04	; 4
    3600:	51 f1       	breq	.+84     	; 0x3656 <turnOffPWM+0x62>
    3602:	85 30       	cpi	r24, 0x05	; 5
    3604:	40 f4       	brcc	.+16     	; 0x3616 <turnOffPWM+0x22>
    3606:	82 30       	cpi	r24, 0x02	; 2
    3608:	79 f1       	breq	.+94     	; 0x3668 <turnOffPWM+0x74>
    360a:	83 30       	cpi	r24, 0x03	; 3
    360c:	00 f5       	brcc	.+64     	; 0x364e <turnOffPWM+0x5a>
    360e:	81 30       	cpi	r24, 0x01	; 1
    3610:	09 f0       	breq	.+2      	; 0x3614 <turnOffPWM+0x20>
    3612:	63 c0       	rjmp	.+198    	; 0x36da <turnOffPWM+0xe6>
    3614:	26 c0       	rjmp	.+76     	; 0x3662 <turnOffPWM+0x6e>
    3616:	87 30       	cpi	r24, 0x07	; 7
    3618:	79 f1       	breq	.+94     	; 0x3678 <turnOffPWM+0x84>
    361a:	88 30       	cpi	r24, 0x08	; 8
    361c:	98 f5       	brcc	.+102    	; 0x3684 <turnOffPWM+0x90>
    361e:	86 30       	cpi	r24, 0x06	; 6
    3620:	09 f0       	breq	.+2      	; 0x3624 <turnOffPWM+0x30>
    3622:	5b c0       	rjmp	.+182    	; 0x36da <turnOffPWM+0xe6>
    3624:	25 c0       	rjmp	.+74     	; 0x3670 <turnOffPWM+0x7c>
    3626:	8d 30       	cpi	r24, 0x0D	; 13
    3628:	09 f4       	brne	.+2      	; 0x362c <turnOffPWM+0x38>
    362a:	42 c0       	rjmp	.+132    	; 0x36b0 <turnOffPWM+0xbc>
    362c:	8e 30       	cpi	r24, 0x0E	; 14
    362e:	28 f4       	brcc	.+10     	; 0x363a <turnOffPWM+0x46>
    3630:	8b 30       	cpi	r24, 0x0B	; 11
    3632:	b1 f1       	breq	.+108    	; 0x36a0 <turnOffPWM+0xac>
    3634:	8c 30       	cpi	r24, 0x0C	; 12
    3636:	c0 f5       	brcc	.+112    	; 0x36a8 <turnOffPWM+0xb4>
    3638:	2d c0       	rjmp	.+90     	; 0x3694 <turnOffPWM+0xa0>
    363a:	80 31       	cpi	r24, 0x10	; 16
    363c:	09 f4       	brne	.+2      	; 0x3640 <turnOffPWM+0x4c>
    363e:	42 c0       	rjmp	.+132    	; 0x36c4 <turnOffPWM+0xd0>
    3640:	81 31       	cpi	r24, 0x11	; 17
    3642:	09 f4       	brne	.+2      	; 0x3646 <turnOffPWM+0x52>
    3644:	45 c0       	rjmp	.+138    	; 0x36d0 <turnOffPWM+0xdc>
    3646:	8f 30       	cpi	r24, 0x0F	; 15
    3648:	09 f0       	breq	.+2      	; 0x364c <turnOffPWM+0x58>
    364a:	47 c0       	rjmp	.+142    	; 0x36da <turnOffPWM+0xe6>
    364c:	37 c0       	rjmp	.+110    	; 0x36bc <turnOffPWM+0xc8>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    364e:	80 91 80 00 	lds	r24, 0x0080
    3652:	8f 77       	andi	r24, 0x7F	; 127
    3654:	03 c0       	rjmp	.+6      	; 0x365c <turnOffPWM+0x68>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    3656:	80 91 80 00 	lds	r24, 0x0080
    365a:	8f 7d       	andi	r24, 0xDF	; 223
    365c:	80 93 80 00 	sts	0x0080, r24
    3660:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    3662:	84 b5       	in	r24, 0x24	; 36
    3664:	8f 77       	andi	r24, 0x7F	; 127
    3666:	02 c0       	rjmp	.+4      	; 0x366c <turnOffPWM+0x78>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    3668:	84 b5       	in	r24, 0x24	; 36
    366a:	8f 7d       	andi	r24, 0xDF	; 223
    366c:	84 bd       	out	0x24, r24	; 36
    366e:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    3670:	80 91 b0 00 	lds	r24, 0x00B0
    3674:	8f 77       	andi	r24, 0x7F	; 127
    3676:	03 c0       	rjmp	.+6      	; 0x367e <turnOffPWM+0x8a>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    3678:	80 91 b0 00 	lds	r24, 0x00B0
    367c:	8f 7d       	andi	r24, 0xDF	; 223
    367e:	80 93 b0 00 	sts	0x00B0, r24
    3682:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    3684:	80 91 90 00 	lds	r24, 0x0090
    3688:	8f 77       	andi	r24, 0x7F	; 127
    368a:	07 c0       	rjmp	.+14     	; 0x369a <turnOffPWM+0xa6>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    368c:	80 91 90 00 	lds	r24, 0x0090
    3690:	8f 7d       	andi	r24, 0xDF	; 223
    3692:	03 c0       	rjmp	.+6      	; 0x369a <turnOffPWM+0xa6>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    3694:	80 91 90 00 	lds	r24, 0x0090
    3698:	87 7f       	andi	r24, 0xF7	; 247
    369a:	80 93 90 00 	sts	0x0090, r24
    369e:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    36a0:	80 91 a0 00 	lds	r24, 0x00A0
    36a4:	8f 77       	andi	r24, 0x7F	; 127
    36a6:	07 c0       	rjmp	.+14     	; 0x36b6 <turnOffPWM+0xc2>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    36a8:	80 91 a0 00 	lds	r24, 0x00A0
    36ac:	8f 7d       	andi	r24, 0xDF	; 223
    36ae:	03 c0       	rjmp	.+6      	; 0x36b6 <turnOffPWM+0xc2>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    36b0:	80 91 a0 00 	lds	r24, 0x00A0
    36b4:	87 7f       	andi	r24, 0xF7	; 247
    36b6:	80 93 a0 00 	sts	0x00A0, r24
    36ba:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    36bc:	80 91 20 01 	lds	r24, 0x0120
    36c0:	8f 77       	andi	r24, 0x7F	; 127
    36c2:	03 c0       	rjmp	.+6      	; 0x36ca <turnOffPWM+0xd6>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    36c4:	80 91 20 01 	lds	r24, 0x0120
    36c8:	8f 7d       	andi	r24, 0xDF	; 223
    36ca:	80 93 20 01 	sts	0x0120, r24
    36ce:	08 95       	ret
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    36d0:	80 91 20 01 	lds	r24, 0x0120
    36d4:	87 7f       	andi	r24, 0xF7	; 247
    36d6:	80 93 20 01 	sts	0x0120, r24
    36da:	08 95       	ret

000036dc <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    36dc:	ff 92       	push	r15
    36de:	0f 93       	push	r16
    36e0:	1f 93       	push	r17
    36e2:	f6 2e       	mov	r15, r22
	uint8_t timer = digitalPinToTimer(pin);
    36e4:	48 2f       	mov	r20, r24
    36e6:	50 e0       	ldi	r21, 0x00	; 0
    36e8:	ca 01       	movw	r24, r20
    36ea:	82 53       	subi	r24, 0x32	; 50
    36ec:	9e 4f       	sbci	r25, 0xFE	; 254
    36ee:	fc 01       	movw	r30, r24
    36f0:	24 91       	lpm	r18, Z
	uint8_t bit = digitalPinToBitMask(pin);
    36f2:	ca 01       	movw	r24, r20
    36f4:	88 57       	subi	r24, 0x78	; 120
    36f6:	9e 4f       	sbci	r25, 0xFE	; 254
    36f8:	fc 01       	movw	r30, r24
    36fa:	14 91       	lpm	r17, Z
	uint8_t port = digitalPinToPort(pin);
    36fc:	4e 5b       	subi	r20, 0xBE	; 190
    36fe:	5e 4f       	sbci	r21, 0xFE	; 254
    3700:	fa 01       	movw	r30, r20
    3702:	04 91       	lpm	r16, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    3704:	00 23       	and	r16, r16
    3706:	c9 f0       	breq	.+50     	; 0x373a <digitalWrite+0x5e>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    3708:	22 23       	and	r18, r18
    370a:	19 f0       	breq	.+6      	; 0x3712 <digitalWrite+0x36>
    370c:	82 2f       	mov	r24, r18
    370e:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <turnOffPWM>

	out = portOutputRegister(port);
    3712:	e0 2f       	mov	r30, r16
    3714:	f0 e0       	ldi	r31, 0x00	; 0
    3716:	ee 0f       	add	r30, r30
    3718:	ff 1f       	adc	r31, r31
    371a:	e2 5f       	subi	r30, 0xF2	; 242
    371c:	fe 4f       	sbci	r31, 0xFE	; 254
    371e:	a5 91       	lpm	r26, Z+
    3720:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    3722:	9f b7       	in	r25, 0x3f	; 63
	cli();
    3724:	f8 94       	cli

	if (val == LOW) {
    3726:	ff 20       	and	r15, r15
    3728:	21 f4       	brne	.+8      	; 0x3732 <digitalWrite+0x56>
		*out &= ~bit;
    372a:	8c 91       	ld	r24, X
    372c:	10 95       	com	r17
    372e:	81 23       	and	r24, r17
    3730:	02 c0       	rjmp	.+4      	; 0x3736 <digitalWrite+0x5a>
	} else {
		*out |= bit;
    3732:	8c 91       	ld	r24, X
    3734:	81 2b       	or	r24, r17
    3736:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
    3738:	9f bf       	out	0x3f, r25	; 63
}
    373a:	1f 91       	pop	r17
    373c:	0f 91       	pop	r16
    373e:	ff 90       	pop	r15
    3740:	08 95       	ret

00003742 <_Z11serialEventv>:
  return 1;
}

HardwareSerial::operator bool() {
	return true;
}
    3742:	08 95       	ret

00003744 <__vector_25>:
    3744:	1f 92       	push	r1
    3746:	0f 92       	push	r0
    3748:	0f b6       	in	r0, 0x3f	; 63
    374a:	0f 92       	push	r0
    374c:	0b b6       	in	r0, 0x3b	; 59
    374e:	0f 92       	push	r0
    3750:	11 24       	eor	r1, r1
    3752:	2f 93       	push	r18
    3754:	3f 93       	push	r19
    3756:	4f 93       	push	r20
    3758:	8f 93       	push	r24
    375a:	9f 93       	push	r25
    375c:	ef 93       	push	r30
    375e:	ff 93       	push	r31
    3760:	80 91 c0 00 	lds	r24, 0x00C0
    3764:	82 fd       	sbrc	r24, 2
    3766:	1d c0       	rjmp	.+58     	; 0x37a2 <__vector_25+0x5e>
    3768:	40 91 c6 00 	lds	r20, 0x00C6
    376c:	20 91 a6 07 	lds	r18, 0x07A6
    3770:	30 91 a7 07 	lds	r19, 0x07A7
    3774:	2f 5f       	subi	r18, 0xFF	; 255
    3776:	3f 4f       	sbci	r19, 0xFF	; 255
    3778:	2f 73       	andi	r18, 0x3F	; 63
    377a:	30 70       	andi	r19, 0x00	; 0
    377c:	80 91 a8 07 	lds	r24, 0x07A8
    3780:	90 91 a9 07 	lds	r25, 0x07A9
    3784:	28 17       	cp	r18, r24
    3786:	39 07       	cpc	r19, r25
    3788:	71 f0       	breq	.+28     	; 0x37a6 <__vector_25+0x62>
    378a:	e0 91 a6 07 	lds	r30, 0x07A6
    378e:	f0 91 a7 07 	lds	r31, 0x07A7
    3792:	ea 59       	subi	r30, 0x9A	; 154
    3794:	f8 4f       	sbci	r31, 0xF8	; 248
    3796:	40 83       	st	Z, r20
    3798:	30 93 a7 07 	sts	0x07A7, r19
    379c:	20 93 a6 07 	sts	0x07A6, r18
    37a0:	02 c0       	rjmp	.+4      	; 0x37a6 <__vector_25+0x62>
    37a2:	80 91 c6 00 	lds	r24, 0x00C6
    37a6:	ff 91       	pop	r31
    37a8:	ef 91       	pop	r30
    37aa:	9f 91       	pop	r25
    37ac:	8f 91       	pop	r24
    37ae:	4f 91       	pop	r20
    37b0:	3f 91       	pop	r19
    37b2:	2f 91       	pop	r18
    37b4:	0f 90       	pop	r0
    37b6:	0b be       	out	0x3b, r0	; 59
    37b8:	0f 90       	pop	r0
    37ba:	0f be       	out	0x3f, r0	; 63
    37bc:	0f 90       	pop	r0
    37be:	1f 90       	pop	r1
    37c0:	18 95       	reti

000037c2 <_Z12serialEvent1v>:
    37c2:	08 95       	ret

000037c4 <__vector_36>:
    37c4:	1f 92       	push	r1
    37c6:	0f 92       	push	r0
    37c8:	0f b6       	in	r0, 0x3f	; 63
    37ca:	0f 92       	push	r0
    37cc:	0b b6       	in	r0, 0x3b	; 59
    37ce:	0f 92       	push	r0
    37d0:	11 24       	eor	r1, r1
    37d2:	2f 93       	push	r18
    37d4:	3f 93       	push	r19
    37d6:	4f 93       	push	r20
    37d8:	8f 93       	push	r24
    37da:	9f 93       	push	r25
    37dc:	ef 93       	push	r30
    37de:	ff 93       	push	r31
    37e0:	80 91 c8 00 	lds	r24, 0x00C8
    37e4:	82 fd       	sbrc	r24, 2
    37e6:	1d c0       	rjmp	.+58     	; 0x3822 <__vector_36+0x5e>
    37e8:	40 91 ce 00 	lds	r20, 0x00CE
    37ec:	20 91 2e 08 	lds	r18, 0x082E
    37f0:	30 91 2f 08 	lds	r19, 0x082F
    37f4:	2f 5f       	subi	r18, 0xFF	; 255
    37f6:	3f 4f       	sbci	r19, 0xFF	; 255
    37f8:	2f 73       	andi	r18, 0x3F	; 63
    37fa:	30 70       	andi	r19, 0x00	; 0
    37fc:	80 91 30 08 	lds	r24, 0x0830
    3800:	90 91 31 08 	lds	r25, 0x0831
    3804:	28 17       	cp	r18, r24
    3806:	39 07       	cpc	r19, r25
    3808:	71 f0       	breq	.+28     	; 0x3826 <__vector_36+0x62>
    380a:	e0 91 2e 08 	lds	r30, 0x082E
    380e:	f0 91 2f 08 	lds	r31, 0x082F
    3812:	e2 51       	subi	r30, 0x12	; 18
    3814:	f8 4f       	sbci	r31, 0xF8	; 248
    3816:	40 83       	st	Z, r20
    3818:	30 93 2f 08 	sts	0x082F, r19
    381c:	20 93 2e 08 	sts	0x082E, r18
    3820:	02 c0       	rjmp	.+4      	; 0x3826 <__vector_36+0x62>
    3822:	80 91 ce 00 	lds	r24, 0x00CE
    3826:	ff 91       	pop	r31
    3828:	ef 91       	pop	r30
    382a:	9f 91       	pop	r25
    382c:	8f 91       	pop	r24
    382e:	4f 91       	pop	r20
    3830:	3f 91       	pop	r19
    3832:	2f 91       	pop	r18
    3834:	0f 90       	pop	r0
    3836:	0b be       	out	0x3b, r0	; 59
    3838:	0f 90       	pop	r0
    383a:	0f be       	out	0x3f, r0	; 63
    383c:	0f 90       	pop	r0
    383e:	1f 90       	pop	r1
    3840:	18 95       	reti

00003842 <_Z12serialEvent2v>:
    3842:	08 95       	ret

00003844 <__vector_51>:
    3844:	1f 92       	push	r1
    3846:	0f 92       	push	r0
    3848:	0f b6       	in	r0, 0x3f	; 63
    384a:	0f 92       	push	r0
    384c:	0b b6       	in	r0, 0x3b	; 59
    384e:	0f 92       	push	r0
    3850:	11 24       	eor	r1, r1
    3852:	2f 93       	push	r18
    3854:	3f 93       	push	r19
    3856:	4f 93       	push	r20
    3858:	8f 93       	push	r24
    385a:	9f 93       	push	r25
    385c:	ef 93       	push	r30
    385e:	ff 93       	push	r31
    3860:	80 91 d0 00 	lds	r24, 0x00D0
    3864:	82 fd       	sbrc	r24, 2
    3866:	1d c0       	rjmp	.+58     	; 0x38a2 <__vector_51+0x5e>
    3868:	40 91 d6 00 	lds	r20, 0x00D6
    386c:	20 91 b6 08 	lds	r18, 0x08B6
    3870:	30 91 b7 08 	lds	r19, 0x08B7
    3874:	2f 5f       	subi	r18, 0xFF	; 255
    3876:	3f 4f       	sbci	r19, 0xFF	; 255
    3878:	2f 73       	andi	r18, 0x3F	; 63
    387a:	30 70       	andi	r19, 0x00	; 0
    387c:	80 91 b8 08 	lds	r24, 0x08B8
    3880:	90 91 b9 08 	lds	r25, 0x08B9
    3884:	28 17       	cp	r18, r24
    3886:	39 07       	cpc	r19, r25
    3888:	71 f0       	breq	.+28     	; 0x38a6 <__vector_51+0x62>
    388a:	e0 91 b6 08 	lds	r30, 0x08B6
    388e:	f0 91 b7 08 	lds	r31, 0x08B7
    3892:	ea 58       	subi	r30, 0x8A	; 138
    3894:	f7 4f       	sbci	r31, 0xF7	; 247
    3896:	40 83       	st	Z, r20
    3898:	30 93 b7 08 	sts	0x08B7, r19
    389c:	20 93 b6 08 	sts	0x08B6, r18
    38a0:	02 c0       	rjmp	.+4      	; 0x38a6 <__vector_51+0x62>
    38a2:	80 91 d6 00 	lds	r24, 0x00D6
    38a6:	ff 91       	pop	r31
    38a8:	ef 91       	pop	r30
    38aa:	9f 91       	pop	r25
    38ac:	8f 91       	pop	r24
    38ae:	4f 91       	pop	r20
    38b0:	3f 91       	pop	r19
    38b2:	2f 91       	pop	r18
    38b4:	0f 90       	pop	r0
    38b6:	0b be       	out	0x3b, r0	; 59
    38b8:	0f 90       	pop	r0
    38ba:	0f be       	out	0x3f, r0	; 63
    38bc:	0f 90       	pop	r0
    38be:	1f 90       	pop	r1
    38c0:	18 95       	reti

000038c2 <_Z12serialEvent3v>:
    38c2:	08 95       	ret

000038c4 <__vector_54>:
    38c4:	1f 92       	push	r1
    38c6:	0f 92       	push	r0
    38c8:	0f b6       	in	r0, 0x3f	; 63
    38ca:	0f 92       	push	r0
    38cc:	0b b6       	in	r0, 0x3b	; 59
    38ce:	0f 92       	push	r0
    38d0:	11 24       	eor	r1, r1
    38d2:	2f 93       	push	r18
    38d4:	3f 93       	push	r19
    38d6:	4f 93       	push	r20
    38d8:	8f 93       	push	r24
    38da:	9f 93       	push	r25
    38dc:	ef 93       	push	r30
    38de:	ff 93       	push	r31
    38e0:	80 91 30 01 	lds	r24, 0x0130
    38e4:	82 fd       	sbrc	r24, 2
    38e6:	1d c0       	rjmp	.+58     	; 0x3922 <__vector_54+0x5e>
    38e8:	40 91 36 01 	lds	r20, 0x0136
    38ec:	20 91 3e 09 	lds	r18, 0x093E
    38f0:	30 91 3f 09 	lds	r19, 0x093F
    38f4:	2f 5f       	subi	r18, 0xFF	; 255
    38f6:	3f 4f       	sbci	r19, 0xFF	; 255
    38f8:	2f 73       	andi	r18, 0x3F	; 63
    38fa:	30 70       	andi	r19, 0x00	; 0
    38fc:	80 91 40 09 	lds	r24, 0x0940
    3900:	90 91 41 09 	lds	r25, 0x0941
    3904:	28 17       	cp	r18, r24
    3906:	39 07       	cpc	r19, r25
    3908:	71 f0       	breq	.+28     	; 0x3926 <__vector_54+0x62>
    390a:	e0 91 3e 09 	lds	r30, 0x093E
    390e:	f0 91 3f 09 	lds	r31, 0x093F
    3912:	e2 50       	subi	r30, 0x02	; 2
    3914:	f7 4f       	sbci	r31, 0xF7	; 247
    3916:	40 83       	st	Z, r20
    3918:	30 93 3f 09 	sts	0x093F, r19
    391c:	20 93 3e 09 	sts	0x093E, r18
    3920:	02 c0       	rjmp	.+4      	; 0x3926 <__vector_54+0x62>
    3922:	80 91 36 01 	lds	r24, 0x0136
    3926:	ff 91       	pop	r31
    3928:	ef 91       	pop	r30
    392a:	9f 91       	pop	r25
    392c:	8f 91       	pop	r24
    392e:	4f 91       	pop	r20
    3930:	3f 91       	pop	r19
    3932:	2f 91       	pop	r18
    3934:	0f 90       	pop	r0
    3936:	0b be       	out	0x3b, r0	; 59
    3938:	0f 90       	pop	r0
    393a:	0f be       	out	0x3f, r0	; 63
    393c:	0f 90       	pop	r0
    393e:	1f 90       	pop	r1
    3940:	18 95       	reti

00003942 <_Z14serialEventRunv>:
    3942:	e0 91 92 09 	lds	r30, 0x0992
    3946:	f0 91 93 09 	lds	r31, 0x0993
    394a:	e0 5c       	subi	r30, 0xC0	; 192
    394c:	ff 4f       	sbci	r31, 0xFF	; 255
    394e:	81 91       	ld	r24, Z+
    3950:	91 91       	ld	r25, Z+
    3952:	20 81       	ld	r18, Z
    3954:	31 81       	ldd	r19, Z+1	; 0x01
    3956:	80 5c       	subi	r24, 0xC0	; 192
    3958:	9f 4f       	sbci	r25, 0xFF	; 255
    395a:	82 1b       	sub	r24, r18
    395c:	93 0b       	sbc	r25, r19
    395e:	60 e4       	ldi	r22, 0x40	; 64
    3960:	70 e0       	ldi	r23, 0x00	; 0
    3962:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <__divmodhi4>
    3966:	89 2b       	or	r24, r25
    3968:	11 f0       	breq	.+4      	; 0x396e <_Z14serialEventRunv+0x2c>
    396a:	0e 94 a1 1b 	call	0x3742	; 0x3742 <_Z11serialEventv>
    396e:	e0 91 b4 09 	lds	r30, 0x09B4
    3972:	f0 91 b5 09 	lds	r31, 0x09B5
    3976:	e0 5c       	subi	r30, 0xC0	; 192
    3978:	ff 4f       	sbci	r31, 0xFF	; 255
    397a:	81 91       	ld	r24, Z+
    397c:	91 91       	ld	r25, Z+
    397e:	20 81       	ld	r18, Z
    3980:	31 81       	ldd	r19, Z+1	; 0x01
    3982:	80 5c       	subi	r24, 0xC0	; 192
    3984:	9f 4f       	sbci	r25, 0xFF	; 255
    3986:	82 1b       	sub	r24, r18
    3988:	93 0b       	sbc	r25, r19
    398a:	60 e4       	ldi	r22, 0x40	; 64
    398c:	70 e0       	ldi	r23, 0x00	; 0
    398e:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <__divmodhi4>
    3992:	89 2b       	or	r24, r25
    3994:	11 f0       	breq	.+4      	; 0x399a <_Z14serialEventRunv+0x58>
    3996:	0e 94 e1 1b 	call	0x37c2	; 0x37c2 <_Z12serialEvent1v>
    399a:	e0 91 d6 09 	lds	r30, 0x09D6
    399e:	f0 91 d7 09 	lds	r31, 0x09D7
    39a2:	e0 5c       	subi	r30, 0xC0	; 192
    39a4:	ff 4f       	sbci	r31, 0xFF	; 255
    39a6:	81 91       	ld	r24, Z+
    39a8:	91 91       	ld	r25, Z+
    39aa:	20 81       	ld	r18, Z
    39ac:	31 81       	ldd	r19, Z+1	; 0x01
    39ae:	80 5c       	subi	r24, 0xC0	; 192
    39b0:	9f 4f       	sbci	r25, 0xFF	; 255
    39b2:	82 1b       	sub	r24, r18
    39b4:	93 0b       	sbc	r25, r19
    39b6:	60 e4       	ldi	r22, 0x40	; 64
    39b8:	70 e0       	ldi	r23, 0x00	; 0
    39ba:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <__divmodhi4>
    39be:	89 2b       	or	r24, r25
    39c0:	11 f0       	breq	.+4      	; 0x39c6 <_Z14serialEventRunv+0x84>
    39c2:	0e 94 21 1c 	call	0x3842	; 0x3842 <_Z12serialEvent2v>
    39c6:	e0 91 f8 09 	lds	r30, 0x09F8
    39ca:	f0 91 f9 09 	lds	r31, 0x09F9
    39ce:	e0 5c       	subi	r30, 0xC0	; 192
    39d0:	ff 4f       	sbci	r31, 0xFF	; 255
    39d2:	81 91       	ld	r24, Z+
    39d4:	91 91       	ld	r25, Z+
    39d6:	20 81       	ld	r18, Z
    39d8:	31 81       	ldd	r19, Z+1	; 0x01
    39da:	80 5c       	subi	r24, 0xC0	; 192
    39dc:	9f 4f       	sbci	r25, 0xFF	; 255
    39de:	82 1b       	sub	r24, r18
    39e0:	93 0b       	sbc	r25, r19
    39e2:	60 e4       	ldi	r22, 0x40	; 64
    39e4:	70 e0       	ldi	r23, 0x00	; 0
    39e6:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <__divmodhi4>
    39ea:	89 2b       	or	r24, r25
    39ec:	11 f0       	breq	.+4      	; 0x39f2 <_Z14serialEventRunv+0xb0>
    39ee:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <_Z12serialEvent3v>
    39f2:	08 95       	ret

000039f4 <__vector_26>:
    39f4:	1f 92       	push	r1
    39f6:	0f 92       	push	r0
    39f8:	0f b6       	in	r0, 0x3f	; 63
    39fa:	0f 92       	push	r0
    39fc:	0b b6       	in	r0, 0x3b	; 59
    39fe:	0f 92       	push	r0
    3a00:	11 24       	eor	r1, r1
    3a02:	2f 93       	push	r18
    3a04:	3f 93       	push	r19
    3a06:	8f 93       	push	r24
    3a08:	9f 93       	push	r25
    3a0a:	ef 93       	push	r30
    3a0c:	ff 93       	push	r31
    3a0e:	20 91 ea 07 	lds	r18, 0x07EA
    3a12:	30 91 eb 07 	lds	r19, 0x07EB
    3a16:	80 91 ec 07 	lds	r24, 0x07EC
    3a1a:	90 91 ed 07 	lds	r25, 0x07ED
    3a1e:	28 17       	cp	r18, r24
    3a20:	39 07       	cpc	r19, r25
    3a22:	31 f4       	brne	.+12     	; 0x3a30 <__vector_26+0x3c>
    3a24:	80 91 c1 00 	lds	r24, 0x00C1
    3a28:	8f 7d       	andi	r24, 0xDF	; 223
    3a2a:	80 93 c1 00 	sts	0x00C1, r24
    3a2e:	14 c0       	rjmp	.+40     	; 0x3a58 <__vector_26+0x64>
    3a30:	e0 91 ec 07 	lds	r30, 0x07EC
    3a34:	f0 91 ed 07 	lds	r31, 0x07ED
    3a38:	e6 55       	subi	r30, 0x56	; 86
    3a3a:	f8 4f       	sbci	r31, 0xF8	; 248
    3a3c:	20 81       	ld	r18, Z
    3a3e:	80 91 ec 07 	lds	r24, 0x07EC
    3a42:	90 91 ed 07 	lds	r25, 0x07ED
    3a46:	01 96       	adiw	r24, 0x01	; 1
    3a48:	8f 73       	andi	r24, 0x3F	; 63
    3a4a:	90 70       	andi	r25, 0x00	; 0
    3a4c:	90 93 ed 07 	sts	0x07ED, r25
    3a50:	80 93 ec 07 	sts	0x07EC, r24
    3a54:	20 93 c6 00 	sts	0x00C6, r18
    3a58:	ff 91       	pop	r31
    3a5a:	ef 91       	pop	r30
    3a5c:	9f 91       	pop	r25
    3a5e:	8f 91       	pop	r24
    3a60:	3f 91       	pop	r19
    3a62:	2f 91       	pop	r18
    3a64:	0f 90       	pop	r0
    3a66:	0b be       	out	0x3b, r0	; 59
    3a68:	0f 90       	pop	r0
    3a6a:	0f be       	out	0x3f, r0	; 63
    3a6c:	0f 90       	pop	r0
    3a6e:	1f 90       	pop	r1
    3a70:	18 95       	reti

00003a72 <__vector_37>:
    3a72:	1f 92       	push	r1
    3a74:	0f 92       	push	r0
    3a76:	0f b6       	in	r0, 0x3f	; 63
    3a78:	0f 92       	push	r0
    3a7a:	0b b6       	in	r0, 0x3b	; 59
    3a7c:	0f 92       	push	r0
    3a7e:	11 24       	eor	r1, r1
    3a80:	2f 93       	push	r18
    3a82:	3f 93       	push	r19
    3a84:	8f 93       	push	r24
    3a86:	9f 93       	push	r25
    3a88:	ef 93       	push	r30
    3a8a:	ff 93       	push	r31
    3a8c:	20 91 72 08 	lds	r18, 0x0872
    3a90:	30 91 73 08 	lds	r19, 0x0873
    3a94:	80 91 74 08 	lds	r24, 0x0874
    3a98:	90 91 75 08 	lds	r25, 0x0875
    3a9c:	28 17       	cp	r18, r24
    3a9e:	39 07       	cpc	r19, r25
    3aa0:	31 f4       	brne	.+12     	; 0x3aae <__vector_37+0x3c>
    3aa2:	80 91 c9 00 	lds	r24, 0x00C9
    3aa6:	8f 7d       	andi	r24, 0xDF	; 223
    3aa8:	80 93 c9 00 	sts	0x00C9, r24
    3aac:	14 c0       	rjmp	.+40     	; 0x3ad6 <__vector_37+0x64>
    3aae:	e0 91 74 08 	lds	r30, 0x0874
    3ab2:	f0 91 75 08 	lds	r31, 0x0875
    3ab6:	ee 5c       	subi	r30, 0xCE	; 206
    3ab8:	f7 4f       	sbci	r31, 0xF7	; 247
    3aba:	20 81       	ld	r18, Z
    3abc:	80 91 74 08 	lds	r24, 0x0874
    3ac0:	90 91 75 08 	lds	r25, 0x0875
    3ac4:	01 96       	adiw	r24, 0x01	; 1
    3ac6:	8f 73       	andi	r24, 0x3F	; 63
    3ac8:	90 70       	andi	r25, 0x00	; 0
    3aca:	90 93 75 08 	sts	0x0875, r25
    3ace:	80 93 74 08 	sts	0x0874, r24
    3ad2:	20 93 ce 00 	sts	0x00CE, r18
    3ad6:	ff 91       	pop	r31
    3ad8:	ef 91       	pop	r30
    3ada:	9f 91       	pop	r25
    3adc:	8f 91       	pop	r24
    3ade:	3f 91       	pop	r19
    3ae0:	2f 91       	pop	r18
    3ae2:	0f 90       	pop	r0
    3ae4:	0b be       	out	0x3b, r0	; 59
    3ae6:	0f 90       	pop	r0
    3ae8:	0f be       	out	0x3f, r0	; 63
    3aea:	0f 90       	pop	r0
    3aec:	1f 90       	pop	r1
    3aee:	18 95       	reti

00003af0 <__vector_52>:
    3af0:	1f 92       	push	r1
    3af2:	0f 92       	push	r0
    3af4:	0f b6       	in	r0, 0x3f	; 63
    3af6:	0f 92       	push	r0
    3af8:	0b b6       	in	r0, 0x3b	; 59
    3afa:	0f 92       	push	r0
    3afc:	11 24       	eor	r1, r1
    3afe:	2f 93       	push	r18
    3b00:	3f 93       	push	r19
    3b02:	8f 93       	push	r24
    3b04:	9f 93       	push	r25
    3b06:	ef 93       	push	r30
    3b08:	ff 93       	push	r31
    3b0a:	20 91 fa 08 	lds	r18, 0x08FA
    3b0e:	30 91 fb 08 	lds	r19, 0x08FB
    3b12:	80 91 fc 08 	lds	r24, 0x08FC
    3b16:	90 91 fd 08 	lds	r25, 0x08FD
    3b1a:	28 17       	cp	r18, r24
    3b1c:	39 07       	cpc	r19, r25
    3b1e:	31 f4       	brne	.+12     	; 0x3b2c <__vector_52+0x3c>
    3b20:	80 91 d1 00 	lds	r24, 0x00D1
    3b24:	8f 7d       	andi	r24, 0xDF	; 223
    3b26:	80 93 d1 00 	sts	0x00D1, r24
    3b2a:	14 c0       	rjmp	.+40     	; 0x3b54 <__vector_52+0x64>
    3b2c:	e0 91 fc 08 	lds	r30, 0x08FC
    3b30:	f0 91 fd 08 	lds	r31, 0x08FD
    3b34:	e6 54       	subi	r30, 0x46	; 70
    3b36:	f7 4f       	sbci	r31, 0xF7	; 247
    3b38:	20 81       	ld	r18, Z
    3b3a:	80 91 fc 08 	lds	r24, 0x08FC
    3b3e:	90 91 fd 08 	lds	r25, 0x08FD
    3b42:	01 96       	adiw	r24, 0x01	; 1
    3b44:	8f 73       	andi	r24, 0x3F	; 63
    3b46:	90 70       	andi	r25, 0x00	; 0
    3b48:	90 93 fd 08 	sts	0x08FD, r25
    3b4c:	80 93 fc 08 	sts	0x08FC, r24
    3b50:	20 93 d6 00 	sts	0x00D6, r18
    3b54:	ff 91       	pop	r31
    3b56:	ef 91       	pop	r30
    3b58:	9f 91       	pop	r25
    3b5a:	8f 91       	pop	r24
    3b5c:	3f 91       	pop	r19
    3b5e:	2f 91       	pop	r18
    3b60:	0f 90       	pop	r0
    3b62:	0b be       	out	0x3b, r0	; 59
    3b64:	0f 90       	pop	r0
    3b66:	0f be       	out	0x3f, r0	; 63
    3b68:	0f 90       	pop	r0
    3b6a:	1f 90       	pop	r1
    3b6c:	18 95       	reti

00003b6e <__vector_55>:
    3b6e:	1f 92       	push	r1
    3b70:	0f 92       	push	r0
    3b72:	0f b6       	in	r0, 0x3f	; 63
    3b74:	0f 92       	push	r0
    3b76:	0b b6       	in	r0, 0x3b	; 59
    3b78:	0f 92       	push	r0
    3b7a:	11 24       	eor	r1, r1
    3b7c:	2f 93       	push	r18
    3b7e:	3f 93       	push	r19
    3b80:	8f 93       	push	r24
    3b82:	9f 93       	push	r25
    3b84:	ef 93       	push	r30
    3b86:	ff 93       	push	r31
    3b88:	20 91 82 09 	lds	r18, 0x0982
    3b8c:	30 91 83 09 	lds	r19, 0x0983
    3b90:	80 91 84 09 	lds	r24, 0x0984
    3b94:	90 91 85 09 	lds	r25, 0x0985
    3b98:	28 17       	cp	r18, r24
    3b9a:	39 07       	cpc	r19, r25
    3b9c:	31 f4       	brne	.+12     	; 0x3baa <__vector_55+0x3c>
    3b9e:	80 91 31 01 	lds	r24, 0x0131
    3ba2:	8f 7d       	andi	r24, 0xDF	; 223
    3ba4:	80 93 31 01 	sts	0x0131, r24
    3ba8:	14 c0       	rjmp	.+40     	; 0x3bd2 <__vector_55+0x64>
    3baa:	e0 91 84 09 	lds	r30, 0x0984
    3bae:	f0 91 85 09 	lds	r31, 0x0985
    3bb2:	ee 5b       	subi	r30, 0xBE	; 190
    3bb4:	f6 4f       	sbci	r31, 0xF6	; 246
    3bb6:	20 81       	ld	r18, Z
    3bb8:	80 91 84 09 	lds	r24, 0x0984
    3bbc:	90 91 85 09 	lds	r25, 0x0985
    3bc0:	01 96       	adiw	r24, 0x01	; 1
    3bc2:	8f 73       	andi	r24, 0x3F	; 63
    3bc4:	90 70       	andi	r25, 0x00	; 0
    3bc6:	90 93 85 09 	sts	0x0985, r25
    3bca:	80 93 84 09 	sts	0x0984, r24
    3bce:	20 93 36 01 	sts	0x0136, r18
    3bd2:	ff 91       	pop	r31
    3bd4:	ef 91       	pop	r30
    3bd6:	9f 91       	pop	r25
    3bd8:	8f 91       	pop	r24
    3bda:	3f 91       	pop	r19
    3bdc:	2f 91       	pop	r18
    3bde:	0f 90       	pop	r0
    3be0:	0b be       	out	0x3b, r0	; 59
    3be2:	0f 90       	pop	r0
    3be4:	0f be       	out	0x3f, r0	; 63
    3be6:	0f 90       	pop	r0
    3be8:	1f 90       	pop	r1
    3bea:	18 95       	reti

00003bec <_ZN14HardwareSerial5beginEm>:
    3bec:	af 92       	push	r10
    3bee:	bf 92       	push	r11
    3bf0:	df 92       	push	r13
    3bf2:	ef 92       	push	r14
    3bf4:	ff 92       	push	r15
    3bf6:	0f 93       	push	r16
    3bf8:	1f 93       	push	r17
    3bfa:	cf 93       	push	r28
    3bfc:	df 93       	push	r29
    3bfe:	ec 01       	movw	r28, r24
    3c00:	7a 01       	movw	r14, r20
    3c02:	8b 01       	movw	r16, r22
    3c04:	dd 24       	eor	r13, r13
    3c06:	40 30       	cpi	r20, 0x00	; 0
    3c08:	81 ee       	ldi	r24, 0xE1	; 225
    3c0a:	58 07       	cpc	r21, r24
    3c0c:	80 e0       	ldi	r24, 0x00	; 0
    3c0e:	68 07       	cpc	r22, r24
    3c10:	80 e0       	ldi	r24, 0x00	; 0
    3c12:	78 07       	cpc	r23, r24
    3c14:	11 f0       	breq	.+4      	; 0x3c1a <_ZN14HardwareSerial5beginEm+0x2e>
    3c16:	dd 24       	eor	r13, r13
    3c18:	d3 94       	inc	r13
    3c1a:	91 e0       	ldi	r25, 0x01	; 1
    3c1c:	a9 2e       	mov	r10, r25
    3c1e:	b1 2c       	mov	r11, r1
    3c20:	ec 89       	ldd	r30, Y+20	; 0x14
    3c22:	fd 89       	ldd	r31, Y+21	; 0x15
    3c24:	dd 20       	and	r13, r13
    3c26:	69 f0       	breq	.+26     	; 0x3c42 <_ZN14HardwareSerial5beginEm+0x56>
    3c28:	c5 01       	movw	r24, r10
    3c2a:	08 a0       	lds	r16, 0x88
    3c2c:	02 c0       	rjmp	.+4      	; 0x3c32 <_ZN14HardwareSerial5beginEm+0x46>
    3c2e:	88 0f       	add	r24, r24
    3c30:	99 1f       	adc	r25, r25
    3c32:	0a 94       	dec	r0
    3c34:	e2 f7       	brpl	.-8      	; 0x3c2e <_ZN14HardwareSerial5beginEm+0x42>
    3c36:	80 83       	st	Z, r24
    3c38:	60 e0       	ldi	r22, 0x00	; 0
    3c3a:	79 e0       	ldi	r23, 0x09	; 9
    3c3c:	8d e3       	ldi	r24, 0x3D	; 61
    3c3e:	90 e0       	ldi	r25, 0x00	; 0
    3c40:	05 c0       	rjmp	.+10     	; 0x3c4c <_ZN14HardwareSerial5beginEm+0x60>
    3c42:	10 82       	st	Z, r1
    3c44:	60 e8       	ldi	r22, 0x80	; 128
    3c46:	74 e8       	ldi	r23, 0x84	; 132
    3c48:	8e e1       	ldi	r24, 0x1E	; 30
    3c4a:	90 e0       	ldi	r25, 0x00	; 0
    3c4c:	a8 01       	movw	r20, r16
    3c4e:	97 01       	movw	r18, r14
    3c50:	0e 94 07 22 	call	0x440e	; 0x440e <__udivmodsi4>
    3c54:	21 50       	subi	r18, 0x01	; 1
    3c56:	30 40       	sbci	r19, 0x00	; 0
    3c58:	40 40       	sbci	r20, 0x00	; 0
    3c5a:	50 40       	sbci	r21, 0x00	; 0
    3c5c:	56 95       	lsr	r21
    3c5e:	47 95       	ror	r20
    3c60:	37 95       	ror	r19
    3c62:	27 95       	ror	r18
    3c64:	80 e1       	ldi	r24, 0x10	; 16
    3c66:	20 30       	cpi	r18, 0x00	; 0
    3c68:	38 07       	cpc	r19, r24
    3c6a:	20 f0       	brcs	.+8      	; 0x3c74 <_ZN14HardwareSerial5beginEm+0x88>
    3c6c:	dd 20       	and	r13, r13
    3c6e:	11 f0       	breq	.+4      	; 0x3c74 <_ZN14HardwareSerial5beginEm+0x88>
    3c70:	dd 24       	eor	r13, r13
    3c72:	d6 cf       	rjmp	.-84     	; 0x3c20 <_ZN14HardwareSerial5beginEm+0x34>
    3c74:	e8 89       	ldd	r30, Y+16	; 0x10
    3c76:	f9 89       	ldd	r31, Y+17	; 0x11
    3c78:	30 83       	st	Z, r19
    3c7a:	ea 89       	ldd	r30, Y+18	; 0x12
    3c7c:	fb 89       	ldd	r31, Y+19	; 0x13
    3c7e:	20 83       	st	Z, r18
    3c80:	19 a2       	lds	r17, 0x99
    3c82:	ee 89       	ldd	r30, Y+22	; 0x16
    3c84:	ff 89       	ldd	r31, Y+23	; 0x17
    3c86:	40 81       	ld	r20, Z
    3c88:	21 e0       	ldi	r18, 0x01	; 1
    3c8a:	30 e0       	ldi	r19, 0x00	; 0
    3c8c:	c9 01       	movw	r24, r18
    3c8e:	0c 8c       	ldd	r0, Y+28	; 0x1c
    3c90:	02 c0       	rjmp	.+4      	; 0x3c96 <_ZN14HardwareSerial5beginEm+0xaa>
    3c92:	88 0f       	add	r24, r24
    3c94:	99 1f       	adc	r25, r25
    3c96:	0a 94       	dec	r0
    3c98:	e2 f7       	brpl	.-8      	; 0x3c92 <_ZN14HardwareSerial5beginEm+0xa6>
    3c9a:	48 2b       	or	r20, r24
    3c9c:	40 83       	st	Z, r20
    3c9e:	ee 89       	ldd	r30, Y+22	; 0x16
    3ca0:	ff 89       	ldd	r31, Y+23	; 0x17
    3ca2:	40 81       	ld	r20, Z
    3ca4:	c9 01       	movw	r24, r18
    3ca6:	0d 8c       	ldd	r0, Y+29	; 0x1d
    3ca8:	02 c0       	rjmp	.+4      	; 0x3cae <_ZN14HardwareSerial5beginEm+0xc2>
    3caa:	88 0f       	add	r24, r24
    3cac:	99 1f       	adc	r25, r25
    3cae:	0a 94       	dec	r0
    3cb0:	e2 f7       	brpl	.-8      	; 0x3caa <_ZN14HardwareSerial5beginEm+0xbe>
    3cb2:	48 2b       	or	r20, r24
    3cb4:	40 83       	st	Z, r20
    3cb6:	ee 89       	ldd	r30, Y+22	; 0x16
    3cb8:	ff 89       	ldd	r31, Y+23	; 0x17
    3cba:	40 81       	ld	r20, Z
    3cbc:	c9 01       	movw	r24, r18
    3cbe:	0e 8c       	ldd	r0, Y+30	; 0x1e
    3cc0:	02 c0       	rjmp	.+4      	; 0x3cc6 <_ZN14HardwareSerial5beginEm+0xda>
    3cc2:	88 0f       	add	r24, r24
    3cc4:	99 1f       	adc	r25, r25
    3cc6:	0a 94       	dec	r0
    3cc8:	e2 f7       	brpl	.-8      	; 0x3cc2 <_ZN14HardwareSerial5beginEm+0xd6>
    3cca:	48 2b       	or	r20, r24
    3ccc:	40 83       	st	Z, r20
    3cce:	ee 89       	ldd	r30, Y+22	; 0x16
    3cd0:	ff 89       	ldd	r31, Y+23	; 0x17
    3cd2:	80 81       	ld	r24, Z
    3cd4:	0f 8c       	ldd	r0, Y+31	; 0x1f
    3cd6:	02 c0       	rjmp	.+4      	; 0x3cdc <_ZN14HardwareSerial5beginEm+0xf0>
    3cd8:	22 0f       	add	r18, r18
    3cda:	33 1f       	adc	r19, r19
    3cdc:	0a 94       	dec	r0
    3cde:	e2 f7       	brpl	.-8      	; 0x3cd8 <_ZN14HardwareSerial5beginEm+0xec>
    3ce0:	20 95       	com	r18
    3ce2:	28 23       	and	r18, r24
    3ce4:	20 83       	st	Z, r18
    3ce6:	df 91       	pop	r29
    3ce8:	cf 91       	pop	r28
    3cea:	1f 91       	pop	r17
    3cec:	0f 91       	pop	r16
    3cee:	ff 90       	pop	r15
    3cf0:	ef 90       	pop	r14
    3cf2:	df 90       	pop	r13
    3cf4:	bf 90       	pop	r11
    3cf6:	af 90       	pop	r10
    3cf8:	08 95       	ret

00003cfa <_ZN14HardwareSerial9availableEv>:
    3cfa:	dc 01       	movw	r26, r24
    3cfc:	1c 96       	adiw	r26, 0x0c	; 12
    3cfe:	ed 91       	ld	r30, X+
    3d00:	fc 91       	ld	r31, X
    3d02:	1d 97       	sbiw	r26, 0x0d	; 13
    3d04:	e0 5c       	subi	r30, 0xC0	; 192
    3d06:	ff 4f       	sbci	r31, 0xFF	; 255
    3d08:	81 91       	ld	r24, Z+
    3d0a:	91 91       	ld	r25, Z+
    3d0c:	20 81       	ld	r18, Z
    3d0e:	31 81       	ldd	r19, Z+1	; 0x01
    3d10:	80 5c       	subi	r24, 0xC0	; 192
    3d12:	9f 4f       	sbci	r25, 0xFF	; 255
    3d14:	82 1b       	sub	r24, r18
    3d16:	93 0b       	sbc	r25, r19
    3d18:	60 e4       	ldi	r22, 0x40	; 64
    3d1a:	70 e0       	ldi	r23, 0x00	; 0
    3d1c:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <__divmodhi4>
    3d20:	08 95       	ret

00003d22 <_ZN14HardwareSerial4peekEv>:
    3d22:	dc 01       	movw	r26, r24
    3d24:	1c 96       	adiw	r26, 0x0c	; 12
    3d26:	ed 91       	ld	r30, X+
    3d28:	fc 91       	ld	r31, X
    3d2a:	1d 97       	sbiw	r26, 0x0d	; 13
    3d2c:	e0 5c       	subi	r30, 0xC0	; 192
    3d2e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d30:	20 81       	ld	r18, Z
    3d32:	31 81       	ldd	r19, Z+1	; 0x01
    3d34:	e0 54       	subi	r30, 0x40	; 64
    3d36:	f0 40       	sbci	r31, 0x00	; 0
    3d38:	df 01       	movw	r26, r30
    3d3a:	ae 5b       	subi	r26, 0xBE	; 190
    3d3c:	bf 4f       	sbci	r27, 0xFF	; 255
    3d3e:	8d 91       	ld	r24, X+
    3d40:	9c 91       	ld	r25, X
    3d42:	11 97       	sbiw	r26, 0x01	; 1
    3d44:	28 17       	cp	r18, r24
    3d46:	39 07       	cpc	r19, r25
    3d48:	19 f4       	brne	.+6      	; 0x3d50 <_ZN14HardwareSerial4peekEv+0x2e>
    3d4a:	2f ef       	ldi	r18, 0xFF	; 255
    3d4c:	3f ef       	ldi	r19, 0xFF	; 255
    3d4e:	07 c0       	rjmp	.+14     	; 0x3d5e <_ZN14HardwareSerial4peekEv+0x3c>
    3d50:	8d 91       	ld	r24, X+
    3d52:	9c 91       	ld	r25, X
    3d54:	e8 0f       	add	r30, r24
    3d56:	f9 1f       	adc	r31, r25
    3d58:	80 81       	ld	r24, Z
    3d5a:	28 2f       	mov	r18, r24
    3d5c:	30 e0       	ldi	r19, 0x00	; 0
    3d5e:	c9 01       	movw	r24, r18
    3d60:	08 95       	ret

00003d62 <_ZN14HardwareSerial4readEv>:
    3d62:	dc 01       	movw	r26, r24
    3d64:	1c 96       	adiw	r26, 0x0c	; 12
    3d66:	ed 91       	ld	r30, X+
    3d68:	fc 91       	ld	r31, X
    3d6a:	1d 97       	sbiw	r26, 0x0d	; 13
    3d6c:	e0 5c       	subi	r30, 0xC0	; 192
    3d6e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d70:	20 81       	ld	r18, Z
    3d72:	31 81       	ldd	r19, Z+1	; 0x01
    3d74:	e0 54       	subi	r30, 0x40	; 64
    3d76:	f0 40       	sbci	r31, 0x00	; 0
    3d78:	df 01       	movw	r26, r30
    3d7a:	ae 5b       	subi	r26, 0xBE	; 190
    3d7c:	bf 4f       	sbci	r27, 0xFF	; 255
    3d7e:	8d 91       	ld	r24, X+
    3d80:	9c 91       	ld	r25, X
    3d82:	11 97       	sbiw	r26, 0x01	; 1
    3d84:	28 17       	cp	r18, r24
    3d86:	39 07       	cpc	r19, r25
    3d88:	19 f4       	brne	.+6      	; 0x3d90 <_ZN14HardwareSerial4readEv+0x2e>
    3d8a:	2f ef       	ldi	r18, 0xFF	; 255
    3d8c:	3f ef       	ldi	r19, 0xFF	; 255
    3d8e:	10 c0       	rjmp	.+32     	; 0x3db0 <_ZN14HardwareSerial4readEv+0x4e>
    3d90:	8d 91       	ld	r24, X+
    3d92:	9c 91       	ld	r25, X
    3d94:	11 97       	sbiw	r26, 0x01	; 1
    3d96:	e8 0f       	add	r30, r24
    3d98:	f9 1f       	adc	r31, r25
    3d9a:	20 81       	ld	r18, Z
    3d9c:	8d 91       	ld	r24, X+
    3d9e:	9c 91       	ld	r25, X
    3da0:	11 97       	sbiw	r26, 0x01	; 1
    3da2:	01 96       	adiw	r24, 0x01	; 1
    3da4:	8f 73       	andi	r24, 0x3F	; 63
    3da6:	90 70       	andi	r25, 0x00	; 0
    3da8:	11 96       	adiw	r26, 0x01	; 1
    3daa:	9c 93       	st	X, r25
    3dac:	8e 93       	st	-X, r24
    3dae:	30 e0       	ldi	r19, 0x00	; 0
    3db0:	c9 01       	movw	r24, r18
    3db2:	08 95       	ret

00003db4 <_ZN14HardwareSerial5flushEv>:
    3db4:	dc 01       	movw	r26, r24
    3db6:	91 96       	adiw	r26, 0x21	; 33
    3db8:	8c 91       	ld	r24, X
    3dba:	91 97       	sbiw	r26, 0x21	; 33
    3dbc:	88 23       	and	r24, r24
    3dbe:	39 f0       	breq	.+14     	; 0x3dce <_ZN14HardwareSerial5flushEv+0x1a>
    3dc0:	54 96       	adiw	r26, 0x14	; 20
    3dc2:	ed 91       	ld	r30, X+
    3dc4:	fc 91       	ld	r31, X
    3dc6:	55 97       	sbiw	r26, 0x15	; 21
    3dc8:	80 81       	ld	r24, Z
    3dca:	86 ff       	sbrs	r24, 6
    3dcc:	f9 cf       	rjmp	.-14     	; 0x3dc0 <_ZN14HardwareSerial5flushEv+0xc>
    3dce:	91 96       	adiw	r26, 0x21	; 33
    3dd0:	1c 92       	st	X, r1
    3dd2:	08 95       	ret

00003dd4 <_ZN14HardwareSerial5writeEh>:
    3dd4:	cf 93       	push	r28
    3dd6:	df 93       	push	r29
    3dd8:	ec 01       	movw	r28, r24
    3dda:	ee 85       	ldd	r30, Y+14	; 0x0e
    3ddc:	ff 85       	ldd	r31, Y+15	; 0x0f
    3dde:	e0 5c       	subi	r30, 0xC0	; 192
    3de0:	ff 4f       	sbci	r31, 0xFF	; 255
    3de2:	20 81       	ld	r18, Z
    3de4:	31 81       	ldd	r19, Z+1	; 0x01
    3de6:	e0 54       	subi	r30, 0x40	; 64
    3de8:	f0 40       	sbci	r31, 0x00	; 0
    3dea:	2f 5f       	subi	r18, 0xFF	; 255
    3dec:	3f 4f       	sbci	r19, 0xFF	; 255
    3dee:	2f 73       	andi	r18, 0x3F	; 63
    3df0:	30 70       	andi	r19, 0x00	; 0
    3df2:	df 01       	movw	r26, r30
    3df4:	ae 5b       	subi	r26, 0xBE	; 190
    3df6:	bf 4f       	sbci	r27, 0xFF	; 255
    3df8:	8d 91       	ld	r24, X+
    3dfa:	9c 91       	ld	r25, X
    3dfc:	11 97       	sbiw	r26, 0x01	; 1
    3dfe:	28 17       	cp	r18, r24
    3e00:	39 07       	cpc	r19, r25
    3e02:	d1 f3       	breq	.-12     	; 0x3df8 <_ZN14HardwareSerial5writeEh+0x24>
    3e04:	e0 5c       	subi	r30, 0xC0	; 192
    3e06:	ff 4f       	sbci	r31, 0xFF	; 255
    3e08:	80 81       	ld	r24, Z
    3e0a:	91 81       	ldd	r25, Z+1	; 0x01
    3e0c:	e0 54       	subi	r30, 0x40	; 64
    3e0e:	f0 40       	sbci	r31, 0x00	; 0
    3e10:	e8 0f       	add	r30, r24
    3e12:	f9 1f       	adc	r31, r25
    3e14:	60 83       	st	Z, r22
    3e16:	ee 85       	ldd	r30, Y+14	; 0x0e
    3e18:	ff 85       	ldd	r31, Y+15	; 0x0f
    3e1a:	e0 5c       	subi	r30, 0xC0	; 192
    3e1c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e1e:	31 83       	std	Z+1, r19	; 0x01
    3e20:	20 83       	st	Z, r18
    3e22:	ee 89       	ldd	r30, Y+22	; 0x16
    3e24:	ff 89       	ldd	r31, Y+23	; 0x17
    3e26:	20 81       	ld	r18, Z
    3e28:	81 e0       	ldi	r24, 0x01	; 1
    3e2a:	90 e0       	ldi	r25, 0x00	; 0
    3e2c:	0f 8c       	ldd	r0, Y+31	; 0x1f
    3e2e:	02 c0       	rjmp	.+4      	; 0x3e34 <_ZN14HardwareSerial5writeEh+0x60>
    3e30:	88 0f       	add	r24, r24
    3e32:	99 1f       	adc	r25, r25
    3e34:	0a 94       	dec	r0
    3e36:	e2 f7       	brpl	.-8      	; 0x3e30 <_ZN14HardwareSerial5writeEh+0x5c>
    3e38:	28 2b       	or	r18, r24
    3e3a:	20 83       	st	Z, r18
    3e3c:	81 e0       	ldi	r24, 0x01	; 1
    3e3e:	89 a3       	lds	r24, 0x59
    3e40:	ec 89       	ldd	r30, Y+20	; 0x14
    3e42:	fd 89       	ldd	r31, Y+21	; 0x15
    3e44:	80 81       	ld	r24, Z
    3e46:	80 64       	ori	r24, 0x40	; 64
    3e48:	80 83       	st	Z, r24
    3e4a:	81 e0       	ldi	r24, 0x01	; 1
    3e4c:	90 e0       	ldi	r25, 0x00	; 0
    3e4e:	df 91       	pop	r29
    3e50:	cf 91       	pop	r28
    3e52:	08 95       	ret

00003e54 <_GLOBAL__I_rx_buffer>:
#endif
#if defined(UBRR2H)
  HardwareSerial Serial2(&rx_buffer2, &tx_buffer2, &UBRR2H, &UBRR2L, &UCSR2A, &UCSR2B, &UCSR2C, &UDR2, RXEN2, TXEN2, RXCIE2, UDRIE2, U2X2);
#endif
#if defined(UBRR3H)
  HardwareSerial Serial3(&rx_buffer3, &tx_buffer3, &UBRR3H, &UBRR3L, &UCSR3A, &UCSR3B, &UCSR3C, &UDR3, RXEN3, TXEN3, RXCIE3, UDRIE3, U2X3);
    3e54:	1f 93       	push	r17
    3e56:	10 92 89 09 	sts	0x0989, r1
    3e5a:	10 92 88 09 	sts	0x0988, r1
    3e5e:	28 ee       	ldi	r18, 0xE8	; 232
    3e60:	33 e0       	ldi	r19, 0x03	; 3
    3e62:	40 e0       	ldi	r20, 0x00	; 0
    3e64:	50 e0       	ldi	r21, 0x00	; 0
    3e66:	20 93 8a 09 	sts	0x098A, r18
    3e6a:	30 93 8b 09 	sts	0x098B, r19
    3e6e:	40 93 8c 09 	sts	0x098C, r20
    3e72:	50 93 8d 09 	sts	0x098D, r21

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    3e76:	67 ec       	ldi	r22, 0xC7	; 199
    3e78:	74 e0       	ldi	r23, 0x04	; 4
    3e7a:	70 93 87 09 	sts	0x0987, r23
    3e7e:	60 93 86 09 	sts	0x0986, r22
{
  _rx_buffer = rx_buffer;
    3e82:	86 e6       	ldi	r24, 0x66	; 102
    3e84:	97 e0       	ldi	r25, 0x07	; 7
    3e86:	90 93 93 09 	sts	0x0993, r25
    3e8a:	80 93 92 09 	sts	0x0992, r24
  _tx_buffer = tx_buffer;
    3e8e:	8a ea       	ldi	r24, 0xAA	; 170
    3e90:	97 e0       	ldi	r25, 0x07	; 7
    3e92:	90 93 95 09 	sts	0x0995, r25
    3e96:	80 93 94 09 	sts	0x0994, r24
  _ubrrh = ubrrh;
    3e9a:	85 ec       	ldi	r24, 0xC5	; 197
    3e9c:	90 e0       	ldi	r25, 0x00	; 0
    3e9e:	90 93 97 09 	sts	0x0997, r25
    3ea2:	80 93 96 09 	sts	0x0996, r24
  _ubrrl = ubrrl;
    3ea6:	84 ec       	ldi	r24, 0xC4	; 196
    3ea8:	90 e0       	ldi	r25, 0x00	; 0
    3eaa:	90 93 99 09 	sts	0x0999, r25
    3eae:	80 93 98 09 	sts	0x0998, r24
  _ucsra = ucsra;
    3eb2:	80 ec       	ldi	r24, 0xC0	; 192
    3eb4:	90 e0       	ldi	r25, 0x00	; 0
    3eb6:	90 93 9b 09 	sts	0x099B, r25
    3eba:	80 93 9a 09 	sts	0x099A, r24
  _ucsrb = ucsrb;
    3ebe:	81 ec       	ldi	r24, 0xC1	; 193
    3ec0:	90 e0       	ldi	r25, 0x00	; 0
    3ec2:	90 93 9d 09 	sts	0x099D, r25
    3ec6:	80 93 9c 09 	sts	0x099C, r24
  _ucsrc = ucsrc;
    3eca:	82 ec       	ldi	r24, 0xC2	; 194
    3ecc:	90 e0       	ldi	r25, 0x00	; 0
    3ece:	90 93 9f 09 	sts	0x099F, r25
    3ed2:	80 93 9e 09 	sts	0x099E, r24
  _udr = udr;
    3ed6:	86 ec       	ldi	r24, 0xC6	; 198
    3ed8:	90 e0       	ldi	r25, 0x00	; 0
    3eda:	90 93 a1 09 	sts	0x09A1, r25
    3ede:	80 93 a0 09 	sts	0x09A0, r24
  _rxen = rxen;
    3ee2:	14 e0       	ldi	r17, 0x04	; 4
    3ee4:	10 93 a2 09 	sts	0x09A2, r17
  _txen = txen;
    3ee8:	b3 e0       	ldi	r27, 0x03	; 3
    3eea:	b0 93 a3 09 	sts	0x09A3, r27
  _rxcie = rxcie;
    3eee:	a7 e0       	ldi	r26, 0x07	; 7
    3ef0:	a0 93 a4 09 	sts	0x09A4, r26
  _udrie = udrie;
    3ef4:	f5 e0       	ldi	r31, 0x05	; 5
    3ef6:	f0 93 a5 09 	sts	0x09A5, r31
  _u2x = u2x;
    3efa:	e1 e0       	ldi	r30, 0x01	; 1
    3efc:	e0 93 a6 09 	sts	0x09A6, r30
    3f00:	10 92 ab 09 	sts	0x09AB, r1
    3f04:	10 92 aa 09 	sts	0x09AA, r1
    3f08:	20 93 ac 09 	sts	0x09AC, r18
    3f0c:	30 93 ad 09 	sts	0x09AD, r19
    3f10:	40 93 ae 09 	sts	0x09AE, r20
    3f14:	50 93 af 09 	sts	0x09AF, r21

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    3f18:	70 93 a9 09 	sts	0x09A9, r23
    3f1c:	60 93 a8 09 	sts	0x09A8, r22
{
  _rx_buffer = rx_buffer;
    3f20:	8e ee       	ldi	r24, 0xEE	; 238
    3f22:	97 e0       	ldi	r25, 0x07	; 7
    3f24:	90 93 b5 09 	sts	0x09B5, r25
    3f28:	80 93 b4 09 	sts	0x09B4, r24
  _tx_buffer = tx_buffer;
    3f2c:	82 e3       	ldi	r24, 0x32	; 50
    3f2e:	98 e0       	ldi	r25, 0x08	; 8
    3f30:	90 93 b7 09 	sts	0x09B7, r25
    3f34:	80 93 b6 09 	sts	0x09B6, r24
  _ubrrh = ubrrh;
    3f38:	8d ec       	ldi	r24, 0xCD	; 205
    3f3a:	90 e0       	ldi	r25, 0x00	; 0
    3f3c:	90 93 b9 09 	sts	0x09B9, r25
    3f40:	80 93 b8 09 	sts	0x09B8, r24
  _ubrrl = ubrrl;
    3f44:	8c ec       	ldi	r24, 0xCC	; 204
    3f46:	90 e0       	ldi	r25, 0x00	; 0
    3f48:	90 93 bb 09 	sts	0x09BB, r25
    3f4c:	80 93 ba 09 	sts	0x09BA, r24
  _ucsra = ucsra;
    3f50:	88 ec       	ldi	r24, 0xC8	; 200
    3f52:	90 e0       	ldi	r25, 0x00	; 0
    3f54:	90 93 bd 09 	sts	0x09BD, r25
    3f58:	80 93 bc 09 	sts	0x09BC, r24
  _ucsrb = ucsrb;
    3f5c:	89 ec       	ldi	r24, 0xC9	; 201
    3f5e:	90 e0       	ldi	r25, 0x00	; 0
    3f60:	90 93 bf 09 	sts	0x09BF, r25
    3f64:	80 93 be 09 	sts	0x09BE, r24
  _ucsrc = ucsrc;
    3f68:	8a ec       	ldi	r24, 0xCA	; 202
    3f6a:	90 e0       	ldi	r25, 0x00	; 0
    3f6c:	90 93 c1 09 	sts	0x09C1, r25
    3f70:	80 93 c0 09 	sts	0x09C0, r24
  _udr = udr;
    3f74:	8e ec       	ldi	r24, 0xCE	; 206
    3f76:	90 e0       	ldi	r25, 0x00	; 0
    3f78:	90 93 c3 09 	sts	0x09C3, r25
    3f7c:	80 93 c2 09 	sts	0x09C2, r24
  _rxen = rxen;
    3f80:	10 93 c4 09 	sts	0x09C4, r17
  _txen = txen;
    3f84:	b0 93 c5 09 	sts	0x09C5, r27
  _rxcie = rxcie;
    3f88:	a0 93 c6 09 	sts	0x09C6, r26
  _udrie = udrie;
    3f8c:	f0 93 c7 09 	sts	0x09C7, r31
  _u2x = u2x;
    3f90:	e0 93 c8 09 	sts	0x09C8, r30
    3f94:	10 92 cd 09 	sts	0x09CD, r1
    3f98:	10 92 cc 09 	sts	0x09CC, r1
    3f9c:	20 93 ce 09 	sts	0x09CE, r18
    3fa0:	30 93 cf 09 	sts	0x09CF, r19
    3fa4:	40 93 d0 09 	sts	0x09D0, r20
    3fa8:	50 93 d1 09 	sts	0x09D1, r21

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    3fac:	70 93 cb 09 	sts	0x09CB, r23
    3fb0:	60 93 ca 09 	sts	0x09CA, r22
{
  _rx_buffer = rx_buffer;
    3fb4:	86 e7       	ldi	r24, 0x76	; 118
    3fb6:	98 e0       	ldi	r25, 0x08	; 8
    3fb8:	90 93 d7 09 	sts	0x09D7, r25
    3fbc:	80 93 d6 09 	sts	0x09D6, r24
  _tx_buffer = tx_buffer;
    3fc0:	8a eb       	ldi	r24, 0xBA	; 186
    3fc2:	98 e0       	ldi	r25, 0x08	; 8
    3fc4:	90 93 d9 09 	sts	0x09D9, r25
    3fc8:	80 93 d8 09 	sts	0x09D8, r24
  _ubrrh = ubrrh;
    3fcc:	85 ed       	ldi	r24, 0xD5	; 213
    3fce:	90 e0       	ldi	r25, 0x00	; 0
    3fd0:	90 93 db 09 	sts	0x09DB, r25
    3fd4:	80 93 da 09 	sts	0x09DA, r24
  _ubrrl = ubrrl;
    3fd8:	84 ed       	ldi	r24, 0xD4	; 212
    3fda:	90 e0       	ldi	r25, 0x00	; 0
    3fdc:	90 93 dd 09 	sts	0x09DD, r25
    3fe0:	80 93 dc 09 	sts	0x09DC, r24
  _ucsra = ucsra;
    3fe4:	80 ed       	ldi	r24, 0xD0	; 208
    3fe6:	90 e0       	ldi	r25, 0x00	; 0
    3fe8:	90 93 df 09 	sts	0x09DF, r25
    3fec:	80 93 de 09 	sts	0x09DE, r24
  _ucsrb = ucsrb;
    3ff0:	81 ed       	ldi	r24, 0xD1	; 209
    3ff2:	90 e0       	ldi	r25, 0x00	; 0
    3ff4:	90 93 e1 09 	sts	0x09E1, r25
    3ff8:	80 93 e0 09 	sts	0x09E0, r24
  _ucsrc = ucsrc;
    3ffc:	82 ed       	ldi	r24, 0xD2	; 210
    3ffe:	90 e0       	ldi	r25, 0x00	; 0
    4000:	90 93 e3 09 	sts	0x09E3, r25
    4004:	80 93 e2 09 	sts	0x09E2, r24
  _udr = udr;
    4008:	86 ed       	ldi	r24, 0xD6	; 214
    400a:	90 e0       	ldi	r25, 0x00	; 0
    400c:	90 93 e5 09 	sts	0x09E5, r25
    4010:	80 93 e4 09 	sts	0x09E4, r24
  _rxen = rxen;
    4014:	10 93 e6 09 	sts	0x09E6, r17
  _txen = txen;
    4018:	b0 93 e7 09 	sts	0x09E7, r27
  _rxcie = rxcie;
    401c:	a0 93 e8 09 	sts	0x09E8, r26
  _udrie = udrie;
    4020:	f0 93 e9 09 	sts	0x09E9, r31
  _u2x = u2x;
    4024:	e0 93 ea 09 	sts	0x09EA, r30
    4028:	10 92 ef 09 	sts	0x09EF, r1
    402c:	10 92 ee 09 	sts	0x09EE, r1
    4030:	20 93 f0 09 	sts	0x09F0, r18
    4034:	30 93 f1 09 	sts	0x09F1, r19
    4038:	40 93 f2 09 	sts	0x09F2, r20
    403c:	50 93 f3 09 	sts	0x09F3, r21

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    4040:	70 93 ed 09 	sts	0x09ED, r23
    4044:	60 93 ec 09 	sts	0x09EC, r22
{
  _rx_buffer = rx_buffer;
    4048:	8e ef       	ldi	r24, 0xFE	; 254
    404a:	98 e0       	ldi	r25, 0x08	; 8
    404c:	90 93 f9 09 	sts	0x09F9, r25
    4050:	80 93 f8 09 	sts	0x09F8, r24
  _tx_buffer = tx_buffer;
    4054:	82 e4       	ldi	r24, 0x42	; 66
    4056:	99 e0       	ldi	r25, 0x09	; 9
    4058:	90 93 fb 09 	sts	0x09FB, r25
    405c:	80 93 fa 09 	sts	0x09FA, r24
  _ubrrh = ubrrh;
    4060:	85 e3       	ldi	r24, 0x35	; 53
    4062:	91 e0       	ldi	r25, 0x01	; 1
    4064:	90 93 fd 09 	sts	0x09FD, r25
    4068:	80 93 fc 09 	sts	0x09FC, r24
  _ubrrl = ubrrl;
    406c:	84 e3       	ldi	r24, 0x34	; 52
    406e:	91 e0       	ldi	r25, 0x01	; 1
    4070:	90 93 ff 09 	sts	0x09FF, r25
    4074:	80 93 fe 09 	sts	0x09FE, r24
  _ucsra = ucsra;
    4078:	80 e3       	ldi	r24, 0x30	; 48
    407a:	91 e0       	ldi	r25, 0x01	; 1
    407c:	90 93 01 0a 	sts	0x0A01, r25
    4080:	80 93 00 0a 	sts	0x0A00, r24
  _ucsrb = ucsrb;
    4084:	81 e3       	ldi	r24, 0x31	; 49
    4086:	91 e0       	ldi	r25, 0x01	; 1
    4088:	90 93 03 0a 	sts	0x0A03, r25
    408c:	80 93 02 0a 	sts	0x0A02, r24
  _ucsrc = ucsrc;
    4090:	82 e3       	ldi	r24, 0x32	; 50
    4092:	91 e0       	ldi	r25, 0x01	; 1
    4094:	90 93 05 0a 	sts	0x0A05, r25
    4098:	80 93 04 0a 	sts	0x0A04, r24
  _udr = udr;
    409c:	86 e3       	ldi	r24, 0x36	; 54
    409e:	91 e0       	ldi	r25, 0x01	; 1
    40a0:	90 93 07 0a 	sts	0x0A07, r25
    40a4:	80 93 06 0a 	sts	0x0A06, r24
  _rxen = rxen;
    40a8:	10 93 08 0a 	sts	0x0A08, r17
  _txen = txen;
    40ac:	b0 93 09 0a 	sts	0x0A09, r27
  _rxcie = rxcie;
    40b0:	a0 93 0a 0a 	sts	0x0A0A, r26
  _udrie = udrie;
    40b4:	f0 93 0b 0a 	sts	0x0A0B, r31
  _u2x = u2x;
    40b8:	e0 93 0c 0a 	sts	0x0A0C, r30
#endif
#if defined(UBRR2H)
  HardwareSerial Serial2(&rx_buffer2, &tx_buffer2, &UBRR2H, &UBRR2L, &UCSR2A, &UCSR2B, &UCSR2C, &UDR2, RXEN2, TXEN2, RXCIE2, UDRIE2, U2X2);
#endif
#if defined(UBRR3H)
  HardwareSerial Serial3(&rx_buffer3, &tx_buffer3, &UBRR3H, &UBRR3L, &UCSR3A, &UCSR3B, &UCSR3C, &UDR3, RXEN3, TXEN3, RXCIE3, UDRIE3, U2X3);
    40bc:	1f 91       	pop	r17
    40be:	08 95       	ret

000040c0 <initVariant>:
int atexit(void (*func)()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    40c0:	08 95       	ret

000040c2 <main>:

int main(void)
    40c2:	cf 93       	push	r28
    40c4:	df 93       	push	r29
{
	init();
    40c6:	0e 94 59 1a 	call	0x34b2	; 0x34b2 <init>

	initVariant();
    40ca:	0e 94 60 20 	call	0x40c0	; 0x40c0 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    40ce:	0e 94 0c 05 	call	0xa18	; 0xa18 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    40d2:	c1 ea       	ldi	r28, 0xA1	; 161
    40d4:	dc e1       	ldi	r29, 0x1C	; 28
#endif
	
	setup();
    
	for (;;) {
		loop();
    40d6:	0e 94 49 06 	call	0xc92	; 0xc92 <loop>
		if (serialEventRun) serialEventRun();
    40da:	20 97       	sbiw	r28, 0x00	; 0
    40dc:	e1 f3       	breq	.-8      	; 0x40d6 <main+0x14>
    40de:	0e 94 a1 1c 	call	0x3942	; 0x3942 <_Z14serialEventRunv>
    40e2:	f9 cf       	rjmp	.-14     	; 0x40d6 <main+0x14>

000040e4 <__cxa_pure_virtual>:

int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
void __cxa_guard_abort (__guard *) {}; 

void __cxa_pure_virtual(void) {};
    40e4:	08 95       	ret

000040e6 <_ZN5Print5writeEPKhj>:
size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
  return n;
}
    40e6:	cf 92       	push	r12
    40e8:	df 92       	push	r13
    40ea:	ef 92       	push	r14
    40ec:	ff 92       	push	r15
    40ee:	0f 93       	push	r16
    40f0:	1f 93       	push	r17
    40f2:	cf 93       	push	r28
    40f4:	df 93       	push	r29
    40f6:	7c 01       	movw	r14, r24
    40f8:	6b 01       	movw	r12, r22
    40fa:	8a 01       	movw	r16, r20
    40fc:	c0 e0       	ldi	r28, 0x00	; 0
    40fe:	d0 e0       	ldi	r29, 0x00	; 0
    4100:	0f c0       	rjmp	.+30     	; 0x4120 <_ZN5Print5writeEPKhj+0x3a>
    4102:	d6 01       	movw	r26, r12
    4104:	6d 91       	ld	r22, X+
    4106:	6d 01       	movw	r12, r26
    4108:	d7 01       	movw	r26, r14
    410a:	ed 91       	ld	r30, X+
    410c:	fc 91       	ld	r31, X
    410e:	01 90       	ld	r0, Z+
    4110:	f0 81       	ld	r31, Z
    4112:	e0 2d       	mov	r30, r0
    4114:	c7 01       	movw	r24, r14
    4116:	19 95       	eicall
    4118:	c8 0f       	add	r28, r24
    411a:	d9 1f       	adc	r29, r25
    411c:	01 50       	subi	r16, 0x01	; 1
    411e:	10 40       	sbci	r17, 0x00	; 0
    4120:	01 15       	cp	r16, r1
    4122:	11 05       	cpc	r17, r1
    4124:	71 f7       	brne	.-36     	; 0x4102 <_ZN5Print5writeEPKhj+0x1c>
    4126:	ce 01       	movw	r24, r28
    4128:	df 91       	pop	r29
    412a:	cf 91       	pop	r28
    412c:	1f 91       	pop	r17
    412e:	0f 91       	pop	r16
    4130:	ff 90       	pop	r15
    4132:	ef 90       	pop	r14
    4134:	df 90       	pop	r13
    4136:	cf 90       	pop	r12
    4138:	08 95       	ret

0000413a <_ZN5Print7printlnEv>:
    413a:	ef 92       	push	r14
    413c:	ff 92       	push	r15
    413e:	0f 93       	push	r16
    4140:	1f 93       	push	r17
    4142:	8c 01       	movw	r16, r24
    4144:	dc 01       	movw	r26, r24
    4146:	ed 91       	ld	r30, X+
    4148:	fc 91       	ld	r31, X
    414a:	01 90       	ld	r0, Z+
    414c:	f0 81       	ld	r31, Z
    414e:	e0 2d       	mov	r30, r0
    4150:	6d e0       	ldi	r22, 0x0D	; 13
    4152:	19 95       	eicall
    4154:	7c 01       	movw	r14, r24
    4156:	d8 01       	movw	r26, r16
    4158:	ed 91       	ld	r30, X+
    415a:	fc 91       	ld	r31, X
    415c:	01 90       	ld	r0, Z+
    415e:	f0 81       	ld	r31, Z
    4160:	e0 2d       	mov	r30, r0
    4162:	c8 01       	movw	r24, r16
    4164:	6a e0       	ldi	r22, 0x0A	; 10
    4166:	19 95       	eicall
    4168:	9c 01       	movw	r18, r24
    416a:	2e 0d       	add	r18, r14
    416c:	3f 1d       	adc	r19, r15
    416e:	c9 01       	movw	r24, r18
    4170:	1f 91       	pop	r17
    4172:	0f 91       	pop	r16
    4174:	ff 90       	pop	r15
    4176:	ef 90       	pop	r14
    4178:	08 95       	ret

0000417a <_ZN5Print5writeEPKc>:
    417a:	cf 93       	push	r28
    417c:	df 93       	push	r29
    417e:	ec 01       	movw	r28, r24
    4180:	61 15       	cp	r22, r1
    4182:	71 05       	cpc	r23, r1
    4184:	19 f4       	brne	.+6      	; 0x418c <_ZN5Print5writeEPKc+0x12>
    4186:	20 e0       	ldi	r18, 0x00	; 0
    4188:	30 e0       	ldi	r19, 0x00	; 0
    418a:	0f c0       	rjmp	.+30     	; 0x41aa <_ZN5Print5writeEPKc+0x30>
    418c:	db 01       	movw	r26, r22
    418e:	0d 90       	ld	r0, X+
    4190:	00 20       	and	r0, r0
    4192:	e9 f7       	brne	.-6      	; 0x418e <_ZN5Print5writeEPKc+0x14>
    4194:	11 97       	sbiw	r26, 0x01	; 1
    4196:	a6 1b       	sub	r26, r22
    4198:	b7 0b       	sbc	r27, r23
    419a:	e8 81       	ld	r30, Y
    419c:	f9 81       	ldd	r31, Y+1	; 0x01
    419e:	02 80       	ldd	r0, Z+2	; 0x02
    41a0:	f3 81       	ldd	r31, Z+3	; 0x03
    41a2:	e0 2d       	mov	r30, r0
    41a4:	ad 01       	movw	r20, r26
    41a6:	19 95       	eicall
    41a8:	9c 01       	movw	r18, r24
    41aa:	c9 01       	movw	r24, r18
    41ac:	df 91       	pop	r29
    41ae:	cf 91       	pop	r28
    41b0:	08 95       	ret

000041b2 <_ZN5Print11printNumberEmh>:
    41b2:	4f 92       	push	r4
    41b4:	5f 92       	push	r5
    41b6:	7f 92       	push	r7
    41b8:	8f 92       	push	r8
    41ba:	9f 92       	push	r9
    41bc:	af 92       	push	r10
    41be:	bf 92       	push	r11
    41c0:	cf 92       	push	r12
    41c2:	df 92       	push	r13
    41c4:	ef 92       	push	r14
    41c6:	ff 92       	push	r15
    41c8:	0f 93       	push	r16
    41ca:	1f 93       	push	r17
    41cc:	df 93       	push	r29
    41ce:	cf 93       	push	r28
    41d0:	cd b7       	in	r28, 0x3d	; 61
    41d2:	de b7       	in	r29, 0x3e	; 62
    41d4:	a1 97       	sbiw	r28, 0x21	; 33
    41d6:	0f b6       	in	r0, 0x3f	; 63
    41d8:	f8 94       	cli
    41da:	de bf       	out	0x3e, r29	; 62
    41dc:	0f be       	out	0x3f, r0	; 63
    41de:	cd bf       	out	0x3d, r28	; 61
    41e0:	2c 01       	movw	r4, r24
    41e2:	74 2e       	mov	r7, r20
    41e4:	cb 01       	movw	r24, r22
    41e6:	22 30       	cpi	r18, 0x02	; 2
    41e8:	08 f4       	brcc	.+2      	; 0x41ec <_ZN5Print11printNumberEmh+0x3a>
    41ea:	2a e0       	ldi	r18, 0x0A	; 10
    41ec:	19 a2       	lds	r17, 0x99
    41ee:	31 e2       	ldi	r19, 0x21	; 33
    41f0:	c3 2e       	mov	r12, r19
    41f2:	d1 2c       	mov	r13, r1
    41f4:	cc 0e       	add	r12, r28
    41f6:	dd 1e       	adc	r13, r29
    41f8:	82 2e       	mov	r8, r18
    41fa:	99 24       	eor	r9, r9
    41fc:	aa 24       	eor	r10, r10
    41fe:	bb 24       	eor	r11, r11
    4200:	67 2d       	mov	r22, r7
    4202:	75 2f       	mov	r23, r21
    4204:	a5 01       	movw	r20, r10
    4206:	94 01       	movw	r18, r8
    4208:	0e 94 07 22 	call	0x440e	; 0x440e <__udivmodsi4>
    420c:	79 01       	movw	r14, r18
    420e:	8a 01       	movw	r16, r20
    4210:	c8 01       	movw	r24, r16
    4212:	b7 01       	movw	r22, r14
    4214:	a5 01       	movw	r20, r10
    4216:	94 01       	movw	r18, r8
    4218:	0e 94 d5 21 	call	0x43aa	; 0x43aa <__mulsi3>
    421c:	47 2d       	mov	r20, r7
    421e:	46 1b       	sub	r20, r22
    4220:	08 94       	sec
    4222:	c1 08       	sbc	r12, r1
    4224:	d1 08       	sbc	r13, r1
    4226:	4a 30       	cpi	r20, 0x0A	; 10
    4228:	14 f4       	brge	.+4      	; 0x422e <_ZN5Print11printNumberEmh+0x7c>
    422a:	40 5d       	subi	r20, 0xD0	; 208
    422c:	01 c0       	rjmp	.+2      	; 0x4230 <_ZN5Print11printNumberEmh+0x7e>
    422e:	49 5c       	subi	r20, 0xC9	; 201
    4230:	f6 01       	movw	r30, r12
    4232:	40 83       	st	Z, r20
    4234:	e1 14       	cp	r14, r1
    4236:	f1 04       	cpc	r15, r1
    4238:	01 05       	cpc	r16, r1
    423a:	11 05       	cpc	r17, r1
    423c:	21 f0       	breq	.+8      	; 0x4246 <_ZN5Print11printNumberEmh+0x94>
    423e:	7e 2c       	mov	r7, r14
    4240:	5f 2d       	mov	r21, r15
    4242:	c8 01       	movw	r24, r16
    4244:	dd cf       	rjmp	.-70     	; 0x4200 <_ZN5Print11printNumberEmh+0x4e>
    4246:	c2 01       	movw	r24, r4
    4248:	b6 01       	movw	r22, r12
    424a:	0e 94 bd 20 	call	0x417a	; 0x417a <_ZN5Print5writeEPKc>
    424e:	a1 96       	adiw	r28, 0x21	; 33
    4250:	0f b6       	in	r0, 0x3f	; 63
    4252:	f8 94       	cli
    4254:	de bf       	out	0x3e, r29	; 62
    4256:	0f be       	out	0x3f, r0	; 63
    4258:	cd bf       	out	0x3d, r28	; 61
    425a:	cf 91       	pop	r28
    425c:	df 91       	pop	r29
    425e:	1f 91       	pop	r17
    4260:	0f 91       	pop	r16
    4262:	ff 90       	pop	r15
    4264:	ef 90       	pop	r14
    4266:	df 90       	pop	r13
    4268:	cf 90       	pop	r12
    426a:	bf 90       	pop	r11
    426c:	af 90       	pop	r10
    426e:	9f 90       	pop	r9
    4270:	8f 90       	pop	r8
    4272:	7f 90       	pop	r7
    4274:	5f 90       	pop	r5
    4276:	4f 90       	pop	r4
    4278:	08 95       	ret

0000427a <_ZN5Print5printEmi>:
    427a:	dc 01       	movw	r26, r24
    427c:	21 15       	cp	r18, r1
    427e:	31 05       	cpc	r19, r1
    4280:	41 f4       	brne	.+16     	; 0x4292 <_ZN5Print5printEmi+0x18>
    4282:	ed 91       	ld	r30, X+
    4284:	fc 91       	ld	r31, X
    4286:	01 90       	ld	r0, Z+
    4288:	f0 81       	ld	r31, Z
    428a:	e0 2d       	mov	r30, r0
    428c:	64 2f       	mov	r22, r20
    428e:	19 95       	eicall
    4290:	08 95       	ret
    4292:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <_ZN5Print11printNumberEmh>
    4296:	08 95       	ret

00004298 <_ZN5Print7printlnEmi>:
    4298:	ef 92       	push	r14
    429a:	ff 92       	push	r15
    429c:	0f 93       	push	r16
    429e:	1f 93       	push	r17
    42a0:	7c 01       	movw	r14, r24
    42a2:	0e 94 3d 21 	call	0x427a	; 0x427a <_ZN5Print5printEmi>
    42a6:	8c 01       	movw	r16, r24
    42a8:	c7 01       	movw	r24, r14
    42aa:	0e 94 9d 20 	call	0x413a	; 0x413a <_ZN5Print7printlnEv>
    42ae:	9c 01       	movw	r18, r24
    42b0:	20 0f       	add	r18, r16
    42b2:	31 1f       	adc	r19, r17
    42b4:	c9 01       	movw	r24, r18
    42b6:	1f 91       	pop	r17
    42b8:	0f 91       	pop	r16
    42ba:	ff 90       	pop	r15
    42bc:	ef 90       	pop	r14
    42be:	08 95       	ret

000042c0 <_ZN5Print5printEli>:
    42c0:	cf 92       	push	r12
    42c2:	df 92       	push	r13
    42c4:	ef 92       	push	r14
    42c6:	ff 92       	push	r15
    42c8:	0f 93       	push	r16
    42ca:	1f 93       	push	r17
    42cc:	cf 93       	push	r28
    42ce:	df 93       	push	r29
    42d0:	ec 01       	movw	r28, r24
    42d2:	6a 01       	movw	r12, r20
    42d4:	7b 01       	movw	r14, r22
    42d6:	21 15       	cp	r18, r1
    42d8:	31 05       	cpc	r19, r1
    42da:	41 f4       	brne	.+16     	; 0x42ec <_ZN5Print5printEli+0x2c>
    42dc:	e8 81       	ld	r30, Y
    42de:	f9 81       	ldd	r31, Y+1	; 0x01
    42e0:	01 90       	ld	r0, Z+
    42e2:	f0 81       	ld	r31, Z
    42e4:	e0 2d       	mov	r30, r0
    42e6:	64 2f       	mov	r22, r20
    42e8:	19 95       	eicall
    42ea:	1f c0       	rjmp	.+62     	; 0x432a <_ZN5Print5printEli+0x6a>
    42ec:	2a 30       	cpi	r18, 0x0A	; 10
    42ee:	31 05       	cpc	r19, r1
    42f0:	d1 f4       	brne	.+52     	; 0x4326 <_ZN5Print5printEli+0x66>
    42f2:	77 ff       	sbrs	r23, 7
    42f4:	17 c0       	rjmp	.+46     	; 0x4324 <_ZN5Print5printEli+0x64>
    42f6:	e8 81       	ld	r30, Y
    42f8:	f9 81       	ldd	r31, Y+1	; 0x01
    42fa:	01 90       	ld	r0, Z+
    42fc:	f0 81       	ld	r31, Z
    42fe:	e0 2d       	mov	r30, r0
    4300:	6d e2       	ldi	r22, 0x2D	; 45
    4302:	19 95       	eicall
    4304:	8c 01       	movw	r16, r24
    4306:	44 27       	eor	r20, r20
    4308:	55 27       	eor	r21, r21
    430a:	ba 01       	movw	r22, r20
    430c:	4c 19       	sub	r20, r12
    430e:	5d 09       	sbc	r21, r13
    4310:	6e 09       	sbc	r22, r14
    4312:	7f 09       	sbc	r23, r15
    4314:	ce 01       	movw	r24, r28
    4316:	2a e0       	ldi	r18, 0x0A	; 10
    4318:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <_ZN5Print11printNumberEmh>
    431c:	98 01       	movw	r18, r16
    431e:	28 0f       	add	r18, r24
    4320:	39 1f       	adc	r19, r25
    4322:	04 c0       	rjmp	.+8      	; 0x432c <_ZN5Print5printEli+0x6c>
    4324:	2a e0       	ldi	r18, 0x0A	; 10
    4326:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <_ZN5Print11printNumberEmh>
    432a:	9c 01       	movw	r18, r24
    432c:	c9 01       	movw	r24, r18
    432e:	df 91       	pop	r29
    4330:	cf 91       	pop	r28
    4332:	1f 91       	pop	r17
    4334:	0f 91       	pop	r16
    4336:	ff 90       	pop	r15
    4338:	ef 90       	pop	r14
    433a:	df 90       	pop	r13
    433c:	cf 90       	pop	r12
    433e:	08 95       	ret

00004340 <_ZN5Print7printlnEii>:
    4340:	cf 92       	push	r12
    4342:	df 92       	push	r13
    4344:	ef 92       	push	r14
    4346:	ff 92       	push	r15
    4348:	0f 93       	push	r16
    434a:	1f 93       	push	r17
    434c:	6c 01       	movw	r12, r24
    434e:	7b 01       	movw	r14, r22
    4350:	9a 01       	movw	r18, r20
    4352:	00 27       	eor	r16, r16
    4354:	f7 fc       	sbrc	r15, 7
    4356:	00 95       	com	r16
    4358:	10 2f       	mov	r17, r16
    435a:	b8 01       	movw	r22, r16
    435c:	a7 01       	movw	r20, r14
    435e:	0e 94 60 21 	call	0x42c0	; 0x42c0 <_ZN5Print5printEli>
    4362:	8c 01       	movw	r16, r24
    4364:	c6 01       	movw	r24, r12
    4366:	0e 94 9d 20 	call	0x413a	; 0x413a <_ZN5Print7printlnEv>
    436a:	08 0f       	add	r16, r24
    436c:	19 1f       	adc	r17, r25
    436e:	c8 01       	movw	r24, r16
    4370:	1f 91       	pop	r17
    4372:	0f 91       	pop	r16
    4374:	ff 90       	pop	r15
    4376:	ef 90       	pop	r14
    4378:	df 90       	pop	r13
    437a:	cf 90       	pop	r12
    437c:	08 95       	ret

0000437e <_ZN5Print5printEPKc>:
    437e:	0e 94 bd 20 	call	0x417a	; 0x417a <_ZN5Print5writeEPKc>
    4382:	08 95       	ret

00004384 <_ZN5Print7printlnEPKc>:
  size_t n = print(s);
  n += println();
  return n;
}

size_t Print::println(const char c[])
    4384:	ef 92       	push	r14
    4386:	ff 92       	push	r15
    4388:	0f 93       	push	r16
    438a:	1f 93       	push	r17
    438c:	7c 01       	movw	r14, r24
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    438e:	0e 94 bd 20 	call	0x417a	; 0x417a <_ZN5Print5writeEPKc>
    4392:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
    4394:	c7 01       	movw	r24, r14
    4396:	0e 94 9d 20 	call	0x413a	; 0x413a <_ZN5Print7printlnEv>
    439a:	08 0f       	add	r16, r24
    439c:	19 1f       	adc	r17, r25
  return n;
}
    439e:	c8 01       	movw	r24, r16
    43a0:	1f 91       	pop	r17
    43a2:	0f 91       	pop	r16
    43a4:	ff 90       	pop	r15
    43a6:	ef 90       	pop	r14
    43a8:	08 95       	ret

000043aa <__mulsi3>:
    43aa:	62 9f       	mul	r22, r18
    43ac:	d0 01       	movw	r26, r0
    43ae:	73 9f       	mul	r23, r19
    43b0:	f0 01       	movw	r30, r0
    43b2:	82 9f       	mul	r24, r18
    43b4:	e0 0d       	add	r30, r0
    43b6:	f1 1d       	adc	r31, r1
    43b8:	64 9f       	mul	r22, r20
    43ba:	e0 0d       	add	r30, r0
    43bc:	f1 1d       	adc	r31, r1
    43be:	92 9f       	mul	r25, r18
    43c0:	f0 0d       	add	r31, r0
    43c2:	83 9f       	mul	r24, r19
    43c4:	f0 0d       	add	r31, r0
    43c6:	74 9f       	mul	r23, r20
    43c8:	f0 0d       	add	r31, r0
    43ca:	65 9f       	mul	r22, r21
    43cc:	f0 0d       	add	r31, r0
    43ce:	99 27       	eor	r25, r25
    43d0:	72 9f       	mul	r23, r18
    43d2:	b0 0d       	add	r27, r0
    43d4:	e1 1d       	adc	r30, r1
    43d6:	f9 1f       	adc	r31, r25
    43d8:	63 9f       	mul	r22, r19
    43da:	b0 0d       	add	r27, r0
    43dc:	e1 1d       	adc	r30, r1
    43de:	f9 1f       	adc	r31, r25
    43e0:	bd 01       	movw	r22, r26
    43e2:	cf 01       	movw	r24, r30
    43e4:	11 24       	eor	r1, r1
    43e6:	08 95       	ret

000043e8 <__divmodhi4>:
    43e8:	97 fb       	bst	r25, 7
    43ea:	09 2e       	mov	r0, r25
    43ec:	07 26       	eor	r0, r23
    43ee:	0a d0       	rcall	.+20     	; 0x4404 <__divmodhi4_neg1>
    43f0:	77 fd       	sbrc	r23, 7
    43f2:	04 d0       	rcall	.+8      	; 0x43fc <__divmodhi4_neg2>
    43f4:	2e d0       	rcall	.+92     	; 0x4452 <__udivmodhi4>
    43f6:	06 d0       	rcall	.+12     	; 0x4404 <__divmodhi4_neg1>
    43f8:	00 20       	and	r0, r0
    43fa:	1a f4       	brpl	.+6      	; 0x4402 <__divmodhi4_exit>

000043fc <__divmodhi4_neg2>:
    43fc:	70 95       	com	r23
    43fe:	61 95       	neg	r22
    4400:	7f 4f       	sbci	r23, 0xFF	; 255

00004402 <__divmodhi4_exit>:
    4402:	08 95       	ret

00004404 <__divmodhi4_neg1>:
    4404:	f6 f7       	brtc	.-4      	; 0x4402 <__divmodhi4_exit>
    4406:	90 95       	com	r25
    4408:	81 95       	neg	r24
    440a:	9f 4f       	sbci	r25, 0xFF	; 255
    440c:	08 95       	ret

0000440e <__udivmodsi4>:
    440e:	a1 e2       	ldi	r26, 0x21	; 33
    4410:	1a 2e       	mov	r1, r26
    4412:	aa 1b       	sub	r26, r26
    4414:	bb 1b       	sub	r27, r27
    4416:	fd 01       	movw	r30, r26
    4418:	0d c0       	rjmp	.+26     	; 0x4434 <__udivmodsi4_ep>

0000441a <__udivmodsi4_loop>:
    441a:	aa 1f       	adc	r26, r26
    441c:	bb 1f       	adc	r27, r27
    441e:	ee 1f       	adc	r30, r30
    4420:	ff 1f       	adc	r31, r31
    4422:	a2 17       	cp	r26, r18
    4424:	b3 07       	cpc	r27, r19
    4426:	e4 07       	cpc	r30, r20
    4428:	f5 07       	cpc	r31, r21
    442a:	20 f0       	brcs	.+8      	; 0x4434 <__udivmodsi4_ep>
    442c:	a2 1b       	sub	r26, r18
    442e:	b3 0b       	sbc	r27, r19
    4430:	e4 0b       	sbc	r30, r20
    4432:	f5 0b       	sbc	r31, r21

00004434 <__udivmodsi4_ep>:
    4434:	66 1f       	adc	r22, r22
    4436:	77 1f       	adc	r23, r23
    4438:	88 1f       	adc	r24, r24
    443a:	99 1f       	adc	r25, r25
    443c:	1a 94       	dec	r1
    443e:	69 f7       	brne	.-38     	; 0x441a <__udivmodsi4_loop>
    4440:	60 95       	com	r22
    4442:	70 95       	com	r23
    4444:	80 95       	com	r24
    4446:	90 95       	com	r25
    4448:	9b 01       	movw	r18, r22
    444a:	ac 01       	movw	r20, r24
    444c:	bd 01       	movw	r22, r26
    444e:	cf 01       	movw	r24, r30
    4450:	08 95       	ret

00004452 <__udivmodhi4>:
    4452:	aa 1b       	sub	r26, r26
    4454:	bb 1b       	sub	r27, r27
    4456:	51 e1       	ldi	r21, 0x11	; 17
    4458:	07 c0       	rjmp	.+14     	; 0x4468 <__udivmodhi4_ep>

0000445a <__udivmodhi4_loop>:
    445a:	aa 1f       	adc	r26, r26
    445c:	bb 1f       	adc	r27, r27
    445e:	a6 17       	cp	r26, r22
    4460:	b7 07       	cpc	r27, r23
    4462:	10 f0       	brcs	.+4      	; 0x4468 <__udivmodhi4_ep>
    4464:	a6 1b       	sub	r26, r22
    4466:	b7 0b       	sbc	r27, r23

00004468 <__udivmodhi4_ep>:
    4468:	88 1f       	adc	r24, r24
    446a:	99 1f       	adc	r25, r25
    446c:	5a 95       	dec	r21
    446e:	a9 f7       	brne	.-22     	; 0x445a <__udivmodhi4_loop>
    4470:	80 95       	com	r24
    4472:	90 95       	com	r25
    4474:	bc 01       	movw	r22, r24
    4476:	cd 01       	movw	r24, r26
    4478:	08 95       	ret

0000447a <__tablejump_elpm__>:
    447a:	07 90       	elpm	r0, Z+
    447c:	f6 91       	elpm	r31, Z
    447e:	e0 2d       	mov	r30, r0
    4480:	19 94       	eijmp

00004482 <memcmp>:
    4482:	fb 01       	movw	r30, r22
    4484:	dc 01       	movw	r26, r24
    4486:	04 c0       	rjmp	.+8      	; 0x4490 <memcmp+0xe>
    4488:	8d 91       	ld	r24, X+
    448a:	01 90       	ld	r0, Z+
    448c:	80 19       	sub	r24, r0
    448e:	21 f4       	brne	.+8      	; 0x4498 <memcmp+0x16>
    4490:	41 50       	subi	r20, 0x01	; 1
    4492:	50 40       	sbci	r21, 0x00	; 0
    4494:	c8 f7       	brcc	.-14     	; 0x4488 <memcmp+0x6>
    4496:	88 1b       	sub	r24, r24
    4498:	99 0b       	sbc	r25, r25
    449a:	08 95       	ret

0000449c <strchr>:
    449c:	fc 01       	movw	r30, r24
    449e:	81 91       	ld	r24, Z+
    44a0:	86 17       	cp	r24, r22
    44a2:	21 f0       	breq	.+8      	; 0x44ac <strchr+0x10>
    44a4:	88 23       	and	r24, r24
    44a6:	d9 f7       	brne	.-10     	; 0x449e <strchr+0x2>
    44a8:	99 27       	eor	r25, r25
    44aa:	08 95       	ret
    44ac:	31 97       	sbiw	r30, 0x01	; 1
    44ae:	cf 01       	movw	r24, r30
    44b0:	08 95       	ret

000044b2 <strncpy>:
    44b2:	fb 01       	movw	r30, r22
    44b4:	dc 01       	movw	r26, r24
    44b6:	41 50       	subi	r20, 0x01	; 1
    44b8:	50 40       	sbci	r21, 0x00	; 0
    44ba:	48 f0       	brcs	.+18     	; 0x44ce <strncpy+0x1c>
    44bc:	01 90       	ld	r0, Z+
    44be:	0d 92       	st	X+, r0
    44c0:	00 20       	and	r0, r0
    44c2:	c9 f7       	brne	.-14     	; 0x44b6 <strncpy+0x4>
    44c4:	01 c0       	rjmp	.+2      	; 0x44c8 <strncpy+0x16>
    44c6:	1d 92       	st	X+, r1
    44c8:	41 50       	subi	r20, 0x01	; 1
    44ca:	50 40       	sbci	r21, 0x00	; 0
    44cc:	e0 f7       	brcc	.-8      	; 0x44c6 <strncpy+0x14>
    44ce:	08 95       	ret

000044d0 <__do_global_dtors>:
    44d0:	12 e0       	ldi	r17, 0x02	; 2
    44d2:	ca e1       	ldi	r28, 0x1A	; 26
    44d4:	d2 e0       	ldi	r29, 0x02	; 2
    44d6:	00 e0       	ldi	r16, 0x00	; 0
    44d8:	06 c0       	rjmp	.+12     	; 0x44e6 <__do_global_dtors+0x16>
    44da:	22 97       	sbiw	r28, 0x02	; 2
    44dc:	01 09       	sbc	r16, r1
    44de:	fe 01       	movw	r30, r28
    44e0:	0b bf       	out	0x3b, r16	; 59
    44e2:	0e 94 3d 22 	call	0x447a	; 0x447a <__tablejump_elpm__>
    44e6:	cc 31       	cpi	r28, 0x1C	; 28
    44e8:	d1 07       	cpc	r29, r17
    44ea:	80 e0       	ldi	r24, 0x00	; 0
    44ec:	08 07       	cpc	r16, r24
    44ee:	a9 f7       	brne	.-22     	; 0x44da <__do_global_dtors+0xa>
    44f0:	1b be       	out	0x3b, r1	; 59
    44f2:	f8 94       	cli

000044f4 <__stop_program>:
    44f4:	ff cf       	rjmp	.-2      	; 0x44f4 <__stop_program>
